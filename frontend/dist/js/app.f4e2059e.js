(function(){var e={52696:function(e,t,s){"use strict";var a=s(66848),i=function(){var e=this,t=e._self._c;return t("div",{staticClass:"container"},[t("div",{staticClass:"columns is-multiline",attrs:{id:"app"}},[t("SidebarComponent",{on:{updateFeatures:e.updateFeatureStats,"selected-features":e.setSelectedFeatures}}),t("MainComponent",{ref:"main",attrs:{dataframe:this.settings.df,selectedFeatures:e.selectedFeatures}})],1)])},n=[],r=function(){var e=this,t=e._self._c;return t("div",{staticClass:"column is-2"},[t("button",{on:{click:function(t){return e.impute()}}},[e._v("Impute")]),e.configureFeatures?t("section",[t("b-button",{attrs:{size:"is-small","icon-pack":"fas","icon-left":"arrow-left",type:"is-primary is-light"},on:{click:function(t){return e.updateFeatures()}}},[e._v("Select Features ")]),t("section",[e._v(" Configure Features : "),t("table",{staticClass:"table is-narrow is-size-7 is-fullwidth"},[e._m(0),t("tbody",e._l(e.featureSettings,(function(s,a){return t("tr",{key:a},[t("td",[t("b-checkbox",{model:{value:s.selected,callback:function(t){e.$set(s,"selected",t)},expression:"feature.selected"}})],1),t("td",[e._v(e._s(s.name))]),t("td",[t("b-select",{attrs:{expanded:!0,size:"is-small"},on:{input:e.checkmodelTask},model:{value:s.type,callback:function(t){e.$set(s,"type",t)},expression:"feature.type"}},e._l(e.featureTypeOptions,(function(s){return t("option",{key:s.id,domProps:{value:s.id}},[e._v(" "+e._s(s.name)+" ")])})),0)],1)])})),0)])])],1):t("section",[t("upload-component",{on:{uploaded:e.generateTargetDropdown}}),t("div",{staticClass:"column is-12"},[t("b-field",[t("b-button",{attrs:{size:"is-small",type:"is-primary is-light","icon-pack":"fas","icon-left":"cog"},on:{click:function(t){e.configureFeatures=!0}}},[e._v("Select Features "+e._s(e.featureSettings.filter((e=>e.selected)).length))])],1),t("b-field",{attrs:{label:"Seed","label-position":"on-border"}},[t("b-input",{attrs:{size:"is-small",placeholder:"Seed",type:"number",min:"0"},model:{value:e.seed,callback:function(t){e.seed=t},expression:"seed"}})],1),t("b-field",{attrs:{label:"Target","label-position":"on-border"}},[t("b-select",{attrs:{expanded:!0,size:"is-small"},model:{value:e.modelTarget,callback:function(t){e.modelTarget=t},expression:"modelTarget"}},e._l(e.columns,(function(s){return t("option",{key:s,domProps:{value:s}},[e._v(" "+e._s(s)+" ")])})),0)],1),t("b-field",{attrs:{label:"Imputation","label-position":"on-border"}},[t("b-select",{attrs:{expanded:!0,size:"is-small"},model:{value:e.imputationOption,callback:function(t){e.imputationOption=t},expression:"imputationOption"}},e._l(e.imputationOptions,(function(s){return t("option",{key:s.id,domProps:{value:s.id}},[e._v(" "+e._s(s.label)+" ")])})),0)],1),t("b-field",{attrs:{label:"Cross Validation","label-position":"on-border"}},[t("b-select",{attrs:{expanded:!0,size:"is-small"},model:{value:e.crossValidationOption,callback:function(t){e.crossValidationOption=t},expression:"crossValidationOption"}},e._l(e.crossValidationOptions,(function(s){return t("option",{key:s.id,domProps:{value:s.id}},[e._v(" "+e._s(s.label)+" ")])})),0)],1),t("b-field",{attrs:{label:"Model","label-position":"on-border"}},[t("b-select",{attrs:{disabled:e.tuneModel,expanded:!0,size:"is-small"},model:{value:e.modelOption,callback:function(t){e.modelOption=t},expression:"modelOption"}},e._l(e.modelOptions,(function(s){return t("option",{key:s.id,domProps:{value:s.id}},[e._v(" "+e._s(s.label)+" ")])})),0),t("b-button",{attrs:{size:"is-small","icon-pack":"fas","icon-left":this.tuneModel?"arrow-left":"cog"},on:{click:e.configureModel}})],1),e.tuneModel?t("section",{staticClass:"mx-1"},e._l(e.modelConfigurations,(function(s,a){return t("b-field",{key:a,attrs:{label:s.label,"label-position":"on-border"}},["select"===s.type?t("b-select",{attrs:{expanded:!0,size:"is-small"},model:{value:s.value,callback:function(t){e.$set(s,"value",t)},expression:"option.value"}},e._l(s.values,(function(s,a){return t("option",{key:a,domProps:{value:s.value}},[e._v(" "+e._s(s.label)+" ")])})),0):"number"===s.type?t("b-input",{attrs:{size:"is-small",type:"number"},model:{value:s.value,callback:function(t){e.$set(s,"value",t)},expression:"option.value"}}):"text"===s.type?t("b-input",{attrs:{size:"is-small",type:"text"},model:{value:s.value,callback:function(t){e.$set(s,"value",t)},expression:"option.value"}}):e._e()],1)})),1):e._e(),t("b-field",[t("b-button",{attrs:{size:"is-small","icon-pack":"fas","icon-left":"play",loading:e.training,disabled:!e.dataframe,type:" is-light"},on:{click:e.train}},[e._v(" train")])],1),t("b-loading",{attrs:{"is-full-page":!1},model:{value:e.training,callback:function(t){e.training=t},expression:"training"}})],1)],1)])},l=[function(){var e=this,t=e._self._c;return t("thead",[t("tr",[t("th",[e._v(" select ")]),t("th",[e._v(" name ")]),t("th",[e._v(" scale ")])])])}],o=(s(44114),s(43375),s(39225),s(13972),s(99209),s(25714),s(17561),s(66197),function(){var e=this,t=e._self._c;return t("div",{staticClass:"column is-12"},[t("b-field",{staticClass:"file is-warning",class:{"has-name":!!e.file}},[t("b-upload",{staticClass:"file-label",attrs:{accept:".csv,.txt,.xlsx"},model:{value:e.file,callback:function(t){e.file=t},expression:"file"}},[t("span",{staticClass:"file-cta"},[t("b-icon",{staticClass:"file-icon",attrs:{pack:"fas",icon:"upload"}}),t("span",{staticClass:"file-label"},[e._v(e._s(this.settings.datasetName||"Upload"))])],1)])],1),t("b-field",[t("b-checkbox",{model:{value:e.header,callback:function(t){e.header=t},expression:"header"}},[e._v("Header")])],1),t("b-field",{attrs:{label:"Separator","label-position":"on-border"}},[t("b-select",{attrs:{expanded:!0,size:"is-small"},model:{value:e.separator,callback:function(t){e.separator=t},expression:"separator"}},e._l(e.separatorOptions,(function(s){return t("option",{key:s.id,domProps:{value:s.id}},[e._v(" "+e._s(s.label)+" ")])})),0)],1),t("b-field",{attrs:{label:"Decimal","label-position":"on-border"}},[t("b-select",{attrs:{expanded:!0,size:"is-small","label-position":"on-border"},model:{value:e.decimal,callback:function(t){e.decimal=t},expression:"decimal"}},e._l(e.decimalOptions,(function(s){return t("option",{key:s.id,domProps:{value:s.id}},[e._v(" "+e._s(s.label)+" ")])})),0)],1),t("b-field",{attrs:{label:"Sample data","label-position":"on-border"}},[t("b-select",{attrs:{expanded:!0,size:"is-small"},on:{input:e.handleFileSelect}},e._l(e.samplDataOptions,(function(s){return t("option",{key:s.id,domProps:{value:s.name}},[e._v(" "+e._s(s.name)+" ")])})),0)],1)],1)}),c=[];class m{parse(e){throw new Error("Not implemented.")}}var d=s(8344),u=s.n(d);class p extends m{constructor(e){super(),this.separators={0:",",1:".",2:",",3:" "},this.separator=e.separator,this.delimiter=e.delimiter,this.has_header=e.header}parse(e){return new Promise((t=>{u().parse(e,{worker:!1,header:this.has_header,delimiter:this.separators[this.separator],transform:e=>"?"===e||"NA"===e?NaN:e,skipEmptyLines:!0,dynamicTyping:!0,complete:async function(e){t(e.data)}})}))}}s(16573),s(78100),s(77936),s(37467),s(44732),s(79577);class h extends m{parse(e){return new Promise((t=>{var s=new FileReader;s.onload=function(){var e=this.result,s=new Uint8Array(e),a=String.fromCharCode.apply(null,s),i=XLSX.read(a,{type:"binary"}),n=i.SheetNames[0],r=i.Sheets[n];t(XLSX.utils.sheet_to_json(r,{raw:!0}))},s.readAsArrayBuffer(e)}))}}class f extends m{constructor(e){super(),this.separators={0:",",1:".",2:",",3:" "},this.separator=e.separator,this.delimiter=e.delimiter,this.has_header=e.header}parse(e){return new Promise((t=>{u().parse(e,{worker:!1,header:this.has_header,delimiter:this.separators[this.separator],transform:e=>"?"===e||"NA"===e?NaN:e,skipEmptyLines:!0,dynamicTyping:!0,complete:async function(e){if(1==this.delimiter)for(let t=0;t<e.data.length;t++){const s=e.data[t];for(let a=0;a<s.length;a++)e.data[t][a]=parseFloat(e.data[t][a].replace(/\./g,"").replace(",","."))}t(e.data)}})}))}}class _{static createParser(e,t){switch(e.toLowerCase()){case"csv":return new p(t);case"txt":{let e=new f(t);return e}case"xlsx":return new h;default:throw new Error(`Unsupported file type: ${e}`)}}}var y=s(40084),g=s(69005);const b=(0,g.nY)({id:"cart",state:()=>({counter:0,df:{},features:[],transformations:[],results:[],datasetName:"",activeTab:0,resultActiveTab:0,datasetShape:{count:0,columns:0},target:null,isClassification:!0}),getters:{items:e=>e.features,getCounter:e=>e.counter,getDatasetName:e=>e.datasetName,getDatasetShape:e=>e.datasetShape,getDataset:e=>e.df,currentTab:e=>e.activeTab,outputs:e=>e.results,transformationsList:e=>e.transformations,modelTarget:e=>e.target,classificationTask:e=>e.isClassification},actions:{setDatasetName(e){this.datasetName=e},setDatasetShape(e){this.datasetShape=e},resetFeatures(){this.features=[]},resetTransformations(){this.transformations=[]},resetDataset(){this.datasetName="",this.datasetShape={count:0,columns:0}},increaseCounter(){this.counter++},setDataframe(e){this.df=e},addFeature(e){let t=this.features.findIndex((t=>t.name===e.name));-1===t?this.features.push(e):this.features[t]=e},addTransformation(e){let t=this.transformations.findIndex((t=>t.name===e.name));-1===t?this.transformations.push(e):this.transformations[t]=e},addResult(e){this.results.push(e)},removeResult(e){const t=this.results.findIndex((t=>t.id===e));t>-1&&this.results.splice(t,1)},getResultVisualizations(e){const t=this.results.findIndex((t=>t.id===e));if(t>-1){let e=this.results[t].tables,s=this.results[t].plots;return[e,s]}},resetDF(){this.df={}},updateFeature(e){let t=this.features.findIndex((t=>t.name===e.name));-1!==t&&(this.features[t]=e)},removeItem(e){const t=this.features.lastIndexOf(e);t>-1&&this.features.splice(t,1)},setTarget(e){this.target=e},setmodelTask(e){this.isClassification=e},setActiveTab(e){this.activeTab=e},setResultActiveTab(e){this.resultActiveTab=e}}}),v=1e4;var x={setup(){const e=b();return{settings:e}},name:"UploadComponent",props:{msg:String},data(){return{sampleDataset:0,file:null,separator:2,header:!0,decimal:1,decimalOptions:[{id:1,label:"."},{id:2,label:","}],separatorOptions:[{id:1,label:"."},{id:2,label:","},{id:3,label:"space"}],samplDataOptions:[{id:0,name:"none"},{id:1,name:"iris"},{id:2,name:"wine"},{id:3,name:"diabetes"}]}},watch:{file:async function(e){try{let t=await this.process_file(e,e.name.split(".")[1]);this.initDataframe(t,e.name.split(".")[0])}catch(t){this.$buefy.toast.open("Failed to parse the dataset.")}}},methods:{initDataframe(e,t){this.settings.resetFeatures(),this.settings.setDatasetName(t),this.settings.setDatasetShape({count:e.$data.length,columns:e.columns.length}),this.settings.setDataframe(e),this.$emit("uploaded",!0)},async process_file(e,t){let s={separator:this.separator,delimiter:this.decimal,header:this.header},a=await _.createParser(t,s).parse(e);a.length>v&&(a=a.slice(0,v));let i=new y.DataFrame(a);return i},async handleFileSelect(e){e+=".csv";let t,s=this;fetch("/"+e).then((e=>e.blob())).then((async a=>{t=new File([a],e);let i=await this.process_file(t,"csv");s.initDataframe(i,e.split(".")[0])})).catch((e=>{console.error("Error fetching the file:",e)}))}}},w=x,k=s(81656),C=(0,k.A)(w,o,c,!1,null,null,null),S=C.exports;const A={Numerical:{id:1,name:"Numerical"},Nominal:{id:2,name:"Nominal"},Ordinal:{id:3,name:"Ordinal"}},z={SPLIT:1,NO:2,KFOLD:3},F={No:{id:0,name:"No"},Scale:{id:1,name:"Scale"},"x^2":{id:2,name:"x^2"},"ln(x)":{id:3,name:"ln(x)"},Standardize:{id:4,name:"Standardize"}},E={classification:{logistic_regression:{id:1,label:"Logistic Regression",value:1,options:{regularization:{label:"regulrization",type:"select",default:"no",value:"no",values:[{label:"No",value:"no"},{label:"adaptive lasso",value:"lasso"},{label:"ridge",value:"ridge"}]}}},discriminant_analysis:{id:2,label:"Discriminant Analysis",value:2,options:{type:{label:"type",type:"select",default:"linear",values:[{label:"linear",value:"linear"},{label:"quadratic",value:"quadratic"}]},priors:{label:"priors",type:"text",placeholder:"comma separated priors"}}},k_nearest_neighbour:{id:3,label:"k nearest neighbour",value:3,options:{min:{label:"min",type:"number",default:3},max:{label:"max",type:"number",default:9},metric:{label:"metrics",type:"select",default:"manhattan",values:[{label:"euclidean",value:"euclidean"},{label:"manhattan",value:"manhattan"}]}}},support_vector_machine:{id:4,label:"Support vector machine",value:4,options:{kernel:{label:"kernel",type:"select",default:"RBF",values:[{label:"RBF",value:"RBF"},{label:"Linear",value:"Linear"},{label:"Polynomial",value:"Polynomial"},{label:"Sigmoid",value:"Sigmoid"}]},gamma:{label:"gamma",type:"number",for:["RBF","Sigmoid","Polynomial"],default:1},bias:{label:"bias",type:"number",for:["Sigmoid","Sigmoid"],default:0},degree:{label:"degree",type:"number",for:["Polynomial"],default:3}}},random_forest:{id:5,label:"Random forest",value:5,options:{estimators:{label:"estimators",type:"number",default:100},features:{label:"features",type:"number",default:"sqrt"},depth:{label:"depth",type:"number",default:5},criteria:{label:"criteria",type:"select",default:"gini",values:[{label:"gini",value:"gini"},{label:"log loss",value:"log_loss"},{label:"entropy",value:"entropy"}]}}},boosting:{id:6,label:"Boosting",value:6,options:{booster:{type:"select",label:"booster",default:"gbtree",values:[{label:"gbtree",value:"gbtree"},{label:"gblinear",value:"gblinear"},{label:"dart",value:"dart"}]},eta:{label:"learning rate",type:"number",default:.3},estimators:{label:"estimators",type:"number",default:200},depth:{label:"depth",type:"number",default:5}}},naive_bayes:{label:"Naive Bayes",value:7,id:7,options:{laplace:{label:"laplace smoothing",type:"number",default:.05},priors:{label:"priors",type:"text",placeholder:"comma separated priors"},type:{label:"type",type:"select",default:"Gaussian",values:[{label:"Gaussian",value:"Gaussian"},{label:"Multinomial",value:"Multinomial"},{label:"Bernoulli",value:"Bernoulli"}]}}}},regression:{linear_regression:{label:"Linear Regression",value:9,id:9,feature_selection:["no","Lasso","ridge"],criteria:["AIC","BIC","AR2"],options:{regularization:{label:"regularization",type:"select",default:"Lasso",values:[{label:"adaptive lasso",value:"Lasso"},{label:"Ridge",value:"Ridge"}]}}},polynomial_regression:{label:"Polynomial Regression",value:14,id:14,feature_selection:["no","Lasso","ridge"],criteria:["AIC","BIC","AR2"],options:{regularization:{label:"regularization",type:"select",default:"Lasso",values:[{label:"Lasso",value:"Lasso"},{label:"Ridge",value:"Ridge"}]},degree:{label:"Degree",type:"number",default:2}}},k_nearest_neighbour:{label:"k nearest neighbour Regression",value:10,id:10,options:{min:{label:"min",type:"number",default:3},max:{label:"max",type:"number",default:9}}},boosting:{label:"Boosting Regression",value:11,id:11,options:{booster:{label:"booster",type:"select",default:"gbtree",values:[{label:"gbtree",value:"gbtree"},{label:"gblinear",value:"gblinear"},{label:"dart",value:"dart"}]},eta:{label:"learning rate",type:"number",default:.3},estimators:{label:"estimators",type:"number",default:200},depth:{label:"depth",type:"number",default:5}}},support_vector_machine:{label:"Support vector machine Regression",value:12,id:12,options:{kernel:{label:"kernel",type:"select",default:"RBF",values:[{label:"RBF",value:"RBF"},{label:"Linear",value:"Linear"},{label:"Polynomial",value:"Polynomial"},{label:"Sigmoid",value:"Sigmoid"}]},gamma:{label:"gamma",type:"number",for:["RBF","Sigmoid","Polynomial"],default:1},bias:{label:"bias",type:"number",for:["Sigmoid","Sigmoid"],default:0},degree:{label:"degree polynomial",type:"number",for:["Polynomial"],default:3}}},random_forest:{label:"Random forest Regression",value:13,id:13,options:{estimators:{label:"boostnumber of estimators",type:"number",default:100},features:{label:"features length",type:"number",default:"sqrt"},depth:{label:"depth",type:"number",default:5},criteria:{type:"select",label:"criteria",default:"squared_error",values:[{label:"squared_error",value:"squared_error"},{label:"absolute_error",value:"absolute_error"},{label:"friedman_mse",value:"friedman_mse"},{label:"poisson",value:"poisson"}]}}},kernel_regression:{label:"Kernel Regression",value:15,id:15,options:{estimators:{type:"number",default:100}}},bspline_regression:{label:"Bspline Regression",value:16,id:16,options:{knots:{label:"knots",type:"number",default:5},degree:{label:"degree",type:"number",default:3}}}}};var N=s(8964),P=s.n(N),q=s(29357);s(14603),s(47566),s(98721);const T=new Worker(new URL(s.p+s.u(221),s.b)),O={};T.onmessage=e=>{const{id:t,...s}=e.data,a=O[t];delete O[t],a(s)};const L=(()=>{let e=0;return(t,s)=>(e=(e+1)%Number.MAX_SAFE_INTEGER,new Promise((a=>{O[e]=a,T.postMessage({...s,python:t,id:e})})))})();class I{constructor(){}async predict(e){this.context={x_train:e};const t="\n        import matplotlib.pyplot as plt\n        import numpy as np\n        from sklearn.decomposition import PCA\n        from js import x_train       \n        # Perform t-SNE dimensionality reduction\n        pca_x = PCA()\n        pca = pca_x.fit_transform(np.array(x_train))\n        (pca,np.arange(1, len(pca_x.explained_variance_ratio_) + 1), pca_x.explained_variance_ratio_)\n    ";try{const{results:e,error:s}=await L(t,this.context);if(e)return console.log("pyodideWorker return results: ",e),e;s&&console.log("pyodideWorker error: ",s)}catch(s){console.log(`Error in pyodideWorker at ${s.filename}, Line: ${s.lineno}, ${s.message}`)}}}function M(e,t){return null==t&&(t=.5),tf.util.assert(t>=0&&t<=1,`Expected threshold to be >=0 and <=1, but got ${t}`),tf.tidy((()=>{const s=e.greater(tf.scalar(t));return tf.where(s,tf.onesLike(e),tf.zerosLike(e))}))}function R(e){let t=e.replace(/\s/g,"").replace(/[^\w-]/g,"_");return t}async function X(e,t,s){const a={y:e,y_pred:t,labels:s},i="\n        from sklearn.metrics import precision_recall_fscore_support, classification_report, f1_score,accuracy_score\n        from js import y_pred,y,labels       \n        from sklearn.metrics import recall_score,precision_score\n\n        precision = precision_score(y, y_pred, average=None,labels=labels)\n        recall = recall_score(y, y_pred, average=None,labels=labels)\n        f1_micro = f1_score(y, y_pred, average='micro')\n        f1_macro = f1_score(y, y_pred, average='macro')\n        accuracy = accuracy_score(y, y_pred)\n        (precision,recall,f1_micro,f1_macro,accuracy)\n    ";try{const{results:e,error:t}=await L(i,a);if(e)return e;if(t)throw t}catch(n){throw n}}function D(e,t){const s=j(e),a=e.reduce(((e,t)=>e+Math.pow(t-s,2)),0),i=e.reduce(((e,s,a)=>e+Math.pow(s-t[a],2)),0);return 1-i/a}function B(e,t){if(e.length!==t.length)throw new Error("The lengths of actual values and predicted values must be the same.");const s=e.length;let a=0;for(let n=0;n<s;n++){const s=Math.pow(e[n]-t[n],2);a+=s}const i=a/s;return i}function j(e){return e.reduce(((e,t)=>e+t),0)/e.length}function W(e,t,s){console.assert(e.length===t.length,"predictions and test should have the same length.");let a=[],i=[],n=0;return t.forEach(((t,r)=>{if(t===e[r])n++;else{a.push(r);let t=[e[r]],n=s.inverseTransform(t);i.push(n[0])}})),{accuracy:Number(n/e.length*100),indexes:a,mispredictions:i}}function V(e,t,s){try{switch(s){case"1":{let s=new y.MinMaxScaler;s.fit(e[t]),e.addColumn(t,s.transform(e[t]),{inplace:!0});break}case"2":e.addColumn(t,e[t].apply((e=>e*e)),{inplace:!0});break;case"3":e.addColumn(t,e[t].apply((e=>{let t=Math.log(e);if(isNaN(t))throw new Error("falied at data transformation.");return Math.log(e)})),{inplace:!0});break;case"4":{let s=new y.StandardScaler;s.fit(e[t]),e.addColumn(t,s.transform(e[t]),{inplace:!0});break}default:break}}catch(a){throw new Error("falied at data transformation.")}}function G(e,t,s){for(let a=0;a<t.length;a++){const i=t[a];let n=s.find((e=>e.name===i));n&&"0"!==n&&V(e,i,n.scaler.toString())}return e}function Q(e,t=!1){if(t){let t=[],s=[],a=[],i=[];e.columns.forEach((a=>{"string"===e.column(a)?.dtype?t.push(a):s.push(a)})),t.forEach((t=>{let s=J(e.column(t).values).mode;a.push(s)})),s.forEach((t=>{let s=e.column(t).mean();i.push(s)})),e=e.fillNa(a,{columns:t}),e=e.fillNa(i,{columns:s})}else e.dropNa({axis:1,inplace:!0});return e}function J(e){if(0===e.length)return null;const t={total:0,mode:""};for(let i=0;i<e.length;i++){const s=e[i];null!==s&&void 0!==s&&(t["total"]++,s in t?t[s]++:t[s]=1)}let s=null,a=0;for(const i in t)"total"!==i&&t[i]>a&&(s=i,a=t[i]);return t["mode"]=s,t}function H(e,t,s){let a=e.copy(),i=t.filter((e=>e.type===A.Nominal.id||e.type===A.Ordinal.id)),n=[];return i.forEach((e=>{if(e.type===A.Ordinal.id){let t=new y.LabelEncoder;t.fit(a[e.name]);let s=t.transform(a[e.name]);a.addColumn(e.name,s.values,{inplace:!0}),n.push(e.name)}else a=(0,y.getDummies)(a,{columns:[e.name]}),s!==E.classification.logistic_regression.label&&s!==E.regression.linear_regression.label&&s!==E.regression.polynomial_regression.label||a.drop({columns:[a.columns.find((t=>t.includes(e.name+"_")))],inplace:!0}),n.push(...a.columns.filter((t=>t.includes(e.name+"_"))))})),[a,n]}var U=s(79811),Y=s(31841),K=s(97271);class Z{constructor(){(0,q.A)(this,"kernelFunctions",{gaussian:function(e){return Math.exp(-.5*e*e)/Math.sqrt(2*Math.PI)},uniform:function(e){return Math.abs(e)<=1?.5:0},triangular:function(e){return Math.abs(e)<=1?1-Math.abs(e):0},biweight:function(e){return Math.abs(e)<=1?15/16*Math.pow(1-e*e,2):0},triweight:function(e){return Math.abs(e)<=1?35/32*Math.pow(1-e*e,3):0},Epanechnikov:function(e){return Math.abs(e)<=1?.75*(1-e*e):0}}),this.color_scheme=Y.A}classification_target_chart(e,t,s,a,i=""){var n=[...new Set(t)],r=t.map((e=>this.indexToColor(n.indexOf(e)))),l=[];l.push({name:"Count",data:e.map(((e,t)=>({y:e,color:r[t]})))}),Highcharts.chart(a,{credits:{enabled:!1},title:{text:""},chart:{type:"column"},xAxis:{categories:n},yAxis:{min:0},plotOptions:{column:{pointPadding:.1,borderWidth:0}},colors:r,series:l})}regression_target_chart(e,t,s){let a=[],i=[],n=e;var r=U.Wj(n,100);let l=U.JL(e,"gaussian","nrd");r.forEach((e=>{i.push(l(e,"nrd")),a.push([e,i[i.length-1]])})),Highcharts.chart(t,{credits:{enabled:!1},legend:{enabled:!1,verticalAlign:"top"},chart:{height:"300",type:"spline",animation:!0},title:{text:s},yAxis:{title:{text:null}},tooltip:{valueDecimals:3},plotOptions:{series:{marker:{enabled:!1},dashStyle:"shortdot",area:!0}},series:[{type:"area",dashStyle:"solid",lineWidth:2,data:a}]})}draw_categorical_barplot(e,t,s){const a=s+"- barplot";$("#categories_barplots").append(`<div class="column is-4" style="height:40vh;" id="${a}"></div>`);const i=e.reduce(((e,t)=>(e[t]=(e[t]||0)+1,e)),{}),n=Object.entries(i).map((([e,t])=>({value:e,count:t})));n.sort(((e,t)=>t.count-e.count));const r=n.slice(0,5);new Highcharts.Chart({chart:{renderTo:a,type:"column"},xAxis:{categories:r.map((e=>e.value))},title:{text:s},yAxis:{min:0,labels:{overflow:"justify"}},credits:{enabled:!1},plotOptions:{bar:{dataLabels:{enabled:!0}}},series:[{showInLegend:!1,name:s,data:r.map((e=>e.count))}]})}roc_chart(e,t,s){var a={x:s,y:t,type:"scatter",mode:"lines",name:"ROC Curve"},i={x:[0,1],y:[0,1],type:"scatter",name:"diagonal"},n={title:"ROC Curve",xaxis:{title:"False Positive Rate"},yaxis:{title:"True Positive Rate"}},r=[a,i];P().newPlot(e,r,n)}falsePositives(e,t){return tf.tidy((()=>{const s=tf.scalar(1),a=tf.scalar(0);return tf.logicalAnd(e.equal(a),t.equal(s)).sum().cast("float32")}))}indexToColor(e){return this.color_scheme[e+1%this.color_scheme.length]}reshape(e,t){if(0===t.length)return e[0];const[s,...a]=t,i=[],n=a.reduce(((e,t)=>e*t),1);console.log(n);for(let r=0;r<s;r++)i.push(this.reshape(e.slice(r*n,(r+1)*n),a));return i}async plot_tsne(e,t,s){document.getElementById("dimensionality_reduction_panel_tsne").style.display="block",console.assert(Array.isArray(e));const a=tsne.tsne(y.tensorflow.tensor2d(e));await a.compute();const i=a.coordinates(),n=i.dataSync(),r=this.reshape(n,i.shape);let l=[],o=[];if(t.length>0){t=t.flat();var c=[...new Set(t)];let e=r.map((function(e,s){return{label:t[s],x:e[0],y:e[1]}}));c.forEach(((t,s)=>{var a=e.filter((e=>e.label===t));o.push({x:a.map((e=>e.x)),y:a.map((e=>e.y)),mode:"markers",type:"scatter",name:t,marker:{size:4,color:this.indexToColor(s)}})}))}else{let e=r.map((function(e,t){return l.push(s[t][0]),{x:e[0],y:e[1]}}));o.push({x:l,y:e.map((e=>e.y)),mode:"markers+text",type:"scatter",colorscale:"viridis",marker:{size:4,color:l,colorbar:{title:"Color Scale",titleside:"right"}}})}var m={showlegend:!0,margin:{l:50,r:40,b:50,t:40,pad:20},xaxis:{linecolor:"black",linewidth:1,mirror:!0},yaxis:{linecolor:"black",linewidth:1,mirror:!0},legend:{x:1,xanchor:"right",y:1}};P().newPlot("tsne",o,m,{responsive:!0,modeBarButtonsToRemove:["resetScale2d","select2d","resetViews","sendDataToCloud","hoverCompareCartesian","lasso2d","drawopenpath "]})}trueNegatives(e,t){return tf.tidy((()=>{const s=tf.scalar(0);return tf.logicalAnd(e.equal(s),t.equal(s)).sum().cast("float32")}))}falsePositiveRate(e,t){return tf.tidy((()=>{const s=this.falsePositives(e,t),a=this.trueNegatives(e,t);return s.div(s.add(a))}))}drawROC(e,t){return tf.tidy((()=>{const s=[0,.05,.1,.15,.2,.25,.3,.35,.4,.45,.5,.55,.6,.65,.7,.75,.8,.85,.9,.92,.94,.96,.98,1],a=[],i=[];let n=0;for(let r=0;r<s.length;++r){const l=s[r],o=M(t,l).as1D(),c=this.falsePositiveRate(e,o).dataSync()[0],m=tf.metrics.recall(e,o).dataSync()[0];i.push(c),a.push(m),r>0&&(n+=(a[r]+a[r-1])*(i[r-1]-i[r])/2)}return[n,i,a]}))}nrd(e){let t=U.Fx(e);const s=U.Z0(e);return"number"===typeof s&&(t=Math.min(t,s/1.34)),1.06*t*Math.pow(e.length,-.2)}hexToRgb(e){var t=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(e);return t?{r:parseInt(t[1],16),g:parseInt(t[2],16),b:parseInt(t[3],16),a:.5}:null}draw_kde(e,t,s,a="nrd",i=!1,n=!1){try{let d=e.column(t).values,u=this.nrd(d).toFixed(2),p=e.loc({columns:[t,s]}),h=[...new Set(p.column(s).values)];2===h.length&&h.sort();let f=p.values,_=[];var r=h.map((e=>this.indexToColor(h.indexOf(e))));if(i)for(let e=0;e<h.length;e++){const t=h[e];let s=[];for(let e=0;e<f.length;e++){const a=f[e];a[1]===t&&s.push(a[0])}_.push(s)}else _.push(e[t].values);document.getElementById("kde_panel").style.display="block";var l=document.createElement("div");if(l.className="column is-3",l.setAttribute("id",t+"-kde-plot"),!n){let s=R(t);$("#container").append(`<div class="column is-4 is-size-6-tablet my-1">\n                <div class="columns is-multiline">\n                <div class="column is-12" >\n                    <div id="${s+"-kde-plot"}"> </div>\n                    <div id="${s+"-boxplot"}" style="height:20vh;width: 100%">\n                    </div>\n                    <div class="field has-addons has-addons-centered my-1">\n                    <div class="control">\n                    <span class="select is-small">\n                      <select id="${s+"-kernel_type"}">\n                      <option value="gaussian">gaussian</option>\n                        <option value="uniform">uniform</option>\n                        <option value="triangular">triangular</option>\n                        <option value="biweight">biweight</option>\n                        <option value="triweight">triweight</option>\n                        <option value="Epanechnikov">Epanechnikov</option>\n                      </select>\n                    </span>\n                    <p class="help is-success">Kernel</p>\n                  </div>\n                  <div class="control">\n                        <div class="select is-small">\n                            <select id="${s+"--normal"}">\n                                <option value="0">No</option>\n                                <option value="1">Scale</option>\n                                <option value="2">x^2</option>\n                                <option value="3">ln(x)</option>\n                                <option value="4">Standardize </option>\n                            </select>\n                        </div>\n                    <p class="help is-success">Normalization</p>\n                    </div>\n                        <div class="control">\n                            <input class="input is-small" type="number"  min="0" id="${s+"-kde"}" value="${u}">\n                            <p class="help is-success">Bandwidth</p>\n                        </div>\n                        <p class="control">\n                            <a class="button is-success is-small" id="${s+"-kde-button"}">\n                                Apply\n                            </a>\n                        </div>\n                    </div>\n                  </div>\n                </div>`),document.getElementById(s+"--normal").addEventListener("change",(function(){const a=document.getElementById("target").value;let i=document.getElementById(a).value!==A.Numerical,n=e.loc({columns:[t,a]}),r=document.getElementById(s+"--normal").value;V(n,t,r),n.dropNa({axis:1,inplace:!0});var l=parseFloat(document.getElementById(s+"-kde").value);o.draw_kde(n,t,a,l,i,!0)}))}var o=this;let y=R(t);document.getElementById(y+"-kde-button").addEventListener("click",(function(){const s=document.getElementById("target").value;let a=document.getElementById(s).value!==A.Numerical,i=e.loc({columns:[t,s]}),n=document.getElementById(y+"--normal").value;V(i,t,n);var r=parseFloat(document.getElementById(y+"-kde").value);i.dropNa({axis:1,inplace:!0}),o.draw_kde(i,t,s,r,a,!0)}));let g=y+"-kde-plot",b=[...p.column(t).values];var c=U.Wj(b,100);let v,x=[],w=document.getElementById(y+"-kernel_type")?.value??"gaussian",k=[];if(i)for(let e=0;e<_.length;e++){if(_[e].length>2){let t=[];v=U.JL(_[e],this.kernelFunctions[w],a);let s=[];c.forEach((e=>{t.push(v(e,a)),s.push([e,t[t.length-1]])})),x.push(s)}else x.push([]);k.push({name:h[e],x:_[e],marker:{color:r[e]},type:"box"})}else{for(let e=0;e<_.length;e++)if(_[e].length>2){let t=[];v=U.JL(_[e],this.kernelFunctions[w],a);let s=[];c.forEach((e=>{t.push(v(e,a)),s.push([e,t[t.length-1]])})),x.push(s)}else x.push([]);k.push({name:t,x:d,type:"box"})}let C=4e3;var m={yaxis:{visible:!1},showlegend:!1,margin:{l:20,r:10,b:60,t:10},legend:{x:1,xanchor:"right",y:1}};P().newPlot(y+"-boxplot",k,m,{autosize:!0,responsive:!0,modeBarButtonsToRemove:["pan","resetScale2d","select2d","resetViews","sendDataToCloud","hoverCompareCartesian","lasso2d","drawopenpath "]}),Highcharts.chart(g,{credits:{enabled:!1},legend:{enabled:!!i,align:"right",verticalAlign:"top"},chart:{height:"300",type:"spline",animation:!0},title:{text:t},yAxis:{title:{text:null}},tooltip:{valueDecimals:3},plotOptions:{series:{marker:{enabled:!1},dashStyle:"shortdot",color:r,animation:{duration:C},area:!0}},series:x.map(((e,t)=>({type:"area",name:h[t],dashStyle:"solid",lineWidth:2,color:r[t],data:e})))}),window.dispatchEvent(new Event("resize"))}catch(d){throw new Error("falied at plotting kde.")}}async classificationPCA(e,t,s,a,i){const n=new I(e,{center:!0,scale:!0});var r=t.map((e=>this.indexToColor(a.indexOf(e))));const l=await n.predict(e,{nComponents:2});let o=[],c=[],m=[],d=[],u=[],p=[];l[0].forEach(((a,i)=>{if(s["indexes"].includes(i)){let n=s["indexes"].findIndex((e=>e==i));u.push(e[i].join()),p.push([t[i],s["mispredictions"][n]]),m.push(a[0]),d.push(a[1])}else o.push(a[0]),c.push(a[1])}));var h={x:o,y:c,name:"Predictions",text:t,mode:"markers",type:"scatter",marker:{size:4,color:r,symbol:"circle"}},f={name:"Missclassifications",x:m,y:d,text:u,customdata:p,mode:"markers",type:"scatter",marker:{size:7,color:r,symbol:"cross"},hovertemplate:"Features : %{text}<br>True class: %{customdata[0]}<br>Predited class: %{customdata[1]}<extra></extra>"},_=[h,f];P().newPlot("pca_results_"+i,_,{hovermode:"closest",hoverlabel:{bgcolor:"#FFF"},showlegend:!0,margin:{l:40,r:20,b:40,t:20},legend:{x:1,xanchor:"right",y:1},xaxis:{linecolor:"black",linewidth:1,mirror:!0,title:"PC1"},yaxis:{linecolor:"black",linewidth:1,mirror:!0,title:"PC2"}},{staticPlot:!1,responsive:!0,modeBarButtonsToRemove:["resetScale2d","select2d","resetViews","sendDataToCloud","hoverCompareCartesian","lasso2d","drawopenpath "]})}async draw_pca(e,t,s,a,i){const n=new I(e,{center:!0,scale:!0});t=t.flat();var r=[...new Set(t)];const l=await n.predict(e,{nComponents:3}),o=l[0];let c=[],m=[];o.forEach(((e,n)=>{m.push({x:e[a-1],y:e[i-1],label:t[n]}),c.push(s[n][0])}));let d=[];0!==r.length?r.forEach(((e,t)=>{var s=m.filter((t=>t.label===e));d.push({x:s.map((e=>e.x)),y:s.map((e=>e.y)),mode:"markers",type:"scatter",name:e,marker:{size:4,color:this.indexToColor(t)}})})):d.push({x:m.map((e=>e.x)),y:m.map((e=>e.y)),mode:"markers",type:"scatter",marker:{color:c,colorscale:"YlOrRd",size:4,colorbar:{title:"Color Scale Legend",titleside:"right"}}});let u=[],p=0;l[2].forEach((e=>{p+=e,u.push(p)})),Highcharts.chart("scree_plot",{credits:{enabled:!1},title:{text:""},legend:{verticalAlign:"top",align:"left",floating:!0},yAxis:{linecolor:"black",linewidth:1,mirror:!0,min:0,max:1,title:{text:"Explained variance"},plotLines:[{value:.9,dashStyle:"shortdash",color:"grey",width:1,zIndex:4,label:{text:"0.9",align:"right"}},{value:.8,dashStyle:"shortdash",color:"darkgrey",width:1,zIndex:4,label:{text:"0.8",align:"right"}}]},xAxis:{labels:{enabled:!0,formatter:function(){return this.value+1}},title:{text:"Number of components"}},series:[{name:"Propotional",color:"blue",data:l[2]},{name:"Cumulative",color:"red",data:u}]}),P().newPlot("pca-1",d,{showlegend:!0,margin:{l:40,r:40,b:40,t:40,pad:10},legend:{x:1,xanchor:"right",y:1},xaxis:{linecolor:"black",linewidth:1,mirror:!0,title:"PC"+a},yaxis:{linecolor:"black",linewidth:1,mirror:!0,title:"PC"+i}},{responsive:!0})}drawStackedHorizontalChart(e,t){var s={x:[20,14,23],y:["giraffes","orangutans","monkeys"],name:"SF Zoo",orientation:"h",marker:{color:"rgba(55,128,191,0.6)",width:1},type:"bar"},a={x:[12,18,29],y:["giraffes","orangutans","monkeys"],name:"LA Zoo",orientation:"h",type:"bar",marker:{color:"rgba(255,153,51,0.6)",width:1}},i=[s,a],n={title:"Colored Bar Chart",barmode:"stack"};P().newPlot("myDiv",i,n)}regularization_plot(e,t,s){const a=[];s.forEach(((s,i)=>{a.push({x:e,y:t.map((e=>e[i])),type:"scatter",name:s,mode:"line"})}));var i={colorway:["#f3cec9","#e7a4b6","#cd7eaf","#a262a9","#6f4d96","#3d3b72","#182844"],title:"Lasso Coefficients as Alpha varies",xaxis:{type:"log",title:"Alpha (Regularization Strength)"},yaxis:{title:"Coefficient Value"}};P().newPlot("lasso_plot",a,i)}argmax(e){return e.reduce(((e,t,s,a)=>t>a[e]?s:e),0)}probabilities_boxplot(e,t,s,a){s.filter((e=>0==e)).length,s.filter((e=>1==e)).length;var i=t.map(((e,t)=>this.indexToColor(t)));const n=e[0].length;let r=[],l={};s.forEach(((t,s)=>{t in l||(l[t]=[]),l[t].push(e[s])}));for(let c in l){let e=l[c];for(let s=0;s<n;s++){let a=e.map((e=>e[s]));r.push({type:"box",name:` class ${c} : Predicted ${t[s]}`,marker:{color:i[s]},y:a})}}let o=`\n            <div class="column is-6" id="probs_box_plot_${a}" style="height: 350px;">\n            </div>\n        `;$("#tabs_info li[data-index='"+a+"'] #results_"+a).append(o),P().newPlot("probs_box_plot_"+a,r,{yaxis:{title:"Predicted Probability"},legend:{x:1,xanchor:"right",y:1},margin:{l:60,r:30,b:60,t:0,pad:20},boxmode:"group"})}probablities_violin_plot(e,t,s){var a=s.map(((e,t)=>this.indexToColor(t)));const i=(e,t)=>e.map((e=>e[t])),n=e[0].length;let r=[];for(let o=0;o<n;o++)r.push({name:t[o],type:"violin",y:i(e,o),points:"none",box:{visible:!0},boxpoints:!1,line:{color:a[o]},fillcolor:a[o],opacity:.6,meanline:{visible:!0}});var l={title:"Violin Plot",yaxis:{zeroline:!1}};P().newPlot("probs_violin_plot",r,l)}async plotConfusionMatrix(e,t,s,a,i){const n=await K.metrics.confusionMatrix(e,t);let r=await X(e.arraySync(),t.arraySync(),a),l=r[4].toFixed(2),o=r[2].toFixed(2),c=r[3].toFixed(2),m=n[0].length,d=[],u=[];for(let _=0;_<m;_++)d.push(parseFloat(r[0][_].toFixed(2)));for(let _=0;_<m;_++)u.push(parseFloat(r[1][_].toFixed(2)));y.tensorflow.dispose(e),y.tensorflow.dispose(t);const p=["Precession","Recall","F1 score","Support"];s.push("Precession"),u.push(0),n.push(d);let h=s.filter((e=>!p.includes(e))),f=[];for(let _=0;_<n.length;_++){const e=n[_];_<n.length-1&&e.push(u[_]);for(let t=0;t<e.length;t++){const s=e[t];f.push([t,_,s])}}return h.push("Recall"),Highcharts.chart("confusion_matrix_"+i,{credits:{enabled:!1},exporting:{enabled:!0},chart:{type:"heatmap",plotBorderWidth:1},title:{text:"",style:{fontSize:"1em"}},xAxis:[{categories:h,title:{text:"Predicted Class"}},{linkedTo:0,opposite:!0,tickLength:0,labels:{formatter:function(){var e=this.chart,t=Highcharts.each,s=e.series[0],i=0,n=this.value;return t(s.options.data,(function(e,t){e[0]===n&&e[1]<a.length&&(i+=e[2])})),i}}}],yAxis:[{categories:s,title:{text:"Actual Class"},reversed:!0,endOnTick:!1},{linkedTo:0,opposite:!0,tickLength:0,labels:{formatter:function(){var e=this.chart,t=Highcharts.each,s=e.series[0],i=0,n=this.value;return t(s.options.data,(function(e,t){e[1]===n&&e[1]<a.length&&(i+=e[2])})),i}},title:null}],colorAxis:{min:0,minColor:"#FFFFFF",maxColor:Highcharts.getOptions().colors[0]},legend:{align:"center",layout:"horizontal",margin:0,verticalAlign:"top",y:5,symbolHeight:10},series:[{name:"",borderWidth:1,data:f,dataLabels:{enabled:!0,useHTML:!0,color:"#000000",formatter:function(){var e=this.series.data.reduce((function(e,t,s){return(s+1)%(a.length+1)===0?e:e+t?.value}),0),t=this.point.value,s=this.point.index>=this.series.data.length-1*(a.length+1);if(s||(this.point.index+1)%(a.length+1)===0)return'<p style="margin:auto; text-align:center;">'+t+"</p>";var i=(t/e*100).toFixed(2);return'<p style="margin:auto; text-align:center;">'+t+"<br/>("+i+"%)</p> "}}}],responsive:{rules:[{condition:{maxWidth:500},chartOptions:{yAxis:{labels:{format:"{substr value 0 1}"}}}}]}}),[l,o,c]}plot_regularization(e,t,s,a){let i=`\n                    <div class="column is-6" id="regularization_${a}" style="height: 40vh;">\n                    </div>\n    `;$("#tabs_info li[data-index='"+a+"'] #results_"+a).append(i);let n=[];for(let l=0;l<s.length;l++)n.push({name:s[l],data:e.map((e=>e[l]))});const r=[];for(let l=0;l<t.length;l++)r.push(t[l].toFixed(2));Highcharts.chart("regularization_"+a,{title:{text:""},yAxis:{title:{text:"Coefficients"}},xAxis:{title:{text:"penalty weight"},categories:r},legend:{layout:"vertical",align:"right",verticalAlign:"middle"},plotOptions:{series:{label:{connectorAllowed:!1}}},series:n,responsive:{rules:[{condition:{maxWidth:500},chartOptions:{legend:{layout:"horizontal",align:"center",verticalAlign:"bottom"}}}]}})}yhat_plot(e,t,s,a=""){P().newPlot(s,[{x:e,y:t,type:"scatter",name:"y",mode:"markers"},{x:e,y:e,mode:"lines",type:"scatter",line:{color:"red",dash:"dash"},name:"y = x line"}],{title:{text:a,font:{family:"sans-serif",size:10},xref:"paper",x:.05},showlegend:!1,xaxis:{linecolor:"black",linewidth:1,mirror:!0,title:{text:"y",font:{family:"sans-serif",size:14,color:"#7f7f7f"}}},yaxis:{linecolor:"black",linewidth:1,mirror:!0,title:{text:"predictions",font:{family:"sans-serif",size:14,color:"#7f7f7f"}}},margin:{l:40,r:10,b:40,t:20,pad:0}},{responsive:!0})}residual_plot(e,t,s,a=""){P().newPlot(s,[{x:e,y:t,type:"scatter",name:"y",mode:"markers",marker:{color:"rgb(17, 157, 255)",size:7}}],{title:{text:a,font:{family:"sans-serif",size:10},xref:"paper",x:.05},showlegend:!1,xaxis:{linecolor:"black",linewidth:1,mirror:!0,title:{text:"y",font:{family:"sans-serif",size:14,color:"#7f7f7f"}}},yaxis:{linecolor:"black",linewidth:1,mirror:!0,title:{text:"residuals",font:{family:"sans-serif",size:14,color:"#7f7f7f"}}},margin:{l:40,r:10,b:40,t:20,pad:0}},{responsive:!0})}ScatterplotMatrix(e,t,s,a,i=!0,n,r,l){return new Promise(((n,l)=>{setTimeout((()=>{let l=[...new Set(s)];var o=s.map((e=>this.indexToColor(l.indexOf(e))));let c=[],m=1;2===l.length&&l.sort();for(let n=0;n<t.length;n++)for(let d=0;d<t.length;d++){if(n===d){let s,o=[],d=[],u=[];if(i)if(n>=t.length-a)if(n===t.length-1){for(let t=0;t<l.length;t++)o.push(e.filter((s=>s[e[0].length-1]===l[t])).map((e=>e[n])));c.push({x:l,y:o.map((e=>e.length)),type:"bar",xaxis:"x"+m,yaxis:"y"+m,marker:{color:l.map(((e,t)=>this.indexToColor(t)))}})}else{let t=[...new Set(e.map((e=>e[n])))];for(let s=0;s<l.length;s++){let a=e.filter((t=>t[e[0].length-1]===l[s])),i=[];t.forEach((e=>i.push(a.filter((t=>t[n]===e)).length))),o.push({items:a,counts:i})}l.forEach(((e,s)=>{c.push({x:t,y:o[s].counts,type:"bar",xaxis:"x"+m,yaxis:"y"+m,marker:{color:this.indexToColor(s)}})}))}else{for(let t=0;t<l.length;t++)o.push(e.filter((s=>s[e[0].length-1]===l[t])).map((e=>e[n])));for(let e=0;e<o.length;e++)if(o[e].length>2){let t=this.nrd(o[e]).toFixed(2);d=U.Wj(o[e],100);let a=[];s=U.JL(o[e],"gaussian","nrd");let i=[];d.forEach((e=>{a.push(s(e,t)),i.push([e,a[a.length-1]])})),u.push(i)}else u.push([]);for(let e=0;e<u.length;e++)c.push({type:"scatter",x:u[e].map((e=>e[0])),y:u[e].map((e=>e[1])),xaxis:"x"+m,yaxis:"y"+m,mode:"lines",name:"Red",fill:"tozeroy",line:{color:this.indexToColor(e),width:3}})}else if(r.includes(t[n])){let t=e.map((e=>e[n])),s=[...new Set(t)],a=[];for(let e=0;e<s.length;e++){const i=s[e];a.push(t.filter((e=>e===i)).length)}c.push({x:s,y:a,type:"bar",name:"Trace 1",xaxis:"x"+m,yaxis:"y"+m})}else{o.push(e.map((e=>e[n])));for(let e=0;e<o.length;e++)if(o[e].length>2){let t=[],a=this.nrd(o[e]).toFixed(2);d=U.Wj(o[e],100),s=U.JL(o[e],"gaussian","nrd");let i=[];d.forEach((e=>{t.push(s(e,a)),i.push([e,t[t.length-1]])})),u.push(i)}else u.push([]);c.push({type:"scatter",x:u[0].map((e=>e[0])),y:u[0].map((e=>e[1])),mode:"lines",fill:"tozeroy",xaxis:"x"+m,yaxis:"y"+m,name:"Red",line:{color:"rgb(219, 64, 82)",width:3}})}}else if(n===t.length-1)c.push({y:e.map((e=>e[n])),x:e.map((e=>e[d])),color:o,marker:{colorscale:"Portland",color:i?o:s,size:2},type:"scattergl",mode:"markers",xaxis:"x"+m,yaxis:"y"+m});else if(d>=t.length-a)if(i){let s=[...new Set(e.map((e=>e[d])))];for(let a=0;a<l.length;a++)for(let i=0;i<s.length;i++){let r=e.filter((e=>e[d]===s[i]&&e[t.length-1]===l[a]));r&&c.push({orientation:"v",offsetgroup:"1",name:s[i],y:r.map((e=>e[n])),marker:{color:this.indexToColor(a)},type:"box",xaxis:"x"+m,yaxis:"y"+m})}}else c.push({x:[],y:[],mode:"lines",name:"Trace 1"});else if(d>n){let t=e.map((e=>e[n])),s=e.map((e=>e[d]));c.push({x:[1.5],y:[1.5],text:[jStat.corrcoeff(t,s).toFixed(2)],mode:"text",textfont:{size:12,color:"black"},xaxis:"x"+m,yaxis:"y"+m,type:"scatter"})}else c.push({y:e.map((e=>e[n])),x:e.map((e=>e[d])),color:o,type:"scattergl",mode:"markers",marker:{colorscale:"Portland",color:i?o:s,size:2},xaxis:"x"+m,yaxis:"y"+m});m++}for(var d={width:100*t.length,height:100*t.length,spacing:0,showlegend:!1,boxmode:"group",grid:{rows:t.length,columns:t.length,pattern:"independent"},margin:{r:10,t:10,pad:5}},u=0;u<t.length;u++)for(var p=0;p<t.length;p++){var h="xaxis"+(u*t.length+p+1),f="yaxis"+(u*t.length+p+1);let e=10;d[h]={showgrid:!1,showticklabels:!1,tickfont:{size:e}},d[f]={showgrid:!1,showticklabels:!1,tickfont:{size:e}},u===t.length-1&&(d[h]={tickfont:{size:e},title:{text:t[p],font:{size:e}}}),0===p&&(d[f]={tickfont:{size:e},title:{text:t[u],font:{size:e}}})}P().react("scatterplot_mtx",c,d,{staticPlot:!0}),n()}),1e3)}))}KNNPerformancePlot(e,t,s,a){let i=[];i.push({x:e.map((e=>e.k)),y:e.filter((e=>"manhattan"===e.metric)).map((e=>Number((e.evaluation.accuracy/100).toFixed(2)))),mode:"lines",name:"manhattan test set",line:{color:"rgb(55, 128, 191)",width:2}}),i.push({x:e.map((e=>e.k)),y:e.filter((e=>"euclidean"===e.metric)).map((e=>Number((e.evaluation.accuracy/100).toFixed(2)))),mode:"lines",name:"euclidean test set",line:{color:"rgb(219, 64, 82)",width:2}}),i.push({x:e.map((e=>e.k)),y:e.filter((e=>"manhattan"===e.metric)).map((e=>Number((e.evaluation_train.accuracy/100).toFixed(2)))),mode:"lines",name:"manhattan train set",line:{color:"rgb(55, 128, 191)",width:1}}),i.push({x:e.map((e=>e.k)),y:e.filter((e=>"euclidean"===e.metric)).map((e=>Number((e.evaluation_train.accuracy/100).toFixed(2)))),mode:"lines",name:"euclidean train set",line:{color:"rgb(219, 64, 82)",width:1}});var n=Number.POSITIVE_INFINITY,r=Number.NEGATIVE_INFINITY;i.forEach((e=>{let t=Math.min(...e.y),s=Math.max(...e.y);t<n&&(n=t),s>r&&(r=s)}));var l={showlegend:!0,legend:{orientation:"h",font:{family:"sans-serif",size:8,color:"#000"}},xaxis:{linecolor:"black",linewidth:1,mirror:!0,title:{text:"K"}},yaxis:{linecolor:"black",linewidth:1,mirror:!0,title:{text:"Accuracy"}},shapes:[{type:"line",x0:t.k,y0:n,x1:t.k,y1:r,line:{color:"rgb(55, 128, 191)",width:1}},{type:"line",x0:s.k,y0:n,x1:s.k,y1:r,line:{color:"rgb(55, 128, 191)",width:1}}]};P().newPlot("knn_table_"+a,i,l)}KNNPerformancePlotRegression(e,t,s,a){let i=[];i.push({x:e.map((e=>e.k)),y:e.filter((e=>"manhattan"===e.metric)).map((e=>Number(e.evaluation.toFixed(2)))),mode:"lines",name:"manhattan test set",line:{color:"rgb(55, 128, 191)",width:2}}),i.push({x:e.map((e=>e.k)),y:e.filter((e=>"euclidean"===e.metric)).map((e=>Number(e.evaluation.toFixed(2)))),mode:"lines",name:"euclidean test set",line:{color:"rgb(219, 64, 82)",width:2}}),i.push({x:e.map((e=>e.k)),y:e.filter((e=>"manhattan"===e.metric)).map((e=>Number(e.evaluation_train.toFixed(2)))),mode:"lines",name:"manhattan train set",line:{color:"rgb(55, 128, 191)",width:1}}),i.push({x:e.map((e=>e.k)),y:e.filter((e=>"euclidean"===e.metric)).map((e=>Number(e.evaluation_train.toFixed(2)))),mode:"lines",name:"euclidean train set",line:{color:"rgb(219, 64, 82)",width:1}});var n=Number.POSITIVE_INFINITY,r=Number.NEGATIVE_INFINITY;i.forEach((e=>{let t=Math.min(...e.y),s=Math.max(...e.y);t<n&&(n=t),s>r&&(r=s)}));var l={showlegend:!0,legend:{orientation:"h",font:{family:"sans-serif",size:8,color:"#000"}},xaxis:{title:{text:"K"}},yaxis:{title:{text:"MSE"}},shapes:[{type:"line",x0:t.k,y0:n,x1:t.k,y1:r,line:{color:"rgb(55, 128, 191)",width:1}},{type:"line",x0:s.k,y0:n,x1:s.k,y1:r,line:{color:"rgb(55, 128, 191)",width:1}}]};P().newPlot("knn_table_"+a,i,l)}async correlationHeatmap(e,t,s,a){for(var i=[{z:t,x:s,y:s,type:"heatmap",hoverongaps:!1,colorscale:"YlGnBu",showscale:!1}],n={responsive:!0,annotations:[],xaxis:{ticks:"",side:"top"},yaxis:{ticks:"",ticksuffix:" ",width:700,height:700,autosize:!1}},r=0;r<s.length;r++)for(var l=0;l<s.length;l++){var o=t[r][l];let e;e="black";var c={xref:"x1",yref:"y1",x:s[r],y:s[l],text:o.toFixed(2),font:{family:"Arial",size:8,color:e},showarrow:!1};n.annotations.push(c)}await P().newPlot(e,i,n)}PFIBoxplot(e,t,s){let a=[];t.forEach(((e,t)=>{a.push({x:Array.from(e),type:"box",name:s[t],marker:{color:"#43a047"}})}));var i={autosize:!0,title:"Permutation Feature Importance",xaxis:{linecolor:"black",linewidth:1,mirror:!0,title:{text:"Imporetance"}},yaxis:{linecolor:"black",linewidth:1,mirror:!0}};P().newPlot("pfi_boxplot_"+e,a,i,{responsive:!0})}plotPDP(e,t,s,a,i){let n=[];t.forEach(((e,t)=>{n.push({x:s,y:Array.from(e),mode:"line",name:a[t],marker:{color:this.indexToColor(t)}})}));var r={autosize:!0,title:"Partial Dependence Plot",xaxis:{linecolor:"black",linewidth:1,mirror:!0,title:{text:i}},yaxis:{linecolor:"black",linewidth:1,mirror:!0,title:{text:"Feature"}}};P().newPlot("pdp_plot_"+e,n,r,{responsive:!0})}plotROC(e,t,s,a){let i=[];t.forEach(((e,t)=>{i.push({x:e,y:s[t],mode:"line",name:a[t],marker:{color:this.indexToColor(t)}})}));var n={autosize:!0,xaxis:{linecolor:"black",linewidth:1,mirror:!0,title:{text:"false positive rate"}},yaxis:{linecolor:"black",linewidth:1,mirror:!0,title:{text:"true positive rate"}}};P().newPlot("roc_plot_"+e,i,n,{responsive:!0})}}class ee{constructor(e,t){this.data_parser=e,this.chart_controller=t}get_model_settings(){let e={},t=parseInt(document.getElementById("model_name").value);const s=document.getElementById("target").value;let a=document.getElementById(s).value!==A.Numerical;var i;if(a){for(const n in E.classification)if(E.classification[n].value===t){t=n,e.name=E.classification[n].label,i=E.classification[t];break}}else for(const n in E.regression)if(E.regression[n].value===t){t=n,e.name=E.regression[n].label,i=E.regression[t];break}t=parseInt(document.getElementById("model_name").value);for(const n in i?.options)if("select"===i.options[n].type){let s=document.getElementById(n+"_"+t)?.value;e[n]=s??i.options[n].default}else if("number"===i.options[n].type){let s=document.getElementById(n+"_"+t)?.value;e[n]=s?parseFloat(s):i.options[n].default}else{let s=document.getElementById(n+"_"+t)?.value;e[n]=s??i.options[n].default}return e}scale_data(e,t,s){switch(s){case"1":{let s=new y.MinMaxScaler;s.fit(e[t]),e.addColumn(t,s.transform(e[t]),{inplace:!0});break}case"2":e.addColumn(t,e[t].apply((e=>e*e)),{inplace:!0});break;case"3":e.addColumn(t,e[t].apply((e=>Math.log(e))),{inplace:!0});break;case"4":{let s=new y.StandardScaler;s.fit(e[t]),e.addColumn(t,s.transform(e[t]),{inplace:!0});break}default:break}}createAlgorithmsSelect(e){let t='<div id="algorithm" class="column is-9"><div class="select is-small mb-1"> <select id="model_name" class="select">';const s=1==e?"regression":"classification";for(const a in E[s])if(E.hasOwnProperty.call(E[s],a)){const e=E[s][a];t+=`<option value="${e.value}">${e.label}</option>`}return t+="</select></div></div>",t}updateAlgorithmsSelect(e){let t='<div class="select is-small mb-1"> <select id="model_name" class="select">';const s=1==e?"regression":"classification";for(const a in E[s])if(E.hasOwnProperty.call(E[s],a)){const e=E[s][a];t+=`<option value="${e.value}">${e.label}</option>`}return t+="</select></div>",t}find_selected_columns(e,t=!1){const s=[];return e.forEach((e=>{let a=R(e);(document.getElementById(a+"-checkbox").checked||t)&&s.push(e)})),s}find_selected_columns_types(e,t=!0){if(!1===t){const t=document.getElementById("target").value;e=e.filter((e=>e!==t))}const s=[];return e.forEach((e=>{let t=R(e);s.push({name:e,type:document.getElementById(t).value})})),s}createTargetDropdown(e){let t='<div  class="column is-12"><div class="label is-size-7">Target</div><div class="select is-fullwidth is-small mb-1"> <select id="target">';return e.columns.forEach((e=>{let s=R(e);t+=`<option value="${s}">${s}</option>`})),t+="</select></div></div>",t}createFeaturesDropdown(e){let t='<div  class="column is-4"><h4>Target</h4><div class="select mb-1"> <select class="select" id="kde_feature">';for(const s in e)t+=`<option value="${s}">${s}</option>`;return t+="</select></div></div>",t}insertSpaces(e){return e=e.replace(/([a-z])([A-Z])/g,"$1 $2"),e=e.replace(/([A-Z])([A-Z][a-z])/g,"$1 $2"),e}renderDatasetStats(e,t,s){let a=[],i=[];const n=[{field:"name",label:"#"},{field:"min",label:"Min"},{field:"max",label:"Max"},{field:"median",label:"Median"},{field:"std",label:"std"},{field:"missingVlauesCount",label:"# NAs"}],r=[{field:"name",label:"#"},{field:"shape",label:"Shape"},{field:"mode",label:"Mode"},{field:"percentage",label:"Percentage"},{field:"missingVlauesCount",label:"# NAs"}];for(let l=0;l<t.length;l++){const s=t[l];a.push({name:s,min:e.column(s).min(),max:e.column(s).max(),median:e.column(s).median().toFixed(2),mean:e.column(s).mean().toFixed(2),std:e.column(s).std().toFixed(2),missingVlauesCount:e.column(s).isNa().sum()})}return s.forEach(((t,s)=>{const a=[...new Set(e.column(t).values)],n=this.getCategoricalMode(e.column(t).values);i.push({name:t,shape:a.length,mode:n["mode"],percentage:(n[n["mode"]]/n["total"]).toFixed(2),missingVlauesCount:e.column(t).isNa().sum()})})),[n,a,r,i]}getCategoricalMode(e){if(0===e.length)return null;const t={total:0,mode:""};for(let i=0;i<e.length;i++){const s=e[i];null!==s&&void 0!==s&&(t["total"]++,s in t?t[s]++:t[s]=1)}let s=null,a=0;for(const i in t)"total"!==i&&t[i]>a&&(s=i,a=t[i]);return t["mode"]=s,t}get_numeric_columns(e,t){let s=this.find_selected_columns(e.columns,!t),a=this.find_selected_columns_types(s);s=s.filter((e=>{let t=a.findIndex((t=>t.name===e));return a[t]?.type===A.Numerical}));let i=[];return e.columns.forEach((t=>{"string"!==e.column(t).dtype&&"Id"!==t&&s.includes(t)&&i.push(t)})),i}get_categorical_columns(e,t){let s=this.find_selected_columns(e.columns,!t),a=this.find_selected_columns_types(s);s=s.filter((e=>{let t=a.findIndex((t=>t.name===e));return-1!==t&&a[t]?.type!==A.Numerical}));let i=[];return e.columns.forEach((e=>{"Id"!==e&&s.includes(e)&&i.push(e)})),i}column_types(e){let t=this.find_selected_columns(e,!1);return this.find_selected_columns_types(t)}async visualize(e,t,s){this.renderDatasetStats(e);let a=this.get_numeric_columns(e,!0),i=this.get_categorical_columns(e,!0);const n=document.getElementById("target").value;let r=[...new Set(a.concat(i))];const l=e.loc({columns:r});l.dropNa({axis:1,inplace:!0}),a=a.filter((e=>e!==n));let o=document.getElementById(n).value!==A.Numerical,c=0;if(a.length>0&&c<10&&(document.getElementById("container").innerHTML="",a.forEach((e=>{e!==n&&this.chart_controller.draw_kde(l,e,n,"nrd",o)})),c++),c=0,i.length>0&&c<10&&(document.getElementById("categories_barplots").innerHTML="",i.forEach((e=>{e!==n&&this.chart_controller.draw_categorical_barplot(l.loc({columns:[e]}).values,n,e)})),c++),o){let t=e.column(n).values,a=[...new Set(t)],i=[];for(let e=0;e<a.length;e++)i.push(t.filter((t=>t===a[e])).length);this.chart_controller.classification_target_chart(i,a,s,"target_chart",n)}else this.chart_controller.regression_target_chart(e.column(n).values,"target_chart",n);a=this.get_numeric_columns(e,!0),i=this.get_categorical_columns(e,!0),e=this.data_parser.handle_missing_values(e)}toggle_loading_progress(e=!1){let t=document.getElementById("progress");t.style.display=e?"none":"block"}init_tooltips(e){e("#kde_help",{interactive:!0,popperOptions:{positionFixed:!0},content:"Default bandwidth method :Silverman’s rule of thumb"}),e("#normalization_help",{interactive:!0,popperOptions:{positionFixed:!0},content:"<p>not functional yet</p><p>standard scaler uses z = (x - u) / s</p><p>Transform features by scaling each feature to a given range</p>",allowHTML:!0}),e("#imputation_help",{interactive:!0,popperOptions:{positionFixed:!0},content:"currently we are just deleting rows with missing values",allowHTML:!0}),e("#cv_help",{interactive:!0,popperOptions:{positionFixed:!0},content:"option 1 and 2 are working",allowHTML:!0})}predictions_table_regression(e,t,s,a){let i=[];e.addColumn("y",t,{inplace:!0}),e.addColumn("predictions: ",s,{inplace:!0}),e.columns.forEach((e=>{i.push({title:e})})),new DataTable("#predictions_table_"+a,{pageLength:10,responsive:!1,paging:!0,columnDefs:[{render:function(e,t,s){return e.toFixed(2)},targets:"_all"}],bPaginate:!0,columns:i,data:e.values,bDestroy:!0})}removeTable(e){$(e).DataTable().destroy()}predictions_table(e,t,s,a=null,i=0){let n=[];null!==a&&e.addColumn("probs",a,{inplace:!0}),e.addColumn("y",t,{inplace:!0}),e.addColumn("predictions: ",s,{inplace:!0}),e.columns.forEach((e=>{n.push({title:e})})),new DataTable("#predictions_table_"+i,{pageLength:10,responsive:!1,paging:!0,bPaginate:!0,columns:n,data:e.values,bDestroy:!0,columnDefs:[{render:function(e,t,s){for(let a=0;a<e.length;a++)e[a]=e[a].toFixed(2);return e},targets:[-3]},{render:function(e,t,s){return e.toFixed(2)},targets:[...Array(n.length-3).keys()]}],rowCallback:function(e,t,s){var a=t[n.length-1],i=t[n.length-2];a!==i&&$(e).addClass("is-danger")}})}yhat_plot(e,t,s,a=""){P().newPlot(s,[{x:e,y:t,type:"scatter",name:"y",mode:"markers",marker:{color:"black",size:2}},{x:e,y:e,mode:"lines",type:"scatter",line:{color:"red",dash:"dash"},name:"y = x line"}],{title:{text:a,font:{family:"sans-serif",size:10},xref:"paper",x:.05},showlegend:!1,xaxis:{linecolor:"black",linewidth:1,mirror:!0,title:{text:"y",font:{family:"sans-serif",size:14,color:"#7f7f7f"}}},yaxis:{linecolor:"black",linewidth:1,mirror:!0,title:{text:"predictions",font:{family:"sans-serif",size:14,color:"#7f7f7f"}}},margin:{l:40,r:10,b:40,t:20,pad:0}},{responsive:!0,staticPlot:!1})}residual_plot(e,t,s,a=""){P().newPlot(s,[{x:e,y:t,type:"scatter",name:"y",mode:"markers",marker:{color:"black",size:2}}],{title:{text:a,font:{family:"sans-serif",size:10},xref:"paper",x:.05},showlegend:!1,xaxis:{linecolor:"black",linewidth:1,mirror:!0,title:{text:"y",font:{family:"sans-serif",size:14,color:"#7f7f7f"}}},yaxis:{linecolor:"black",linewidth:1,mirror:!0,title:{text:"residuals",font:{family:"sans-serif",size:14,color:"#7f7f7f"}}},margin:{l:40,r:10,b:40,t:20,pad:0}},{responsive:!0})}}class te{constructor(){this.chartController=new Z,this.ui=new ee(null,null),this.task=null,this.predictions=[],this.plots=[],this.tables=[],this.id=null}async train(e,t,s,a){throw new Error("Not implemented",e,t,s,a)}async evaluateModel(e,t,s){return await X(e,t,s)}async visualize(e,t,s,a,i){const n=W(a,t,i),r=i.inverseTransform(Object.values(i.$labels));await this.chartController.plotConfusionMatrix(y.tensorflow.tensor(a),y.tensorflow.tensor(t),r,Object.values(i.$labels),this.id),await this.chartController.classificationPCA(e.values,i.inverseTransform(t),n,s,this.id),this.ui.predictions_table(e,i.inverseTransform(t),i.inverseTransform(a),null,this.id),this.plots.push("pca_results_"+this.id),this.tables.push("#predictions_table_"+this.id)}}class se extends te{constructor(e){super(),this.options=e,this.model=null,this.summary=null,this.model_stats_matrix=null}async train(e,t,s,a,i,n){this.context={X_train:e,y_train:t,y_test:a,X_test:s,regularization_type:"Lasso"===this.options.regularization.value?1:0,labels:i};const r=window.webr;await r.init(),await r.installPackages(["jsonlite","ggplot2","plotly","nnet","tidyr","dplyr","ggrepel","glmnet","modelsummary"],{quiet:!0}),await r.objs.globalEnv.bind("xx",e),await r.objs.globalEnv.bind("x_test",s),await r.objs.globalEnv.bind("y",t),await r.objs.globalEnv.bind("names",i),await r.objs.globalEnv.bind("categorical_columns",0===n?.length?["empty"]:n),await r.objs.globalEnv.bind("is_lasso",this.context.regularization_type);const l=await r.evalR('\n                    library(plotly)\n                    library(ggplot2)\n                    library(tidyr)\n                    library(dplyr)\n                    library(ggrepel)\n                    library(modelsummary)\n                    library(glmnet)\n\n                    # Select all columns except the first as predictors. \n                    x <- as.matrix(xx)  \n                    colnames(x) <- names\n                    scale_df <- as.data.frame(x)\n                    y <- as.factor(y)\n                    cols_to_scale <- setdiff(names, categorical_columns)\n                    scale_df[cols_to_scale] <- scale(scale_df[cols_to_scale])\n                    if(is_lasso){\n                        cvfit = cv.glmnet(as.matrix(scale_df), y, alpha = 1, family = "multinomial", type.multinomial = "ungrouped")\n                    }else{\n                       cvfit = cv.glmnet(as.matrix(scale_df), y, alpha = 0, family = "multinomial", type.multinomial = "ungrouped")\n                    }\n                    betas = as.matrix(cvfit$glmnet.fit$beta)\n                    lambdas = cvfit$lambda\n                    names(lambdas) = colnames(betas)\n                    \n                    \n                    p <- as.data.frame(betas) %>% \n                      tibble::rownames_to_column("variable") %>% \n                      pivot_longer(-variable) %>% \n                      mutate(lambda=lambdas[name]) %>% \n                    ggplot(aes(x=lambda,y=value,col=variable)) + \n                      geom_line() + \n                      geom_label_repel(data=~subset(.x,lambda==min(lambda)),\n                                       aes(label=variable),nudge_x=-0.5) +\n                      geom_vline(xintercept=c(cvfit$lambda.1se,cvfit$lambda.min),\n                                linetype="dashed")+\n                    scale_color_discrete(name = "variable") +  \n                      scale_x_log10()\n                    \n                    df = with(cvfit,\n                            data.frame(lambda = lambdas,MSE = cvm,MSEhi=cvup,MSElow=cvlo))\n\n            \n                    p2 <-ggplot(df,aes(x=lambda,y=MSE)) + \n                    geom_point(col="#f05454") + \n                    scale_x_log10("lambda") + \n                    geom_errorbar(aes(ymin = MSElow,ymax=MSEhi),col="#30475e") + \n                    geom_vline(xintercept=c(cvfit$lambda.1se,cvfit$lambda.min),\n                                linetype="dashed")+\n                    theme_bw()\n\n \n                    list(plotly_json(p, pretty = FALSE))\n                    ');let o=await l.toArray();this.summary={params:await o[2].toArray(),bse:await o[4].toArray(),pvalues:await o[3].toArray(),predictions:await o[5].toArray(),predictions1se:await o[21].toArray(),predictionsmin:await o[22].toArray(),residuals_ols:await o[18].toArray(),residuals_1se:await o[19].toArray(),residuals_min:await o[20].toArray(),aic:await o[6].toNumber(),bic:await o[7].toNumber(),r2:await o[8].toNumber(),best_fit_min:{r2:await o[25].toNumber(),aic:await o[26].toNumber(),names:await o[16].toArray(),coefs:await o[9].toArray(),bse:await o[11].toArray(),pvalues:await o[10].toArray()},best_fit_1se:{r2:await o[23].toNumber(),aic:await o[24].toNumber(),names:await o[17].toArray(),coefs:await o[12].toArray(),bse:await o[14].toArray(),pvalues:await o[13].toArray()}},this.model_stats_matrix=[];let c=[...i];c.unshift("intercept");let m=this.summary["best_fit_min"].names;m.unshift("intercept");let d=this.summary["best_fit_1se"].names;d.unshift("intercept");for(let h=0;h<c.length;h++){let e=[];e.push(c[h]),e.push(this.summary["params"][h]?.toFixed(2)??" "),e.push(this.summary["bse"][h]?.toFixed(2)??" "),e.push(this.summary["pvalues"][h]?.toFixed(2)??" ");let t=m.findIndex((e=>e===c[h]));-1!==t?(e.push(this.summary["best_fit_min"]["coefs"][t]?.toFixed(2)??" "),e.push(this.summary["best_fit_min"]["bse"][t]?.toFixed(2)??" "),e.push(this.summary["best_fit_min"]["pvalues"][t]?.toFixed(2)??" ")):(e.push(" "),e.push(" "),e.push(" ")),t=d.findIndex((e=>e===c[h])),-1!==t?(e.push(this.summary["best_fit_1se"]["coefs"][t]?.toFixed(2)??" "),e.push(this.summary["best_fit_1se"]["bse"][t]?.toFixed(2)??" "),e.push(this.summary["best_fit_1se"]["pvalues"][t]?.toFixed(2)??" ")):(e.push(" "),e.push(" "),e.push(" ")),this.model_stats_matrix.push(e)}this.model_stats_matrix.reverse();let u=JSON.parse(await o[0].toString());u.layout.legend["orientation"]="h",u.layout["showlegend"]=!1;let p=JSON.parse(await o[15].toString());return p.layout.legend={x:0,y:1,traceorder:"normal",font:{family:"sans-serif",size:8,color:"#000"}},this.summary.coefs_plot=p,this.summary.regularization_plot=u,this.summary.regularization_plot.layout["autosize"]=!0,this.summary.regularization_plot.layout["staticPlot"]=!0,this.summary.regularization_plot.layout["responsive"]=!0,this.summary.errors_plot=JSON.parse(await o[1].toString()),this.summary.qqplot_ols_plot=JSON.parse(await o[27].toString()),this.summary.qqplot_1se_plot=JSON.parse(await o[28].toString()),this.summary.qqplot_min_plot=JSON.parse(await o[29].toString()),this.summary["predictions"]}async visualize(e,t,s,a,i){let n=this;return new Promise((s=>{setTimeout((()=>{new DataTable("#metrics_table_"+n.id,{responsive:!1,footerCallback:function(e,t,s,a,i){var r=this.api();$(r.column(2).footer()).html("R2 : "+n.summary.r2.toFixed(2)+" AIC: "+n.summary.aic.toFixed(2)),$(r.column(5).footer()).html("R2 : "+n.summary["best_fit_min"].r2.toFixed(2)+" AIC: "+n.summary["best_fit_min"].aic.toFixed(2)),$(r.column(8).footer()).html("R2 : "+n.summary["best_fit_1se"].r2.toFixed(2)+" AIC: "+n.summary["best_fit_1se"].aic.toFixed(2))},data:n.model_stats_matrix,info:!1,search:!1,ordering:!1,searching:!1,paging:!1,bDestroy:!0}),P().newPlot("parameters_plot_"+n.id,n.summary.coefs_plot,{staticPlot:!1}),P().newPlot("regularization_"+n.id,n.summary.regularization_plot,{staticPlot:!0}),P().newPlot("errors_"+n.id,n.summary.errors_plot,{staticPlot:!0}),P().newPlot("qqplot_ols_"+n.id,n.summary.qqplot_ols_plot,{staticPlot:!0}),P().newPlot("qqplot_min_"+n.id,n.summary.qqplot_min_plot,{staticPlot:!0}),P().newPlot("qqplot_1se_"+n.id,n.summary.qqplot_1se_plot,{staticPlot:!0}),n.ui.yhat_plot(t,this.summary["predictions"],"regression_y_yhat_"+ +n.id,"OLS predictions"),n.ui.yhat_plot(t,this.summary["predictionsmin"],"regression_y_yhat_min_"+ +n.id,"OLS min predictions"),n.ui.yhat_plot(t,this.summary["predictions1se"],"regression_y_yhat_1se_"+ +n.id,"OLS 1se predictions"),n.ui.residual_plot(t,this.summary["residuals_ols"],"regression_residual_"+ +n.id,"OLS residuals"),n.ui.residual_plot(t,this.summary["residuals_min"],"regression_residual_min_"+ +n.id,"OLS min residuals"),n.ui.residual_plot(t,this.summary["residuals_1se"],"regression_residual_1se_"+ +n.id,"OLS 1se residuals"),this.ui.predictions_table_regression(e,t,a,this.id),s("resolved")}),1e3)}))}}class ae{constructor(){this.chartController=new Z,this.ui=new ee(null,null),this.task=null,this.predictions=[],this.id=null,this.plots=[],this.tables=[]}async train(e,t,s,a){throw new Error("Not implemented",e,t,s,a)}async evaluateModel(e,t){return[B(e,t),D(e,t)]}async visualize(e,t,s,a){let i=this;return new Promise((s=>{setTimeout((()=>{let n=t,r=[];a.forEach(((e,t)=>{r.push(n[t]-e)})),i.ui.yhat_plot(n,a,"regression_y_yhat_"+i.id,"OLS predictions"),i.ui.residual_plot(a,r,"errors_"+i.id,"Residuals"),this.ui.predictions_table_regression(e,t,a,this.id),this.plots.push("regression_y_yhat_"+i.id),this.plots.push("errors_"+i.id),this.tables.push("#predictions_table_"+this.id),s("resolved")}),500)}))}}class ie extends ae{constructor(e){super(),this.options=e,this.model=null,this.summary=null,this.model_stats_matrix=null}async train(e,t,s,a,i,n){this.context={X_train:e,y_train:t,y_test:a,X_test:s,regularization_type:"Lasso"===this.options.regularization.value?1:0,labels:i};const r=window.webr;await r.init(),await r.installPackages(["jsonlite","iml","ggplot2","plotly","tidyr","dplyr","ggrepel","glmnet","modelsummary"],{quiet:!0}),await r.objs.globalEnv.bind("xx",e),await r.objs.globalEnv.bind("x_test",s),await r.objs.globalEnv.bind("y",t),await r.objs.globalEnv.bind("names",i),await r.objs.globalEnv.bind("categorical_columns",0===n?.length?["empty"]:n),await r.objs.globalEnv.bind("is_lasso",this.context.regularization_type);const l=await r.evalR('\n                    library(plotly)\n                    library(ggplot2)\n                    library(tidyr)\n                    library(iml)\n                    library(dplyr)\n                    library(ggrepel)\n                    library(modelsummary)\n                    library(glmnet)\n\n                    # Select all columns except the first as predictors. \n                    x <- as.matrix(xx)  \n                    colnames(x) <- names\n                    scale_df <- as.data.frame(x)\n\n                    cols_to_scale <- setdiff(names, categorical_columns)\n                    scale_df[cols_to_scale] <- scale(scale_df[cols_to_scale])\n                    scaled_y <- scale(y)\n                    base_model = cv.glmnet(as.matrix(scale_df), scaled_y)\n                    weights <- 1 / abs(coef(base_model)[-1])\n                    if(is_lasso){\n                        cvfit = cv.glmnet(as.matrix(scale_df), scaled_y, alpha = 1,penalty.factor = weights)\n                    }else{\n                       cvfit = cv.glmnet(as.matrix(scale_df), scaled_y, alpha = 0)\n                    }\n                    betas = as.matrix(cvfit$glmnet.fit$beta)\n                    lambdas = cvfit$lambda\n                    names(lambdas) = colnames(betas)\n                    \n                    \n                    p <- as.data.frame(betas) %>% \n                      tibble::rownames_to_column("variable") %>% \n                      pivot_longer(-variable) %>% \n                      mutate(lambda=lambdas[name]) %>% \n                    ggplot(aes(x=lambda,y=value,col=variable)) + \n                      geom_line() + \n                      geom_label_repel(data=~subset(.x,lambda==min(lambda)),\n                                       aes(label=variable),nudge_x=-0.5) +\n                      geom_vline(xintercept=c(cvfit$lambda.1se,cvfit$lambda.min),\n                                linetype="dashed")+\n                      scale_x_log10()+ labs(y = "Coefficients") + theme_bw()\n                    df = with(cvfit,\n                            data.frame(lambda = lambdas,MSE = cvm,MSEhi=cvup,MSElow=cvlo))\n\n                    p2<-ggplot(df,aes(x=lambda,y=MSE)) + \n                    geom_point(col="#f05454") + \n                    scale_x_log10("lambda") + \n                    geom_errorbar(aes(ymin = MSElow,ymax=MSEhi),col="#30475e") + \n                    geom_vline(xintercept=c(cvfit$lambda.1se,cvfit$lambda.min),\n                                linetype="dashed")+\n                    theme_bw()\n\n \n                    model <- lm(y ~ ., data = as.data.frame(x))\n                    x <- as.matrix(x_test)  \n                    colnames(x) <- names\n                    predictions <- predict(model, newdata = as.data.frame(x))\n                    # Get coefficients, p-values, and standard errors\n                    coefs <- coef(model)\n                    pvals <- summary(model)$coefficients[,4]\n                    std_error <- summary(model)$coefficients[,2]\n                    aic_value <- AIC(model)\n                    bic_value <- BIC(model)\n                    rsquared <- summary(model)$r.squared\n                    residuals_ols <- resid(model)\n                    fitted_values_ols <- fitted(model)\n\n\n                    best_lambda <- cvfit$lambda.min\n                    x <- as.matrix(xx) \n                    colnames(x) <- names\n                    # Get the coefficients for the best lambda\n                    best_model <- glmnet(x, y, alpha =is_lasso, lambda = best_lambda)\n                    coefficients <- as.matrix(coef(best_model))\n                    nonzero_coef <- coefficients[coefficients != 0]\n                    nonzero_features <- rownames(coefficients)[coefficients != 0 & rownames(coefficients) != "(Intercept)"]\n\n                    X_reduced <- x[, nonzero_features]\n                    linear_model_min_features <- nonzero_features\n\n                    # Fit a linear regression model using the non-zero features\n                    linear_model_min <- lm(y ~ ., data = as.data.frame(X_reduced))\n                    coefs_min <- coef(linear_model_min)\n                    pvals_min <- summary(linear_model_min)$coefficients[,4]\n                    std_error_min <- summary(linear_model_min)$coefficients[,2]\n                    aic_min <- AIC(linear_model_min)\n                    rsquared_min <- summary(linear_model_min)$r.squared\n                    best_lambda <- cvfit$lambda.1se\n                    best_model <- glmnet(x, y, alpha =is_lasso, lambda = best_lambda)\n                    coefficients <- as.matrix(coef(best_model))\n                    residuals_min <- resid(linear_model_min)\n                    fitted_values_min <- fitted(linear_model_min)\n\n\n                    x <- as.matrix(x_test)  \n                    colnames(x) <- names\n                    x <- x[, nonzero_features]\n                    predictions_min <- predict(linear_model_min, newdata = as.data.frame(x))\n                    x <- as.matrix(xx)  \n                    colnames(x) <- names\n                    nonzero_coef <- coefficients[coefficients != 0]\n                    \n                    nonzero_features <- rownames(coefficients)[coefficients != 0 & rownames(coefficients) != "(Intercept)"]\n                    X_reduced <- x[, nonzero_features]\n                    linear_model_1se_features <- nonzero_features\n                    linear_model_1se <- lm(y ~ ., data = as.data.frame(X_reduced))\n                    coefs_1se <- coef(linear_model_1se)\n                    print(coefs_1se)\n                    pvals_1se <- summary(linear_model_1se)$coefficients[,4]\n                    aic_1se<- AIC(linear_model_1se)\n                    rsquared_1se <- summary(linear_model_1se)$r.squared\n                    std_error_1se <- summary(linear_model_1se)$coefficients[,2]\n                    residuals_1se <- resid(linear_model_1se)\n                    fitted_values_1se <- fitted(linear_model_1se)\n                    x <- as.matrix(x_test)  \n                    colnames(x) <- names\n                    x <- x[, nonzero_features]\n                    predictions_1se <- predict(linear_model_1se, newdata = as.data.frame(x))\n\n\n                    models <- list(\n                        "OLS" = model,\n                        "Min OLS" = linear_model_min,\n                        "1se OLS" = linear_model_1se\n                        )\n                    z <- modelplot(models =models,coef_omit = \'Interc\')\n                    qqplot_ols <-ggplot(data.frame(residuals = residuals_ols), aes(sample = residuals_ols)) +\n                        stat_qq() +\n                        stat_qq_line(col = "red") +\n                        labs(title = "QQ Plot of Residuals",\n                            x = "Theoretical Quantiles",\n                            y = "Sample Quantiles") +\n                        theme_bw()\n                    qqplot_1se <-ggplot(data.frame(residuals = residuals_1se), aes(sample = residuals_1se)) +\n                        stat_qq() +\n                        stat_qq_line(col = "red") +\n                        labs(title = "QQ Plot of Residuals",\n                            x = "Theoretical Quantiles",\n                            y = "Sample Quantiles") +\n                        theme_bw()\n                    qqplot_min <-ggplot(data.frame(residuals = residuals_min), aes(sample = residuals_min)) +\n                        stat_qq() +\n                        stat_qq_line(col = "red") +\n                        labs(title = "QQ Plot of Residuals",\n                            x = "Theoretical Quantiles",\n                            y = "Sample Quantiles") +\n                        theme_bw()\n                        \n\n\n\n                    list(plotly_json(p, pretty = FALSE),plotly_json(p2, pretty = FALSE),coefs,\n                    pvals,std_error,predictions,aic_value,bic_value,rsquared\n                    ,coefs_min,pvals_min,std_error_min\n                    ,coefs_1se,pvals_1se,std_error_1se,plotly_json(z, pretty = FALSE),linear_model_min_features,linear_model_1se_features\n                    ,residuals_ols,residuals_1se,residuals_min,predictions_1se,predictions_min,rsquared_1se,aic_1se,rsquared_min,aic_min\n                    ,plotly_json(qqplot_ols, pretty = FALSE)\n                    ,plotly_json(qqplot_1se, pretty = FALSE)\n                    ,plotly_json(qqplot_min, pretty = FALSE)\n                    \n                    )\n                    ');let o=await l.toArray();this.summary={params:await o[2].toArray(),bse:await o[4].toArray(),pvalues:await o[3].toArray(),predictions:await o[5].toArray(),predictions1se:await o[21].toArray(),predictionsmin:await o[22].toArray(),residuals_ols:await o[18].toArray(),residuals_1se:await o[19].toArray(),residuals_min:await o[20].toArray(),aic:await o[6].toNumber(),bic:await o[7].toNumber(),r2:await o[8].toNumber(),best_fit_min:{r2:await o[25].toNumber(),aic:await o[26].toNumber(),names:await o[16].toArray(),coefs:await o[9].toArray(),bse:await o[11].toArray(),pvalues:await o[10].toArray()},best_fit_1se:{r2:await o[23].toNumber(),aic:await o[24].toNumber(),names:await o[17].toArray(),coefs:await o[12].toArray(),bse:await o[14].toArray(),pvalues:await o[13].toArray()}},this.model_stats_matrix=[];let c=[...i];c.unshift("intercept");let m=this.summary["best_fit_min"].names;m.unshift("intercept");let d=this.summary["best_fit_1se"].names;d.unshift("intercept");for(let h=0;h<c.length;h++){let e=[];e.push(c[h]),e.push(this.summary["params"][h]?.toFixed(2)??" "),e.push(this.summary["bse"][h]?.toFixed(2)??" "),e.push(this.summary["pvalues"][h]?.toFixed(2)??" ");let t=m.findIndex((e=>e===c[h]));-1!==t?(e.push(this.summary["best_fit_min"]["coefs"][t]?.toFixed(2)??" "),e.push(this.summary["best_fit_min"]["bse"][t]?.toFixed(2)??" "),e.push(this.summary["best_fit_min"]["pvalues"][t]?.toFixed(2)??" ")):(e.push(" "),e.push(" "),e.push(" ")),t=d.findIndex((e=>e===c[h])),-1!==t?(e.push(this.summary["best_fit_1se"]["coefs"][t]?.toFixed(2)??" "),e.push(this.summary["best_fit_1se"]["bse"][t]?.toFixed(2)??" "),e.push(this.summary["best_fit_1se"]["pvalues"][t]?.toFixed(2)??" ")):(e.push(" "),e.push(" "),e.push(" ")),this.model_stats_matrix.push(e)}this.model_stats_matrix.reverse();let u=JSON.parse(await o[0].toString());u.layout["showlegend"]=!1,u.layout.legend={font:{family:"sans-serif",size:8,color:"#000"}};let p=JSON.parse(await o[15].toString());return p.layout.legend={x:0,y:1,traceorder:"normal",font:{family:"sans-serif",size:8,color:"#000"}},this.summary.coefs_plot=p,this.summary.coefs_plot.layout.xaxis.title.font={size:10},this.summary.regularization_plot=u,this.summary.errors_plot=JSON.parse(await o[1].toString()),this.summary.qqplot_ols_plot=JSON.parse(await o[27].toString()),this.summary.qqplot_1se_plot=JSON.parse(await o[28].toString()),this.summary.qqplot_min_plot=JSON.parse(await o[29].toString()),this.summary.qqplot_ols_plot.layout.title.font={family:"sans-serif",size:10},this.summary.qqplot_ols_plot.data[0].marker.size=2,this.summary.qqplot_ols_plot.layout.xaxis.title.font={family:"sans-serif",size:10},this.summary.qqplot_ols_plot.layout.yaxis.title.font={family:"sans-serif",size:10},this.summary.qqplot_1se_plot.layout.title.font={family:"sans-serif",size:10},this.summary.qqplot_1se_plot.data[0].marker.size=2,this.summary.qqplot_1se_plot.layout.xaxis.title.font={family:"sans-serif",size:10},this.summary.qqplot_1se_plot.layout.yaxis.title.font={family:"sans-serif",size:10},this.summary.qqplot_min_plot.layout.title.font={family:"sans-serif",size:10},this.summary.qqplot_min_plot.layout.xaxis.title.font={family:"sans-serif",size:10},this.summary.qqplot_min_plot.layout.yaxis.title.font={family:"sans-serif",size:10},this.summary.qqplot_min_plot.data[0].marker.size=2,this.summary["predictions"]}async visualize(e,t,s,a,i){await super.visualize(e,t,s,a);let n=this;new DataTable("#metrics_table_"+n.id,{responsive:!1,footerCallback:function(e,t,s,a,i){var r=this.api();$(r.column(2).footer()).html("R2 : "+n.summary.r2.toFixed(2)+" AIC: "+n.summary.aic.toFixed(2)),$(r.column(5).footer()).html("R2 : "+n.summary["best_fit_min"].r2.toFixed(2)+" AIC: "+n.summary["best_fit_min"].aic.toFixed(2)),$(r.column(8).footer()).html("R2 : "+n.summary["best_fit_1se"].r2.toFixed(2)+" AIC: "+n.summary["best_fit_1se"].aic.toFixed(2))},data:n.model_stats_matrix,info:!1,search:!1,ordering:!1,searching:!1,paging:!1,bDestroy:!0,columnDefs:[{targets:3,createdCell:function(e,t,s,a,i){s[3]<=.05&&$(e).css("color","red")}},{targets:6,createdCell:function(e,t,s,a,i){s[6]<=.05&&$(e).css("color","red")}},{targets:9,createdCell:function(e,t,s,a,i){s[9]<=.05&&$(e).css("color","red")}}]}),await P().newPlot("parameters_plot_"+n.id,n.summary.coefs_plot,{autosize:!0}),await P().newPlot("regularization_"+n.id,n.summary.regularization_plot,{autosize:!0}),await P().newPlot("errors_"+n.id,n.summary.errors_plot,{autosize:!0}),await P().newPlot("qqplot_ols_"+n.id,n.summary.qqplot_ols_plot,{autosize:!0}),await P().newPlot("qqplot_min_"+n.id,n.summary.qqplot_min_plot,{autosize:!0}),await P().newPlot("qqplot_1se_"+n.id,n.summary.qqplot_1se_plot,{autosize:!0}),n.ui.yhat_plot(t,this.summary["predictions"],"regression_y_yhat_"+n.id,"OLS predictions"),n.ui.yhat_plot(t,this.summary["predictionsmin"],"regression_y_yhat_min_"+n.id,"OLS min predictions"),n.ui.yhat_plot(t,this.summary["predictions1se"],"regression_y_yhat_1se_"+n.id,"OLS 1se predictions"),n.ui.residual_plot(t,this.summary["residuals_ols"],"regression_residual_"+n.id,"OLS residuals"),n.ui.residual_plot(t,this.summary["residuals_min"],"regression_residual_min_"+n.id,"OLS min residuals"),n.ui.residual_plot(t,this.summary["residuals_1se"],"regression_residual_1se_"+n.id,"OLS 1se residuals"),this.ui.predictions_table_regression(e,t,a,this.id),window.dispatchEvent(new Event("resize"))}}class ne extends ae{constructor(e){super(),this.options=e,this.model=null}async train(e,t,s,a,i){this.context={X_train:e,y_train:t,X_test:s,y_test:a,knots:+this.options.knots.value,degree:+this.options.degree.value,labels:i};const n='\n        import numpy as np\n        from patsy import dmatrix\n        import statsmodels.formula.api as smf\n        import statsmodels.api as sm\n        from sklearn.preprocessing import SplineTransformer\n        import pandas as pd\n        from sklearn import linear_model\n        from sklearn.metrics import mean_squared_error\n        from sklearn.pipeline import make_pipeline\n        from js import X_train,y_train,X_test,knots,degree,labels,y_test\n        from sklearn.inspection import partial_dependence\n        from sklearn.inspection import permutation_importance\n\n\n        model = make_pipeline(\n            SplineTransformer(n_knots=knots, degree=degree), \n            linear_model.LinearRegression()\n            )\n        model.fit(X_train, y_train)\n        pred_train = model.predict(X_train)\n        rmse_train = mean_squared_error(y_train, pred_train, squared=True)\n        # Test data\n        pred_test = model.predict(X_test)\n\n        pdp_results = partial_dependence(model, X_train, [0])\n        fi = permutation_importance(model,X_test,y_test)\n            \n        pred_test,pdp_results["average"],list(pdp_results["grid_values"][0]), list(fi.importances)\n        ';try{const{results:e,error:t}=await L(n,this.context);if(e)return this.predictions=Array.from(e[0]),this.pdp_averages=Array.from(e[1]),this.pdp_grid=Array.from(e[2]),this.importances=Array.from(e[3]),Array.from(e[0]);t&&console.log("pyodideWorker error: ",t)}catch(r){console.log(`Error in pyodideWorker at ${r.filename}, Line: ${r.lineno}, ${r.message}`)}}async visualize(e,t,s,a,i,n){await super.visualize(e,t,s,a,i),this.chartController.PFIBoxplot(this.id,this.importances,n),this.chartController.plotPDP(this.id,this.pdp_averages,this.pdp_grid,s,n[0])}}const re={C_SVC:"0",NU_SVC:"1",ONE_CLASS:"2",EPSILON_SVR:"3",NU_SVR:"4"},le={LINEAR:"0",POLYNOMIAL:"1",RBF:"2",SIGMOID:"3",PRECOMPUTED:"4"};class oe extends te{constructor(e){super();le[e.kernel.value.toUpperCase()],re.C_SVC,e.bias.value,e.gamma.value,e.degree.value}async train(e,t,s,a){this.context={X_train:e,y_train:t,X_test:s,y_test:a};const i='\n        from sklearn import svm\n        from js import X_train,y_train,X_test,y_test\n        from sklearn.inspection import partial_dependence\n        from sklearn.inspection import permutation_importance\n\n        model = svm.SVC(kernel="linear")\n        model.fit(X_train, y_train)\n        y_pred = model.predict(X_test)\n\n        pdp_results = partial_dependence(model, X_train, [0])\n        fi = permutation_importance(model,X_test,y_test)\n        y_pred,pdp_results["average"],list(pdp_results["grid_values"][0]), list(fi.importances)\n    ';try{const{results:e,error:t}=await L(i,this.context);if(e)return this.predictions=Array.from(e[0]),this.pdp_averages=Array.from(e[1]),this.pdp_grid=Array.from(e[2]),this.importances=Array.from(e[3]),Array.from(e[0]);t&&console.log("pyodideWorker error: ",t)}catch(n){console.log(`Error in pyodideWorker at ${n.filename}, Line: ${n.lineno}, ${n.message}`)}}async visualize(e,t,s,a,i,n){await super.visualize(e,t,s,a,i),this.chartController.PFIBoxplot(this.id,this.importances,n),this.chartController.plotPDP(this.id,this.pdp_averages,this.pdp_grid,s,n[0])}}const ce={C_SVC:"0",NU_SVC:"1",ONE_CLASS:"2",EPSILON_SVR:"3",NU_SVR:"4"},me={LINEAR:"0",POLYNOMIAL:"1",RBF:"2",SIGMOID:"3",PRECOMPUTED:"4"};class de extends ae{constructor(e){super();me[e.kernel.value.toUpperCase()],ce.C_SVC,e.bias.value,e.gamma.value,e.degree.value}async train(e,t,s,a){this.context={X_train:e,y_train:t,X_test:s,y_test:a};const i='\n        from sklearn import svm\n        from js import X_train,y_train,X_test,y_test\n        from sklearn.inspection import partial_dependence\n        from sklearn.inspection import permutation_importance\n\n        model = svm.SVR(kernel="linear")\n        model.fit(X_train, y_train)\n        y_pred = model.predict(X_test)\n\n        pdp_results = partial_dependence(model, X_train, [0])\n        fi = permutation_importance(model,X_test,y_test)\n        y_pred,pdp_results["average"],list(pdp_results["grid_values"][0]), list(fi.importances)\n    ';try{const{results:e,error:t}=await L(i,this.context);if(e)return this.predictions=Array.from(e[0]),this.pdp_averages=Array.from(e[1]),this.pdp_grid=Array.from(e[2]),this.importances=Array.from(e[3]),Array.from(e[0]);t&&console.log("pyodideWorker error: ",t)}catch(n){console.log(`Error in pyodideWorker at ${n.filename}, Line: ${n.lineno}, ${n.message}`)}}async visualize(e,t,s,a,i,n){await super.visualize(e,t,s,a,i),this.chartController.PFIBoxplot(this.id,this.importances,n),this.chartController.plotPDP(this.id,this.pdp_averages,this.pdp_grid,s,n[0])}}var ue=s(14862);class pe extends te{constructor(e){super(),this.options=e,this.model=null}async fit(e,t,s,a=3){this.model=new ue.KNeighborsClassifier({nNeighbors:a,metric:s}),await this.model.fit(e,t)}predict(e){if(null===this.model||void 0===this.model)throw"model not found.";var t=window.tf.tidy((()=>{let t=this.model.predict(e);return Array.from(t.dataSync())}));return t}async train(e,t,s,a){this.results=[];let i=new y.LabelEncoder;i.fit(t);let n=i.transform(t),r=i.transform(a),l=["manhattan","euclidean"];for(let o=0;o<l.length;o++){const t=l[o];for(let a=this.options.min.value;a<=this.options.max.value;a++){await this.fit(e,n,t,a);let l=this.predict(s),o=this.predict(e),c=this.predict_probas(s),m=W(l,r,i),d=W(o,n,i);this.results.push({k:a,predictions:l,evaluation:m,evaluation_train:d,probas:c,metric:t})}}return this.optimalTestSpec=this.results[0],this.optimalTrainSpec=this.results[0],this.results.forEach((e=>{e.evaluation.accuracy>this.optimalTestSpec.evaluation.accuracy&&(this.optimalTestSpec=e),e.evaluation_train.accuracy>this.optimalTrainSpec.evaluation_train.accuracy&&(this.optimalTrainSpec=e)})),this.optimalTestSpec.predictions}predict_probas(e){if(null===this.model||void 0===this.model)throw"model not found.";var t=window.tf.tidy((()=>{let t=this.model.predictProba(e);return Array.from(t.arraySync())}));return t}async visualize(e,t,s,a,i){await super.visualize(e,t,s,a,i),this.chartController.KNNPerformancePlot(this.results,this.optimalTrainSpec,this.optimalTestSpec,this.id),this.plots.push("knn_table_"+this.id)}}class he extends ae{constructor(e){super(),this.options=e,this.model=null}async fit(e,t,s,a=3){this.model=new ue.KNeighborsRegressor({nNeighbors:a,metric:s}),await this.model.fit(e,t)}async train(e,t,s,a){return this.results=[],new Promise(((i,n)=>{try{setTimeout((async()=>{try{let n=["manhattan","euclidean"];for(let i=0;i<n.length;i++){const r=n[i];for(let i=this.options.min.value;i<=this.options.max.value;i++){await this.fit(e,t,r,i);let n=this.predict(s),l=this.predict(e),o=B(n,a),c=B(l,t);this.results.push({k:i,predictions:n,evaluation:o,evaluation_train:c,metric:r})}}this.optimalTestSpec=this.results[0],this.optimalTrainSpec=this.results[0],this.results.forEach((e=>{e.evaluation>this.optimalTestSpec.evaluation&&(this.optimalTestSpec=e),e.evaluation_train>this.optimalTrainSpec.evaluation_train&&(this.optimalTrainSpec=e)})),i(this.optimalTestSpec.predictions)}catch(r){console.log(this.options),n(r)}}),500)}catch(r){n(r)}}))}async visualize(e,t,s,a){await super.visualize(e,t,s,a),this.chartController.KNNPerformancePlotRegression(this.results,this.optimalTrainSpec,this.optimalTestSpec,this.id)}predict(e){if(null===this.model||void 0===this.model)throw"model not found.";var t=window.tf.tidy((()=>{let t=this.model.predict(e);return Array.from(t.dataSync())}));return t}}class fe extends te{constructor(e,t){super(t),this.options=e,this.model=null,this.predictions=[]}async train(e,t,s,a){this.context={X_train:e,y_train:t,X_test:s,y_test:a,rf_type:this.options.criteria.value,max_features:this.options.features.value,num_estimators:this.options.estimators.value<=0||!this.options.estimators.value?100:+this.options.estimators.value,max_depth:this.options.depth.value<=0?5:+this.options.depth.value};const i='\n            from sklearn.model_selection import train_test_split\n            from sklearn.ensemble import RandomForestClassifier\n            from sklearn.metrics import accuracy_score\n            from sklearn.inspection import partial_dependence\n            from sklearn.inspection import permutation_importance\n            from js import X_train,y_train,X_test,y_test,rf_type,max_features,num_estimators,max_depth\n\n            classifier = RandomForestClassifier(criterion=rf_type,max_features = max_features,n_estimators=num_estimators,max_depth = max_depth, random_state=42)\n            classifier.fit(X_train, y_train)\n            y_pred = classifier.predict(X_test)\n\n            pdp_results = partial_dependence(classifier, X_train, [0])\n            fi = permutation_importance(classifier,X_test,y_test)\n            \n            y_pred,pdp_results["average"],list(pdp_results["grid_values"][0]), list(fi.importances)\n        ';try{const{results:e,error:t}=await L(i,this.context);e?(this.predictions=Array.from(e[0]),this.pdp_averages=Array.from(e[1]),this.pdp_grid=Array.from(e[2]),this.importances=Array.from(e[3])):t&&console.log("pyodideWorker error: ",t)}catch(n){console.log(`Error in pyodideWorker at ${n.filename}, Line: ${n.lineno}, ${n.message}`)}return this.predictions}async visualize(e,t,s,a,i,n){await super.visualize(e,t,s,a,i),this.chartController.PFIBoxplot(this.id,this.importances,n),this.chartController.plotPDP(this.id,this.pdp_averages,this.pdp_grid,s,n[0])}predict(){return this.predictions}}class _e extends ae{constructor(e){super(),this.options=e,this.model=null}async train(e,t,s,a){this.context={X_train:e,y_train:t,X_test:s,y_test:a,rf_type:this.options.criteria.value,max_features:this.options.features.value,num_estimators:this.options.estimators.value<=0||!this.options.estimators.value?100:+this.options.estimators.value,max_depth:this.options.depth.value<=0?5:+this.options.depth.value};const i='\n            from sklearn.model_selection import train_test_split\n            from sklearn.ensemble import RandomForestRegressor\n            from sklearn.metrics import accuracy_score\n            from js import X_train,y_train,X_test,y_test,rf_type,max_features,num_estimators,max_depth\n            from sklearn.inspection import partial_dependence\n            from sklearn.inspection import permutation_importance\n\n            model = RandomForestRegressor(criterion=rf_type,max_features = max_features,n_estimators=num_estimators,max_depth = max_depth, random_state=42)\n            model.fit(X_train, y_train)\n            y_pred = model.predict(X_test)\n\n            pdp_results = partial_dependence(model, X_train, [0])\n            fi = permutation_importance(model,X_test,y_test)\n            \n            y_pred,pdp_results["average"],list(pdp_results["grid_values"][0]), list(fi.importances)\n            \n        ';try{const{results:e,error:t}=await L(i,this.context);if(e)return this.predictions=Array.from(e[0]),this.pdp_averages=Array.from(e[1]),this.pdp_grid=Array.from(e[2]),this.importances=Array.from(e[3]),Array.from(e[0]);t&&console.log("pyodideWorker error: ",t)}catch(n){console.log(`Error in pyodideWorker at ${n.filename}, Line: ${n.lineno}, ${n.message}`)}}predict(e){const t=this.model.predict(e);return t}async visualize(e,t,s,a,i,n){await super.visualize(e,t,s,a,i),this.chartController.PFIBoxplot(this.id,this.importances,n),this.chartController.plotPDP(this.id,this.pdp_averages,this.pdp_grid,s,n[0])}}class ye extends te{constructor(e){super(),this.options=e,this.model=null}async train(e,t,s,a){this.context={nb_type:"Multinomial"===this.options.type.value?0:"Gaussian"===this.options.type.value?1:2,priors:this.options.priors.value,smoothing:+this.options.laplace.value,num_classes:[...new Set(t)].length,X_train:e,y_train:t,y_test:a,X_test:s};const i='\n            from sklearn.naive_bayes import BernoulliNB\n            from sklearn.naive_bayes import MultinomialNB\n            from js import X_train,y_train,X_test,nb_type,priors,smoothing,y_test,num_classes\n            from sklearn.naive_bayes import GaussianNB\n            from sklearn.inspection import partial_dependence\n            from sklearn.inspection import permutation_importance\n            from sklearn.metrics import roc_auc_score\n            from sklearn.metrics import roc_curve\n            from sklearn.preprocessing import LabelBinarizer\n            if priors is not None and priors.strip():\n                priors = [float(x) for x in priors.split(\',\')]\n            else:\n                priors = None\n            print("priors",priors)\n            if nb_type == 0:\n                model = MultinomialNB(class_prior=priors , alpha = smoothing)\n            if nb_type == 1:\n                model = GaussianNB(priors=priors)\n            else:\n                model = BernoulliNB(class_prior=priors , alpha = smoothing)\n            model.fit(X_train, y_train)\n            y_pred = model.predict(X_test)\n            probas = model.predict_proba(X_test)\n            pdp_results = partial_dependence(model, X_train, [0])\n            fi = permutation_importance(model,X_test,y_test)\n            tprs=[]\n            fprs=[]\n\n            label_binrize = LabelBinarizer().fit(y_train)\n            y_test_one_hot = label_binrize.transform(y_test)\n            \n            try:\n                curve = roc_curve(y_test,probas)\n            except:\n                for i in range(num_classes):\n                    fpr,tpr,_ = roc_curve(y_test_one_hot[:,i],probas[:,i])\n                    fprs.append(fpr)\n                    tprs.append(tpr)\n            y_pred,pdp_results["average"],list(pdp_results["grid_values"][0]), list(fi.importances),fprs,tprs\n        ';try{const{results:e,error:t}=await L(i,this.context);e?(console.log("pyodideWorker return results: ",e),this.predictions=Array.from(e[0]),this.pdp_averages=Array.from(e[1]),this.pdp_grid=Array.from(e[2]),this.importances=Array.from(e[3]),this.fpr=Array.from(e[4]),this.tpr=Array.from(e[5])):t&&console.log("pyodideWorker error: ",t)}catch(n){console.log(`Error in pyodideWorker at ${n.filename}, Line: ${n.lineno}, ${n.message}`)}return this.predictions}async visualize(e,t,s,a,i,n){await super.visualize(e,t,s,a,i),this.chartController.PFIBoxplot(this.id,this.importances,n),this.chartController.plotPDP(this.id,this.pdp_averages,this.pdp_grid,s,n[0]),this.chartController.plotROC(this.id,this.fpr,this.tpr,s)}}class ge extends te{constructor(e){super(),this.options=e,this.context={X_train:[.8,.4,1.2,3.7,2.6,5.8],y_train:[.8,.4,1.2,3.7,2.6,5.8],X_test:[.8,.4,1.2,3.7,2.6,5.8]}}async train(e,t,s,a){this.context={lda_type:this.options.type.value,priors:this.options.priors.value,X_train:e,y_train:t,X_test:s,y_test:a};const i='\n        from sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis\n        from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n        from js import X_train,y_train,X_test,lda_type,priors,y_test\n        from sklearn.inspection import partial_dependence\n        from sklearn.inspection import permutation_importance\n\n\n        if priors is not None and priors.strip():\n            priors = [float(x) for x in priors.split(\',\')]\n        else:\n            priors = None\n        print("priors",priors)\n        if lda_type == 0:\n            model = LinearDiscriminantAnalysis(priors=priors)\n        else:\n            model = QuadraticDiscriminantAnalysis(priors=priors)\n        model.fit(X_train, y_train)\n        y_pred = model.predict(X_test)\n        pdp_results = partial_dependence(model, X_train, [0])\n        fi = permutation_importance(model,X_test,y_test)\n        y_pred,pdp_results["average"],list(pdp_results["grid_values"][0]), list(fi.importances)\n    ';try{const{results:e,error:t}=await L(i,this.context);if(e)return this.predictions=Array.from(e[0]),this.pdp_averages=Array.from(e[1]),this.pdp_grid=Array.from(e[2]),this.importances=Array.from(e[3]),Array.from(e[0]);t&&console.log("pyodideWorker error: ",t)}catch(n){console.log(`Error in pyodideWorker at ${n.filename}, Line: ${n.lineno}, ${n.message}`)}}async visualize(e,t,s,a,i,n){await super.visualize(e,t,s,a,i),this.chartController.PFIBoxplot(this.id,this.importances,n),this.chartController.plotPDP(this.id,this.pdp_averages,this.pdp_grid,s,n[0])}}class be extends ae{constructor(e){super(),this.options=e,this.model=null,this.summary=null,this.model_stats_matrix=null}async train(e,t,s,a,i,n){let r="Lasso"===this.options?.regularization?.value?1:0,l=+this.options?.degree?.value;const o=window.webr;await o.init(),await o.installPackages(["jsonlite","ggplot2","plotly","tidyr","dplyr","ggrepel","glmnet","modelsummary"],{quiet:!0}),await o.objs.globalEnv.bind("xx",e),await o.objs.globalEnv.bind("x_test",s),await o.objs.globalEnv.bind("y",t),await o.objs.globalEnv.bind("degree",l),await o.objs.globalEnv.bind("names",i),await o.objs.globalEnv.bind("categorical_columns",0===n?.length?["empty"]:n),await o.objs.globalEnv.bind("is_lasso",r);const c=await o.evalR('\n                    library(plotly)\n                    library(ggplot2)\n                    library(tidyr)\n                    library(dplyr)\n                    library(ggrepel)\n                    library(modelsummary)\n                    library(glmnet)\n\n                    # Select all columns except the first as predictors. \n                    add_powers <- function(df, degree,columns) {\n                            new_df <- df  # Copy the original data frame\n                            for (col in columns) {\n                                new_col_name <- paste0(col, "_", degree)\n                                new_df[[new_col_name]] <- df[[col]]^degree\n                            }\n                            return(new_df)\n                            }\n                        \n                    x <- as.matrix(xx)  \n                    colnames(x) <- names\n                    cols_numerical <- setdiff(names, categorical_columns)\n                    df_main <- add_powers(as.data.frame(x), degree,cols_numerical)\n                    scale_df <- add_powers(as.data.frame(x), degree,cols_numerical)\n                    all_column_names <- colnames(scale_df)\n                    cols_to_scale <- setdiff(all_column_names, categorical_columns)\n                    scale_df[cols_to_scale] <- scale(scale_df[cols_to_scale])\n                    \n                    x <- as.matrix(x_test)  \n                    colnames(x) <- names\n                    df_test <- add_powers(as.data.frame(x), degree,cols_numerical)\n                    base_model = cv.glmnet(as.matrix(scale_df), y)\n                    weights <- 1 / abs(coef(base_model)[-1])\n                    x <- as.matrix(df_main)\n                    if(is_lasso){\n                        cvfit = cv.glmnet(as.matrix(scale_df), y, alpha = 1)\n                    }else{\n                       cvfit = cv.glmnet(as.matrix(scale_df), y, alpha = 0)\n                    }\n                    betas = as.matrix(cvfit$glmnet.fit$beta)\n                    lambdas = cvfit$lambda\n                    names(lambdas) = colnames(betas)\n                    \n                    \n                    p <- as.data.frame(betas) %>% \n                      tibble::rownames_to_column("variable") %>% \n                      pivot_longer(-variable) %>% \n                      mutate(lambda=lambdas[name]) %>% \n                    ggplot(aes(x=lambda,y=value,col=variable)) + \n                      geom_line() + \n                      geom_label_repel(data=~subset(.x,lambda==min(lambda)),\n                                       aes(label=variable),nudge_x=-0.5) +\n                      geom_vline(xintercept=c(cvfit$lambda.1se,cvfit$lambda.min),\n                                linetype="dashed")+\n                      scale_x_log10() +\n                      labs(y = "Coefficient") +\n                    theme_bw()\n                    \n                    df = with(cvfit,\n                            data.frame(lambda = lambdas,MSE = cvm,MSEhi=cvup,MSElow=cvlo))\n\n                    p2<-ggplot(df,aes(x=lambda,y=MSE)) + \n                    geom_point(col="#f05454") + \n                    scale_x_log10("lambda") + \n                    geom_errorbar(aes(ymin = MSElow,ymax=MSEhi),col="#30475e") + \n                    geom_vline(xintercept=c(cvfit$lambda.1se,cvfit$lambda.min),\n                                linetype="dashed")+\n                    theme_bw()\n\n \n                    model <- lm(y ~ ., data = as.data.frame(x))\n                    x <- as.matrix(df_test)  \n                    predictions <- predict(model, newdata = as.data.frame(x))\n                    # Get coefficients, p-values, and standard errors\n                    coefs <- coef(model)\n                    pvals <- summary(model)$coefficients[,4]\n                    std_error <- summary(model)$coefficients[,2]\n                    aic_value <- AIC(model)\n                    bic_value <- BIC(model)\n                    rsquared <- summary(model)$r.squared\n                    residuals_ols <- resid(model)\n                    fitted_values_ols <- fitted(model)\n\n\n                    best_lambda <- cvfit$lambda.min\n                    x <- as.matrix(df_main) \n                    # Get the coefficients for the best lambda\n                    best_model <- glmnet(x, y, alpha =is_lasso, lambda = best_lambda)\n                    coefficients <- as.matrix(coef(best_model))\n                    \n                    nonzero_coef <- coefficients[coefficients != 0]\n                    \n                    nonzero_features <- rownames(coefficients)[coefficients != 0 & rownames(coefficients) != "(Intercept)"]\n                    X_reduced <- x[, nonzero_features]\n                    linear_model_min_features <- nonzero_features\n                    # Fit a linear regression model using the non-zero features\n                    linear_model_min <- lm(y ~ ., data = as.data.frame(X_reduced))\n                    coefs_min <- coef(linear_model_min)\n                    pvals_min <- summary(linear_model_min)$coefficients[,4]\n                    std_error_min <- summary(linear_model_min)$coefficients[,2]\n                    aic_min <- AIC(linear_model_min)\n                    rsquared_min <- summary(linear_model_min)$r.squared\n                    best_lambda <- cvfit$lambda.1se\n                    best_model <- glmnet(x, y, alpha =is_lasso, lambda = best_lambda)\n                    coefficients <- as.matrix(coef(best_model))\n                    residuals_min <- resid(linear_model_min)\n                    fitted_values_min <- fitted(linear_model_min)\n                    x <- as.matrix(df_test)  \n                    x <- x[, nonzero_features]\n                    predictions_min <- predict(linear_model_min, newdata = as.data.frame(x))\n                    x <- as.matrix(df_main)  \n                    nonzero_coef <- coefficients[coefficients != 0]\n                    \n                    nonzero_features <- rownames(coefficients)[coefficients != 0 & rownames(coefficients) != "(Intercept)"]\n                    X_reduced <- x[, nonzero_features]\n                    linear_model_1se_features <- nonzero_features\n                    linear_model_1se <- lm(y ~ ., data = as.data.frame(X_reduced))\n                    coefs_1se <- coef(linear_model_1se)\n                    print(coefs_1se)\n                    pvals_1se <- summary(linear_model_1se)$coefficients[,4]\n                    aic_1se<- AIC(linear_model_1se)\n                    rsquared_1se <- summary(linear_model_1se)$r.squared\n                    std_error_1se <- summary(linear_model_1se)$coefficients[,2]\n                    residuals_1se <- resid(linear_model_1se)\n                    fitted_values_1se <- fitted(linear_model_1se)\n                    x <- as.matrix(df_test)  \n                    x <- x[, nonzero_features]\n                    predictions_1se <- predict(linear_model_1se, newdata = as.data.frame(x))\n                    models <- list(\n                        "OLS" = model,\n                        "Min OLS" = linear_model_min,\n                        "1se OLS" = linear_model_1se\n                        )\n                    z <- modelplot(models =models,coef_omit = \'Interc\')\n                    qqplot_ols <-ggplot(data.frame(residuals = residuals_ols), aes(sample = residuals_ols)) +\n                        stat_qq() +\n                        stat_qq_line(col = "red") +\n                        labs(title = "QQ Plot of Residuals",\n                            x = "Theoretical Quantiles",\n                            y = "Sample Quantiles") +\n                        theme_bw()\n                    qqplot_1se <-ggplot(data.frame(residuals = residuals_1se), aes(sample = residuals_1se)) +\n                        stat_qq() +\n                        stat_qq_line(col = "red") +\n                        labs(title = "QQ Plot of Residuals",\n                            x = "Theoretical Quantiles",\n                            y = "Sample Quantiles") +\n                        theme_bw()\n                    qqplot_min <-ggplot(data.frame(residuals = residuals_min), aes(sample = residuals_min)) +\n                        stat_qq() +\n                        stat_qq_line(col = "red") +\n                        labs(title = "QQ Plot of Residuals",\n                            x = "Theoretical Quantiles",\n                            y = "Sample Quantiles") +\n                        theme_bw()\n                    list(plotly_json(p, pretty = FALSE),plotly_json(p2, pretty = FALSE),coefs,\n                    pvals,std_error,predictions,aic_value,bic_value,rsquared\n                    ,coefs_min,pvals_min,std_error_min\n                    ,coefs_1se,pvals_1se,std_error_1se,plotly_json(z, pretty = FALSE),linear_model_min_features,linear_model_1se_features\n                    ,residuals_ols,residuals_1se,residuals_min,predictions_1se,predictions_min,rsquared_1se,aic_1se,rsquared_min,aic_min\n                    ,plotly_json(qqplot_ols, pretty = FALSE)\n                    ,plotly_json(qqplot_1se, pretty = FALSE)\n                    ,plotly_json(qqplot_min, pretty = FALSE)\n                    ,all_column_names\n                    )\n                    ');let m=await c.toArray();this.summary={params:await m[2].toArray(),bse:await m[4].toArray(),pvalues:await m[3].toArray(),predictions:await m[5].toArray(),predictions1se:await m[21].toArray(),predictionsmin:await m[22].toArray(),residuals_ols:await m[18].toArray(),residuals_1se:await m[19].toArray(),residuals_min:await m[20].toArray(),aic:await m[6].toNumber(),bic:await m[7].toNumber(),r2:await m[8].toNumber(),best_fit_min:{r2:await m[25].toNumber(),aic:await m[26].toNumber(),names:await m[16].toArray(),coefs:await m[9].toArray(),bse:await m[11].toArray(),pvalues:await m[10].toArray()},best_fit_1se:{r2:await m[23].toNumber(),aic:await m[24].toNumber(),names:await m[17].toArray(),coefs:await m[12].toArray(),bse:await m[14].toArray(),pvalues:await m[13].toArray()},columnNames:await m[30].toArray()},this.model_stats_matrix=[];let d=this.summary.columnNames;d.unshift("intercept");let u=this.summary["best_fit_min"].names;u.unshift("intercept");let p=this.summary["best_fit_1se"].names;p.unshift("intercept");for(let _=0;_<d.length;_++){let e=[];e.push(d[_]),e.push(this.summary["params"][_]?.toFixed(2)??" "),e.push(this.summary["bse"][_]?.toFixed(2)??" "),e.push(this.summary["pvalues"][_]?.toFixed(2)??" ");let t=u.findIndex((e=>e===d[_]));-1!==t?(e.push(this.summary["best_fit_min"]["coefs"][t]?.toFixed(2)??" "),e.push(this.summary["best_fit_min"]["bse"][t]?.toFixed(2)??" "),e.push(this.summary["best_fit_min"]["pvalues"][t]?.toFixed(2)??" ")):(e.push(" "),e.push(" "),e.push(" ")),t=p.findIndex((e=>e===d[_])),-1!==t?(e.push(this.summary["best_fit_1se"]["coefs"][t]?.toFixed(2)??" "),e.push(this.summary["best_fit_1se"]["bse"][t]?.toFixed(2)??" "),e.push(this.summary["best_fit_1se"]["pvalues"][t]?.toFixed(2)??" ")):(e.push(" "),e.push(" "),e.push(" ")),this.model_stats_matrix.push(e)}this.model_stats_matrix.reverse();let h=JSON.parse(await m[0].toString());h.layout["showlegend"]=!0,h.layout["autosize"]=!0,h.layout["responsive"]=!0,h.layout.legend={font:{family:"sans-serif",size:8,color:"#000"}};let f=JSON.parse(await m[15].toString());return f.layout.legend={x:0,y:1,traceorder:"normal",font:{family:"sans-serif",color:"#000"}},this.summary.coefs_plot=f,this.summary.coefs_plot.layout["autosize"]=!0,this.summary.coefs_plot.layout["responsive"]=!0,this.summary.coefs_plot.layout.xaxis.title.font={size:10},this.summary.regularization_plot=h,this.summary.errors_plot=JSON.parse(await m[1].toString()),this.summary.qqplot_ols_plot=JSON.parse(await m[27].toString()),this.summary.qqplot_1se_plot=JSON.parse(await m[28].toString()),this.summary.qqplot_min_plot=JSON.parse(await m[29].toString()),this.summary.qqplot_ols_plot.layout.title.font={family:"sans-serif",size:10},this.summary.qqplot_ols_plot.data[0].marker.size=2,this.summary.qqplot_ols_plot.layout.xaxis.title.font={family:"sans-serif",size:10},this.summary.qqplot_ols_plot.layout.yaxis.title.font={family:"sans-serif",size:10},this.summary.qqplot_1se_plot.layout.title.font={family:"sans-serif",size:10},this.summary.qqplot_1se_plot.data[0].marker.size=2,this.summary.qqplot_1se_plot.layout.xaxis.title.font={family:"sans-serif",size:10},this.summary.qqplot_1se_plot.layout.yaxis.title.font={family:"sans-serif",size:10},this.summary.qqplot_min_plot.layout.title.font={family:"sans-serif",size:10},this.summary.qqplot_min_plot.layout.xaxis.title.font={family:"sans-serif",size:10},this.summary.qqplot_min_plot.layout.yaxis.title.font={family:"sans-serif",size:10},this.summary.qqplot_min_plot.data[0].marker.size=2,this.summary["predictions"]}async visualize(e,t,s,a,i){await super.visualize(e,t,s,a);let n=this;new DataTable("#metrics_table_"+n.id,{responsive:!1,footerCallback:function(e,t,s,a,i){var r=this.api();$(r.column(2).footer()).html("R2 : "+n.summary.r2.toFixed(2)+" AIC: "+n.summary.aic.toFixed(2)),$(r.column(5).footer()).html("R2 : "+n.summary["best_fit_min"].r2.toFixed(2)+" AIC: "+n.summary["best_fit_min"].aic.toFixed(2)),$(r.column(8).footer()).html("R2 : "+n.summary["best_fit_1se"].r2.toFixed(2)+" AIC: "+n.summary["best_fit_1se"].aic.toFixed(2))},data:n.model_stats_matrix,info:!1,search:!1,ordering:!1,searching:!1,paging:!1,bDestroy:!0,columnDefs:[{targets:3,createdCell:function(e,t,s,a,i){s[3]<=.05&&$(e).css("color","red")}},{targets:6,createdCell:function(e,t,s,a,i){s[6]<=.05&&$(e).css("color","red")}},{targets:9,createdCell:function(e,t,s,a,i){s[9]<=.05&&$(e).css("color","red")}}]}),P().newPlot("regularization_"+n.id,n.summary.regularization_plot),P().newPlot("parameters_plot_"+n.id,n.summary.coefs_plot),P().newPlot("errors_"+n.id,n.summary.errors_plot),P().newPlot("qqplot_ols_"+n.id,n.summary.qqplot_ols_plot),P().newPlot("qqplot_min_"+n.id,n.summary.qqplot_min_plot),P().newPlot("qqplot_1se_"+n.id,n.summary.qqplot_1se_plot),n.ui.yhat_plot(t,this.summary["predictions"],"regression_y_yhat_"+ +n.id,"OLS predictions"),n.ui.yhat_plot(t,this.summary["predictionsmin"],"regression_y_yhat_min_"+ +n.id,"OLS min predictions"),n.ui.yhat_plot(t,this.summary["predictions1se"],"regression_y_yhat_1se_"+ +n.id,"OLS 1se predictions"),n.ui.residual_plot(t,this.summary["residuals_ols"],"regression_residual_"+ +n.id,"OLS residuals"),n.ui.residual_plot(t,this.summary["residuals_min"],"regression_residual_min_"+ +n.id,"OLS min residuals"),n.ui.residual_plot(t,this.summary["residuals_1se"],"regression_residual_1se_"+ +n.id,"OLS 1se residuals"),this.ui.predictions_table_regression(e,t,a,this.id),window.dispatchEvent(new Event("resize"))}}class ve{constructor(e){this.options=e,this.model=null}async train(e,t,s,a,i){this.context={X_train:e,y_train:t,X_test:s,types:this.options.types,labels:i};const n="\n        import numpy as np\n        import statsmodels.api as sm\n        from js import X_train,y_train,X_test,labels,types\n        from statsmodels.nonparametric.kernel_regression import KernelReg\n        import pandas as pd\n\n        df_test = pd.DataFrame(X_test,columns=labels)\n        x_test = df_test.iloc[:,:]\n\n        df_train = pd.DataFrame(X_train,columns=labels)\n        x_train = df_train.iloc[:,:]\n\n        model = KernelReg(endog=np.array(y_train), exog=x_train, var_type=types)\n        \n        preds = model.fit(x_test)\n\n        \n        preds\n        ";try{const{results:e,error:t}=await L(n,this.context);if(e)return e;t&&console.log("pyodideWorker error: ",t)}catch(r){console.log(`Error in pyodideWorker at ${r.filename}, Line: ${r.lineno}, ${r.message}`)}}predict(e){const t=this.model.predict(e);return t}}class xe extends te{constructor(e,t){super(t);let s={booster:e.booster.value??"gbtree",objective:"multi:softmax",max_depth:+e.depth.value,eta:+e.eta.value,estimators:e.estimators.value??200};this.options=s}async train(e,t,s,a){this.context={X_train:e,y_train:t,X_test:s,y_test:a,objective:this.options.objective,max_depth:this.options.max_depth,eta:this.options.eta,estimators:this.options.estimators};const i='\n\n        from js import X_train,y_train,X_test,y_test,objective,max_depth,eta,estimators\n        from sklearn.inspection import partial_dependence\n        from sklearn.inspection import permutation_importance\n        from sklearn.ensemble import GradientBoostingClassifier\n        import pandas as pd\n\n        model = GradientBoostingClassifier()\n        model.fit(X_train, y_train)\n        y_pred = model.predict(X_test)\n\n        pdp_results = partial_dependence(model, X_train, [0])\n        fi = permutation_importance(model,X_test,y_test)\n        y_pred,pdp_results["average"],list(pdp_results["grid_values"][0]), list(fi.importances)\n\n    ';try{const{results:e,error:t}=await L(i,this.context);if(e)return this.predictions=Array.from(e[0]),this.pdp_averages=Array.from(e[1]),this.pdp_grid=Array.from(e[2]),this.importances=Array.from(e[3]),Array.from(e[0]);t&&console.log("pyodideWorker error: ",t)}catch(n){console.log(`Error in pyodideWorker at ${n.filename}, Line: ${n.lineno}, ${n.message}`)}}async visualize(e,t,s,a,i,n){await super.visualize(e,t,s,a,i),this.chartController.PFIBoxplot(this.id,this.importances,n),this.chartController.plotPDP(this.id,this.pdp_averages,this.pdp_grid,s,n[0])}}class we extends ae{constructor(e,t){super(t);let s={booster:e.booster.value??"gbtree",objective:"multi:softmax",max_depth:+e.depth.value,eta:+e.eta.value,estimators:e.estimators.value??200};this.options=s}async train(e,t,s,a){this.context={X_train:e,y_train:t,X_test:s,y_test:a,objective:this.options.objective,max_depth:this.options.max_depth,eta:this.options.eta,estimators:this.options.estimators};const i='\n\n        from js import X_train,y_train,X_test,y_test,objective,max_depth,eta,estimators\n        from sklearn.inspection import partial_dependence\n        from sklearn.inspection import permutation_importance\n        from sklearn.ensemble import GradientBoostingRegressor\n        import pandas as pd\n\n        model = GradientBoostingRegressor()\n        model.fit(X_train, y_train)\n        y_pred = model.predict(X_test)\n\n        pdp_results = partial_dependence(model, X_train, [0])\n        fi = permutation_importance(model,X_test,y_test)\n        y_pred,pdp_results["average"],list(pdp_results["grid_values"][0]), list(fi.importances)\n\n    ';try{const{results:e,error:t}=await L(i,this.context);if(e)return this.predictions=Array.from(e[0]),this.pdp_averages=Array.from(e[1]),this.pdp_grid=Array.from(e[2]),this.importances=Array.from(e[3]),Array.from(e[0]);t&&console.log("pyodideWorker error: ",t)}catch(n){console.log(`Error in pyodideWorker at ${n.filename}, Line: ${n.lineno}, ${n.message}`)}}async visualize(e,t,s,a,i,n){await super.visualize(e,t,s,a,i),this.chartController.PFIBoxplot(this.id,this.importances,n),this.chartController.plotPDP(this.id,this.pdp_averages,this.pdp_grid,s,n[0])}}var ke=function(){this.createModel=(e,t)=>{switch(console.log(t),e){case E.classification.logistic_regression.value:return new se(t);case E.classification.k_nearest_neighbour.value:return new pe(t);case E.classification.random_forest.value:return new fe(t);case E.classification.support_vector_machine.value:return new oe(t);case E.classification.boosting.value:return new xe(t);case E.regression.boosting.value:return new we(t);case E.classification.discriminant_analysis.value:return new ge(t);case E.classification.naive_bayes.value:return new ye(t);case E.regression.linear_regression.value:return new ie(t);case E.regression.k_nearest_neighbour.value:return new he(t);case E.regression.support_vector_machine.value:return new de(t);case E.regression.random_forest.value:return new _e(t);case E.regression.polynomial_regression.value:return new be(t);case E.regression.kernel_regression.value:return new ve(t);case E.regression.bspline_regression.value:return new ne(t);default:throw new Error("Model not supported.")}}},Ce=s(67822),Se=s(94373),Ae={name:"SidebarComponent",setup(){const e=b();return{settings:e}},components:{UploadComponent:S},props:{msg:String},data(){return{training:!1,tuneModel:!1,seed:1,dataframe:null,configureFeatures:!1,modelOptions:E.classification,imputationOption:1,modelOption:1,featureTypeOptions:A,crossValidationOption:1,columns:[],modelTarget:null,modelConfigurations:null,imputationOptions:[{id:1,label:"Delete rows"},{id:2,label:"Mean and Mode"},{id:3,label:"Linear regression"},{id:4,label:"random forest"}],crossValidationOptions:[{id:z.SPLIT,label:"70 % training - 30 % test"},{id:z.NO,label:"No"},{id:z.KFOLD,label:"k-fold"}],featureSettings:[],modelSettings:[],modelName:""}},methods:{updateFeatures(){this.configureFeatures=!1,this.$emit("updateFeatures",!0)},toggleTraining(){this.training=!this.training,this.$buefy.toast.open({duration:3e3,message:this.training?"started training "+this.modelName:"Successully fited "+this.modelName,type:this.training?"is-info":"is-success"})},getDefaultModelConfiguration(){for(const e in this.modelOptions){const t=this.modelOptions[e];if(t.id===this.modelOption){for(const e in t.options)t.options[e].value=t.options[e]?.default;this.modelConfigurations=t.options,this.modelName=t.label}}},configureModel(){this.tuneModel=!this.tuneModel,this.getDefaultModelConfiguration()},generateTargetDropdown(){this.dataframe=this.settings.getDataset,this.columns=this.dataframe.columns,this.featureSettings=this.columns.map(((e,t)=>({name:e,selected:!0,type:"string"===this.dataframe.dtypes[t]?A.Nominal.id:A.Numerical.id}))),this.modelTarget=this.dataframe.columns[this.dataframe.columns.length-1];let e=this.featureSettings.filter((e=>e.selected));for(let t=0;t<e.length;t++)this.settings.addFeature(e[t]);this.$emit("updateFeatures",!0)},checkmodelTask(){let e=this.featureSettings.find((e=>e.name==this.modelTarget));this.settings.setmodelTask(e.type!==A.Numerical.id),this.modelOptions=e.type===A.Numerical.id?E.regression:E.classification;let t=this.featureSettings.filter((e=>e.selected));for(let s=0;s<t.length;s++)this.settings.addFeature(t[s])},async train(){try{this.modelConfigurations||this.getDefaultModelConfiguration();let e=this.dataframe.$data.length,t=this.seed,s=[],a=await this.dataframe.sample(this.dataframe.$data.length,{seed:t}),i=this.settings.items.filter((e=>e.selected&&e.type===A.Numerical.id)).map((e=>e.name));const n=this.settings.modelTarget;a=Q(a),a=G(a,i,this.settings.transformationsList);let r=this.settings.items.filter((e=>e.selected)).map((e=>e.name));const l=r.findIndex((e=>e===n));-1===l&&r.push(n);let o=a.loc({columns:r});const c=o.column(n);o.drop({columns:n,inplace:!0});const m=this.crossValidationOption;[o,s]=H(o,this.settings.items.filter((e=>e.selected)).filter((e=>e.name!==this.settings.modelTarget)).map((e=>({name:e.name,type:e.type}))),this.modelName);let d,u,p,[h,f,_,y]=this.splitData(m,o,c,e),g=[...new Set(f.values)];this.settings.classificationTask?[d,u,p]=this.encodeTarget(f.values,y.values):(u=f.values,p=y.values);let b=new ke,v=b.createModel(this.modelOption,this.modelConfigurations);v.id=this.settings.getCounter,this.toggleTraining();let x=await v.train(h.values,u,_.values,p,h.columns,s),w=await v.evaluateModel(p,x,g);console.log(this.modelConfigurations),this.settings.addResult({id:v.id,name:this.modelName,datasetName:this.settings.getDatasetName,modelTask:this.settings.classificationTask,metrics:w,options:this.modelConfigurations,target:n,categoricalFeatures:this.settings.items.filter((e=>e.selected&&e.type!==A.Numerical.id)).map((e=>e.name)),numericColumns:i,transformations:[...this.settings.transformationsList],tables:v.tables,plots:v.plots}),this.settings.setActiveTab(2),setTimeout((async()=>{this.settings.setResultActiveTab(v.id),window.dispatchEvent(new Event("resize"))}),500),await v.visualize(_,p,g,x,d,r),this.settings.increaseCounter(),this.toggleTraining()}catch(e){throw this.training=!1,this.$buefy.toast.open({duration:3e3,message:"Failed to fit the model",type:"is-warning"}),e}},impute(){this.training=!0,Se.A.post("http://127.0.0.1:5000/missforest",{data:(0,Ce.toJSON)(this.dataframe),categoricalFeatures:this.settings.items.filter((e=>e.selected&&e.type!==A.Numerical.id)).map((e=>e.name))}).then((e=>{let t=new Ce.DataFrame(e.data);this.dataframe=t,this.settings.setDataframe(t),this.training=!1}))}},created:function(){let e,t,s,a;this.splitData=function(i,n,r,l){if(i===z.SPLIT){const i=Math.ceil(70*l/100),o=`0:${i}`,c=`${i}:${l}`;e=n.iloc({rows:[`0: ${i}`]}),t=r.iloc([o]),s=n.iloc({rows:[`${i}: ${l}`]}),a=r.iloc([c])}else i===z.NO&&(e=n,t=r,s=n,a=r);return[e,t,s,a]},this.encodeTarget=function(e,t){let s=new y.LabelEncoder;s.fit(e),s.transform(e);let a=s.transform(e),i=s.transform(t);return[s,a,i]}},watch:{modelTarget:function(e,t){if(e!==t&&e){this.settings.setTarget(e);let t=this.featureSettings.find((t=>t.name==e));this.settings.setmodelTask(t.type!==A.Numerical.id),this.modelOptions=t.type===A.Numerical.id?E.regression:E.classification}},modelOption:function(){this.modelConfigurations=null}}},ze=Ae,Fe=(0,k.A)(ze,r,l,!1,null,null,null),Ee=Fe.exports,Ne=function(){var e=this,t=e._self._c;return t("div",{staticClass:"column is-10"},[t("section",[t("b-tabs",{attrs:{type:"is-toggle",position:"is-centered",animated:!1},model:{value:e.settings.activeTab,callback:function(t){e.$set(e.settings,"activeTab",t)},expression:"settings.activeTab"}},[t("b-tab-item",{attrs:{label:"Data Anaysis"}},[this.settings.datasetShape?.count>0?t("section",[t("b-message",{attrs:{title:"Data summary",type:"is-info",closable:!1},model:{value:e.isActive,callback:function(t){e.isActive=t},expression:"isActive"}},[t("div",{staticClass:"columns is-multiline"},[t("div",{staticClass:"column is-12 has-text-left"},[t("p",{staticClass:"title is-6"},[e._v(" Data Shape : ("+e._s(this.settings.datasetShape.count)+","+e._s(this.settings.datasetShape.columns)+")")])]),t("div",{staticClass:"column is-6"},[t("h5",{staticClass:"title is-6 has-text-left"},[e._v("Continuous Features :")]),t("b-table",{staticClass:"is-size-7",attrs:{data:e.continuousFeaturesStats,columns:e.continuousFeaturesColumns,narrowed:!0}})],1),t("div",{staticClass:"column is-6"},[t("h5",{staticClass:"title is-6 has-text-left"},[e._v("Categorical Features :")]),t("b-table",{staticClass:"is-size-7",attrs:{data:e.categoricalFeaturesStats,columns:e.categoricalFeaturesColumns,narrowed:!0}})],1),t("div",{staticClass:"column is-6"},[t("h5",{staticClass:"title is-6 has-text-left"},[e._v("Sample Data :")]),t("b-table",{staticClass:"is-size-7",attrs:{data:e.sampleData,columns:e.datasetColumns,narrowed:!0}})],1)])]),t("section",[this.settings.df?t("scatterplot-matrix-component",{attrs:{dataframe:this.settings.df?.copy()}}):e._e()],1),t("section",[t("div",{staticClass:"column is-12"},[t("button",{staticClass:"button is-success",attrs:{disabled:e.loading},on:{click:e.correlationMatrix}},[e._v("Correlation Matrix")])]),t("b-message",[t("div",{staticClass:"columns is-multiline is-centered mb-2"},[t("div",{staticClass:"column is-5",staticStyle:{height:"400px"},attrs:{id:"correlation_matrix"}}),t("div",{staticClass:"column is-5"},[t("div",{staticClass:"colmun is-12",attrs:{id:"test"}},[t("img",{attrs:{src:e.img}})])])])])],1)],1):t("section",[t("b-message",{attrs:{type:"is-danger","has-icon":"","icon-pack":"fas"}},[e._v(" Upload a dataset or select a sample from sidebar. ")])],1)]),t("b-tab-item",{attrs:{label:"Dimensionality Reduction"}},[t("dmensionality-reduction-component",{attrs:{dataframe:this.settings.df,columns:e.selectedFeatures}})],1),t("b-tab-item",{attrs:{label:"Results Analysis"}},[t("results-component")],1),t("b-tab-item",{attrs:{label:"Details",disabled:""}},[e._v(" Nunc nec velit nec libero vestibulum eleifend. Curabitur pulvinar congue luctus. Nullam hendrerit iaculis augue vitae ornare. Maecenas vehicula pulvinar tellus, id sodales felis lobortis eget. ")])],1)],1)])},Pe=[],qe=function(){var e=this,t=e._self._c;return this.settings?.items.length>2?t("section",[t("b-message",{attrs:{title:"Principle Component Analysis",type:"is-info",closable:!1}},[t("b-field",[t("b-input",{attrs:{size:"is-small",type:"number",placeholder:"X axis component"},model:{value:e.pcaX,callback:function(t){e.pcaX=t},expression:"pcaX"}}),t("b-input",{attrs:{size:"is-small",type:"number",placeholder:"Y axis component"},model:{value:e.pcaY,callback:function(t){e.pcaY=t},expression:"pcaY"}}),t("p",{staticClass:"control"},[t("b-button",{attrs:{disabled:!e.pcaX||!e.pcaY,size:"is-small",type:"is-info",loading:e.findingPCA,label:"Find PCA"},on:{click:e.findPCA}})],1)],1),e.hasPCA?t("div",{staticClass:"columns"},[t("div",{staticClass:"column is-6"},[t("div",{staticStyle:{height:"300px"},attrs:{id:"pca-1"}})]),t("div",{staticClass:"column is-6"},[t("div",{staticStyle:{height:"300px"},attrs:{id:"scree_plot"}})])]):e._e()],1),t("b-message",{attrs:{title:"t-distributed stochastic neighbor embedding",type:"is-info",closable:!1}},[t("b-button",{attrs:{size:"is-small",type:"is-info",loading:e.findingTSNE,label:"find t-SNE"},on:{click:e.findTSNE}}),t("div",{staticClass:"column is-6",attrs:{id:"dimensionality_reduction_panel_tsne"}},[t("div",{attrs:{id:"tsne"}})])],1),t("b-message",{attrs:{title:"Auto Encoder",type:"is-info",closable:!1}},[t("b-field",[t("b-input",{attrs:{size:"is-small",type:"number",placeholder:"Hidden layer size"},model:{value:e.pcaX,callback:function(t){e.pcaX=t},expression:"pcaX"}}),t("p",{staticClass:"control"},[t("b-button",{attrs:{size:"is-small",type:"is-info",loading:e.findingPCA,label:"Find Auto Encoder"},on:{click:e.autoEncoder}})],1)],1),t("div",{staticClass:"column is-6",attrs:{id:"dimensionality_reduction_panel_tsne"}},[t("div",{attrs:{id:"autoencoder"}})])],1)],1):t("section",[t("b-message",{attrs:{type:"is-danger","has-icon":"","icon-pack":"fas"}},[e._v(" There is no data to show. ")])],1)},Te=[];let Oe=new Z;var $e={name:"dmensionality-reduction-component",setup(){const e=b();return{settings:e}},props:{msg:String,dataframe:Object,columns:[]},data(){return{pcaX:null,pcaY:null,findingPCA:!1,hasPCA:!1,findingTSNE:!1}},methods:{async findPCA(){this.findingPCA=!0,this.hasPCA=!0;let e=this.settings.items.filter((e=>e.selected&&1===e.type)).map((e=>e.name));console.log(e),await Oe.draw_pca(this.dataframe.loc({columns:e}).values,this.settings.isClassification?this.dataframe.loc({columns:[this.settings.modelTarget]}).values:[],this.dataframe.loc({columns:[this.settings.modelTarget]}).values,this.pcaX,this.pcaY),this.findingPCA=!1},async findTSNE(){this.findingTSNE=!0;let e=this.settings.items.filter((e=>e.selected&&1===e.type)).map((e=>e.name));await Oe.plot_tsne(this.dataframe.loc({columns:e}).values,this.settings.isClassification?this.dataframe.loc({columns:[this.settings.modelTarget]}).values:[],this.dataframe.loc({columns:[this.settings.modelTarget]}).values),this.findingTSNE=!1},async autoEncoder(){const e=y.tensorflow.sequential();let t=this.settings.items.filter((e=>e.type===A.Numerical.id)).map((e=>e.name)),s=this.settings.df.loc({columns:t}).values;const a=y.tensorflow.layers.dense({units:3,batchInputShape:[null,t.length],activation:"relu",kernelInitializer:"randomNormal",biasInitializer:"ones"}),i=y.tensorflow.layers.dense({units:t.length,activation:"relu"});e.add(a),e.add(i),await e.compile({optimizer:"sgd",loss:"meanSquaredError"}),console.log("compliled");const n=y.tensorflow.tensor2d(s);await e.fit(n,n,{epochs:5,batchSize:15,shuffle:!0,validationSpit:.1});n.dispose();const r=y.tensorflow.tidy((()=>{const e=y.tensorflow.sequential();e.add(a);let t=y.tensorflow.tensor2d(s),i=e.predict(t);return t.dispose(),i.arraySync()}));let l=r;console.log(await l)}}},Le=$e,Ie=(0,k.A)(Le,qe,Te,!1,null,"4d098d3a",null),Me=Ie.exports,Re=function(){var e=this,t=e._self._c;return this.settings.results?.length>0?t("div",[t("b-tabs",{model:{value:e.settings.resultActiveTab,callback:function(t){e.$set(e.settings,"resultActiveTab",t)},expression:"settings.resultActiveTab"}},e._l(this.settings.results,(function(s){return t("b-tab-item",{key:s.id,ref:"resultContents",refInFor:!0,attrs:{label:s.id+"."+s.name.toString()}},[s.modelTask?t("classification-view-component",{attrs:{result:s},on:{"delete-result":e.deleteResult}}):t("regression-view-component",{attrs:{result:s},on:{"delete-result":e.deleteResult}}),t("div",{staticClass:"column is-12"},[t("div",{staticClass:"table-container"},[t("table",{staticClass:"table is-bordered is-hoverable is-narrow display is-size-7",attrs:{id:"predictions_table_"+s.id,width:"100%"}})])])],1)})),1)],1):t("div",[t("b-message",{attrs:{type:"is-danger","has-icon":"","icon-pack":"fas"}},[e._v(" No result to show. ")])],1)},Xe=[],De=function(){var e=this,t=e._self._c;return t("div",{staticClass:"columns is-multiline"},[t("div",{staticClass:"column is-12"},[t("b-message",{staticClass:"has-text-left",attrs:{type:"is-info ","has-icon":"","icon-pack":"fas"}},[t("p",{staticClass:"my-1 is-size-7"},[t("span",[e._v("Dataset Name : "+e._s(e.result.datasetName)+" , ")]),t("span",[e._v(" Target variable : "+e._s(e.result.target))])]),t("p",{staticClass:"subtitle is-6 my-1 is-size-7"},[e._v("Features :")]),t("p",{staticClass:"ml-2 my-1 subtitle is-6 is-size-7"},[e._v("Categorical Features : "),e._l(e.result.categoricalFeatures,(function(s){return t("span",{key:s},[e._v(" "+e._s(s+", ")+" ")])}))],2),t("p",{staticClass:"ml-2 my-1 subtitle is-6 is-size-7"},[e._v("Numerical Features : "),e._l(e.result.numericColumns,(function(s){return t("span",{key:s},[e._v(" "+e._s(s+", ")+" ")])}))],2),t("p",{staticClass:"ml-2 my-1 subtitle is-6 is-size-7"},[e._v("Transformations : "),e._l(e.result.transformations,(function(s){return t("span",{key:s.name},[e._v(" "+e._s(s.name+": "+s.scaler+",")+" ")])}))],2),e._l(e.result.options,(function(s,a){return t("p",{key:a,staticClass:"is-size-7"},[e._v(" "+e._s(a)+": "+e._s(s["value"])+" ")])})),t("p",{staticClass:"subtitle my-1 is-size-7"},[e._v("Goodness of Fit :")]),t("p",{staticClass:"ml-2 my-1 subtitle is-size-7"},[e._v("Accuracy : "+e._s(e.result.metrics[3].toFixed(2)))]),t("p",{staticClass:"ml-2 my-1 subtitle is-size-7"},[e._v("f1 micro : "+e._s(e.result.metrics[4].toFixed(2)))]),t("p",{staticClass:"ml-2 my-1 subtitle is-size-7"},[e._v(" f1 macro :"+e._s(e.result.metrics[2].toFixed(2)))]),t("button",{staticClass:"button is-link is-outlined is-small",on:{click:function(t){return e.deleteTab()}}},[e._v("Delete ")])],2)],1),t("div",{staticClass:"column is-6",staticStyle:{height:"400px"},attrs:{id:"confusion_matrix_"+e.result.id}}),t("div",{staticClass:"column is-6",staticStyle:{height:"400px"},attrs:{id:"pca_results_"+e.result.id}}),t("div",{staticClass:"column is-6",staticStyle:{height:"400px"},attrs:{id:"pfi_boxplot_"+e.result.id}}),t("div",{staticClass:"column is-6",staticStyle:{height:"400px"},attrs:{id:"pdp_plot_"+e.result.id}}),e.result.name.toString().includes("neighbour")?t("div",{staticClass:"column is-6",staticStyle:{height:"350px"},attrs:{id:"knn_table_"+e.result.id}}):e._e(),e.result.name.toString().toLowerCase().includes("nai")?t("div",{staticClass:"column is-6",staticStyle:{height:"350px"},attrs:{id:"roc_plot_"+e.result.id}}):e._e()])},Be=[],je={setup(){const e=b();return{settings:e}},name:"ClassificationViewComponent",methods:{deleteTab(){this.$emit("delete-result",this.result.id)}},props:{result:{}}},We=je,Ve=(0,k.A)(We,De,Be,!1,null,"3b23b839",null),Ge=Ve.exports,Qe=function(){var e=this,t=e._self._c;return t("div",{staticClass:"columns is-multiline"},[t("div",{staticClass:"column is-12"},[t("b-message",{staticClass:"has-text-left",attrs:{type:"is-info is-size-7\t","has-icon":"","icon-pack":"fas"}},[t("p",{staticClass:"my-1"},[t("span",[e._v("Dataset Name : "+e._s(e.result.datasetName)+" , ")]),t("span",[e._v(" Target variable : "+e._s(e.result.target))])]),t("p",{staticClass:"subtitle is-size-7 my-1"},[e._v("Features :")]),t("p",{staticClass:"ml-2 my-1 subtitle is-size-7"},[e._v("Categorical Features : "),e._l(e.result.categoricalFeatures,(function(s){return t("span",{key:s},[e._v(" "+e._s(s+", ")+" ")])}))],2),t("p",{staticClass:"ml-2 my-1 subtitle is-size-7"},[e._v("Numerical Features : "),e._l(e.result.numericColumns,(function(s){return t("span",{key:s},[e._v(" "+e._s(s+", ")+" ")])}))],2),t("p",{staticClass:"ml-2 my-1 subtitle is-size-7"},[e._v("Transformations : "),e._l(e.result.transformations,(function(s){return t("span",{key:s.name},[e._v(" "+e._s(s.name+": "+s.scaler+",")+" ")])}))],2),e._l(e.result.options,(function(s,a){return t("p",{key:a},[e._v(" "+e._s(a)+": "+e._s(s["value"])+" ")])})),t("p",{staticClass:"subtitle is-size-7 my-1"},[e._v("Goodness of Fit :")]),t("p",{staticClass:"ml-2 my-1 subtitle is-size-7"},[e._v("MSE : "+e._s(e.result.metrics[0].toFixed(2)))]),t("p",{staticClass:"ml-2 my-1 subtitle is-size-7"},[e._v("R2 : "+e._s(e.result.metrics[1].toFixed(2)))]),t("button",{staticClass:"button is-link is-outlined is-small",on:{click:function(t){return e.deleteTab()}}},[e._v("Delete ")])],2)],1),"Linear Regression"===e.result.name||"Polynomial Regression"===e.result.name?t("div",{staticClass:"columns is-multiline is-gapless"},[t("div",{staticClass:"column is-7"},[t("div",{staticClass:"table-container"},[t("table",{staticClass:"table has-text-centered nowrap is-striped is-bordered is-narrow is-hoverable is-size-7",attrs:{id:"metrics_table_"+e.result.id}},[e._m(0),e._m(1)])])]),t("div",{staticClass:"column is-5 mt-4",attrs:{id:"parameters_plot_"+e.result.id}}),t("div",{staticClass:"column is-12",attrs:{id:"metrics_"+e.result.id}}),t("div",{staticClass:"column is-6",staticStyle:{height:"250px"},attrs:{id:"errors_"+e.result.id,width:"100%"}}),t("div",{staticClass:"column is-6",staticStyle:{height:"250px"},attrs:{id:"regularization_"+e.result.id,width:"100%"}}),t("div",{staticClass:"column is-4"},[t("div",{staticStyle:{height:"200px"},attrs:{id:"regression_y_yhat_"+e.result.id,width:"100%"}})]),t("div",{staticClass:"column is-4"},[t("div",{staticStyle:{height:"200px"},attrs:{id:"regression_y_yhat_min_"+e.result.id,width:"100%"}})]),t("div",{staticClass:"column is-4"},[t("div",{staticStyle:{height:"200px"},attrs:{id:"regression_y_yhat_1se_"+e.result.id,width:"100%"}})]),t("div",{staticClass:"column is-4"},[t("div",{staticStyle:{height:"200px"},attrs:{id:"regression_residual_"+e.result.id,width:"100%"}})]),t("div",{staticClass:"column is-4"},[t("div",{staticStyle:{height:"200px"},attrs:{id:"regression_residual_min_"+e.result.id,width:"100%"}})]),t("div",{staticClass:"column is-4"},[t("div",{staticStyle:{height:"200px"},attrs:{id:"regression_residual_1se_"+e.result.id,width:"100%"}})]),t("div",{staticClass:"column is-4"},[t("div",{staticStyle:{height:"200px"},attrs:{id:"qqplot_ols_"+e.result.id,width:"100%"}})]),t("div",{staticClass:"column is-4"},[t("div",{staticStyle:{height:"200px"},attrs:{id:"qqplot_min_"+e.result.id,width:"100%"}})]),t("div",{staticClass:"column is-4"},[t("div",{staticStyle:{height:"200px"},attrs:{id:"qqplot_1se_"+e.result.id,width:"100%"}})])]):t("div",{staticClass:"column is-12"},[t("div",{staticClass:"columns is-multiline"},[t("div",{staticClass:"column is-6"},[t("div",{staticStyle:{height:"300px"},attrs:{id:"regression_y_yhat_"+e.result.id,width:"100%"}})]),t("div",{staticClass:"column is-6"},[t("div",{staticStyle:{height:"300px"},attrs:{id:"errors_"+e.result.id,width:"100%"}})]),e.result.name.toString().includes("neighbour")?t("div",{staticClass:"column is-6",staticStyle:{height:"350px"},attrs:{id:"knn_table_"+e.result.id}}):e._e(),t("div",{staticClass:"column is-6",staticStyle:{height:"400px"},attrs:{id:"pfi_boxplot_"+e.result.id}}),t("div",{staticClass:"column is-6",staticStyle:{height:"400px"},attrs:{id:"pdp_plot_"+e.result.id}})])])])},Je=[function(){var e=this,t=e._self._c;return t("thead",[t("tr",[t("th",{attrs:{colspan:"1"}}),t("th",{attrs:{colspan:"3"}},[e._v("OLS")]),t("th",{attrs:{colspan:"3"}},[e._v("lambda min")]),t("th",{attrs:{colspan:"3"}},[e._v("lambda 1se")])]),t("tr",[t("th",[e._v("name")]),t("th",[e._v("coef")]),t("th",[e._v("st.d.")]),t("th",[t("i",[e._v("p")]),e._v("-value")]),t("th",[e._v("coef")]),t("th",[e._v("st.d.")]),t("th",[t("i",[e._v("p")]),e._v("-value")]),t("th",[e._v("coef")]),t("th",[e._v("st.d.")]),t("th",[t("i",[e._v("p")]),e._v("-value")])])])},function(){var e=this,t=e._self._c;return t("tfoot",{staticClass:"has-text-centered",staticStyle:{"font-weight":"normal"}},[t("tr",[t("th"),t("th",{attrs:{colspan:"3"}}),t("th",{attrs:{colspan:"3"}}),t("th",{attrs:{colspan:"3"}})])])}],He={setup(){const e=b();return{settings:e}},name:"regression-view-component",methods:{deleteTab(){this.$emit("delete-result",this.result.id)}},props:{result:{}}},Ue=He,Ye=(0,k.A)(Ue,Qe,Je,!1,null,"5eb6f832",null),Ke=Ye.exports,Ze=s(52204);let et=new ee(null,null);var tt={components:{"classification-view-component":Ge,"regression-view-component":Ke},setup(){const e=b();return{settings:e}},name:"ResultsComponent",props:{},data(){return{activeTab:null,visitedTabs:[]}},methods:{deleteResult(e){let[t,s]=this.settings.getResultVisualizations(e);t.forEach((e=>{et.removeTable(e)})),s.forEach((e=>{P().purge(e)})),this.settings.removeResult(e)},resize(e){let t=this.visitedTabs.findIndex((t=>t===e));console.log("cccccc",t),-1===t&&(this.visitedTabs.push(e),window.dispatchEvent(new Event("resize")))},exportToPDF(){var e=new Ze.uE("p","pt","letter");e.html(this.$el.innerHTML,{callback:function(e){var t=document.createElement("iframe");t.setAttribute("style","position:absolute;right:0; top:0; bottom:0; height:100%; width:500px"),document.body.appendChild(t),t.src=e.output("datauristring")}})}}},st=tt,at=(0,k.A)(st,Re,Xe,!1,null,"6f950d6a",null),it=at.exports,nt=function(){var e=this,t=e._self._c;return t("section",{staticStyle:{"overflow-y":"auto","overflow-x":"auto"}},[t("div",{attrs:{id:"scatterplot_mtx"}}),t("div",{staticClass:"columns my-1 ml-5 mt-5 is-multiline",style:{width:100*e.features.length+"px"}},[e._l(e.features,(function(s){return t("div",{key:s.id,style:{width:e.column_width+"%"}},[t("b-field",{attrs:{label:s.name,"label-position":"on-border"}},[t("b-select",{attrs:{size:"is-small"},model:{value:s.scaler,callback:function(t){e.$set(s,"scaler",t)},expression:"feature.scaler"}},e._l(e.ScaleOptions,(function(s){return t("option",{key:s.id,domProps:{value:s.id}},[e._v(" "+e._s(s.name)+" ")])})),0)],1)],1)})),t("button",{staticClass:"button mt-2 is-info is-small",on:{click:function(t){e.scaleData(e.dataframe?.copy())}}},[e._v("update")])],2),t("b-loading",{attrs:{"is-full-page":!1},model:{value:e.isLoading,callback:function(t){e.isLoading=t},expression:"isLoading"}})],1)},rt=[];let lt=new Z;var ot={setup(){const e=b();return{settings:e}},name:"ScatterplotMatrixComponent",props:{msg:String,dataframe:Object},data(){return{isLoading:!1,ScaleOptions:F,features:[]}},methods:{async dispalySPLOM(e){this.isLoading=!0;let t=this.settings.items.filter((e=>e.selected&&1===e.type)).map((e=>e.name)),s=this.settings.items.filter((e=>e.selected&&1!==e.type)).map((e=>e.name)),a=t.concat(s);e.dropNa({axis:1,inplace:!0}),await lt.ScatterplotMatrix(e.loc({columns:a}).values,a,this.dataframe.column(this.settings.modelTarget).values,s.length,this.settings.isClassification,t,s,e),this.isLoading=!1},async scaleData(e){let t=this.features.filter((e=>0!==e.scaler));if(t?.length>0)return this.isLoading=!0,P().purge("scatterplot_mtx"),G(e,t.map((e=>e.name)),t),await this.dispalySPLOM(e),this.isLoading=!1,void t.forEach((e=>{this.settings.addTransformation(e)}));this.$buefy.toast.open("No transformation available.")}},created:function(){let e=this.settings.items.filter((e=>e.selected&&1===e.type)).map((e=>e.name)),t=this.settings.items.filter((e=>e.selected&&1!==e.type)).map((e=>e.name)),s=e.concat(t);this.features=s.map(((e,t)=>({id:t,name:e,scaler:0}))),this.dispalySPLOM(this.dataframe.copy())},watch:{dataframe:function(e,t){}},computed:{column_width:{get(){return 0===this.features.length?0:100/this.features.length}}}},ct=ot,mt=(0,k.A)(ct,nt,rt,!1,null,"7b04c8a4",null),dt=mt.exports,ut=s(42004);const pt=new Worker(new URL(s.p+s.u(167),s.b)),ht={};pt.onmessage=e=>{const{id:t,...s}=e.data,a=ht[t];delete ht[t],a(s)};const ft=(()=>{let e=0;return(t,s)=>(e=(e+1)%Number.MAX_SAFE_INTEGER,new Promise((a=>{ht[e]=a,pt.postMessage({...s,python:t,id:e})})))})();class _t{constructor(){this.model=null}async train(e,t){this.context={X_train:e,columns:t};const s="\n        import matplotlib\n        matplotlib.use(\"AGG\")\n        import matplotlib.pyplot as plt\n        from js import X_train,columns\n        import seaborn as sns\n        import io, base64\n        import pandas as pd\n\n\n        buffer = io.BytesIO()\n        df = pd.DataFrame(X_train,columns = columns)\n        plot = sns.clustermap(df.corr(),cmap=\"YlGnBu\")\n        plot.savefig(buffer, format='png',dpi=300)\n        buffer.seek(0)\n        img_str = 'data:image/png;base64,' + base64.b64encode(buffer.read()).decode('UTF-8')\n        img_str\n        ";try{const{results:e,error:t}=await ft(s,this.context);if(e)return e;t&&console.log("pyodideWorker error: ",t)}catch(a){console.log(`Error in pyodideWorker at ${a.filename}, Line: ${a.lineno}, ${a.message}`)}}}let yt=new ee(null,null),gt=new Z(null,null);var bt={name:"MainComponent",components:{"dmensionality-reduction-component":Me,"results-component":it,"scatterplot-matrix-component":dt},setup(){const e=b();return{settings:e}},props:{msg:String,selectedFeatures:[]},data(){return{img:null,continuousFeaturesStats:[],continuousFeaturesColumns:[],categoricalFeaturesStats:[],categoricalFeaturesColumns:[],sampleData:[],datasetColumns:[],isActive:!0,hasCorrelationMatrix:!1,loading:!1}},methods:{renderStats(){let e=this.settings.items.filter((e=>e.type===A.Numerical.id)).map((e=>e.name)),t=this.settings.items.filter((e=>e.type!==A.Numerical.id)).map((e=>e.name)),s=yt.renderDatasetStats(this.settings.df,e,t);this.continuousFeaturesColumns=s[0],this.continuousFeaturesStats=s[1],this.categoricalFeaturesColumns=s[2],this.categoricalFeaturesStats=s[3],this.datasetColumns=this.settings.df.columns.map((e=>({field:e,label:e}))),this.sampleData=(0,Ce.toJSON)(this.settings.df.head(5))},async correlationMatrix(){this.loading=!0;let e=this.settings.items.filter((e=>e.type===A.Numerical.id)).map((e=>e.name)),t=this.settings.df.loc({columns:e}).values,s=new ut.uq(t),a=(0,ut.BR)(s);this.hasCorrelationMatrix=!0,await gt.correlationHeatmap("correlation_matrix",a.data,e,"Correlation Matrix");let i=new _t;this.img=await i.train(t,e),this.loading=!1}}},vt=bt,xt=(0,k.A)(vt,Ne,Pe,!1,null,null,null),wt=xt.exports,kt={name:"App",components:{SidebarComponent:Ee,MainComponent:wt},setup(){const e=b();return{settings:e}},data(){return{dataframe:null,selectedFeatures:[]}},methods:{reset(){this.settings.resetDF()},updateFeatureStats(){this.$refs.main.renderStats()},setSelectedFeatures(e){this.selectedFeatures=e}}},Ct=kt,St=(0,k.A)(Ct,i,n,!1,null,null,null),At=St.exports,zt=s(60523);s(91457);P().setPlotConfig({autosize:!0,staticPlot:!0,displaylogo:!1,modeBarButtonsToRemove:["resetScale2d","zoom2d","pan","select2d","resetViews","sendDataToCloud","hoverCompareCartesian","lasso2d","drawopenpath "]}),ue.setBackend(y.tensorflow),a.Ay.config.productionTip=!1,a.Ay.prototype.window=window,a.Ay.use(zt.Ay),a.Ay.use(g.R2);const Ft=(0,g.Ey)();new a.Ay({render:e=>e(At),pinia:Ft}).$mount("#app")},85817:function(){},18590:function(){},70324:function(){},9807:function(){},5863:function(){},86997:function(){},50716:function(){},41234:function(){},16251:function(){},67233:function(){},29800:function(){}},t={};function s(a){var i=t[a];if(void 0!==i)return i.exports;var n=t[a]={id:a,loaded:!1,exports:{}};return e[a].call(n.exports,n,n.exports,s),n.loaded=!0,n.exports}s.m=e,function(){s.amdD=function(){throw new Error("define cannot be used indirect")}}(),function(){s.amdO={}}(),function(){var e=[];s.O=function(t,a,i,n){if(!a){var r=1/0;for(m=0;m<e.length;m++){a=e[m][0],i=e[m][1],n=e[m][2];for(var l=!0,o=0;o<a.length;o++)(!1&n||r>=n)&&Object.keys(s.O).every((function(e){return s.O[e](a[o])}))?a.splice(o--,1):(l=!1,n<r&&(r=n));if(l){e.splice(m--,1);var c=i();void 0!==c&&(t=c)}}return t}n=n||0;for(var m=e.length;m>0&&e[m-1][2]>n;m--)e[m]=e[m-1];e[m]=[a,i,n]}}(),function(){s.n=function(e){var t=e&&e.__esModule?function(){return e["default"]}:function(){return e};return s.d(t,{a:t}),t}}(),function(){var e,t=Object.getPrototypeOf?function(e){return Object.getPrototypeOf(e)}:function(e){return e.__proto__};s.t=function(a,i){if(1&i&&(a=this(a)),8&i)return a;if("object"===typeof a&&a){if(4&i&&a.__esModule)return a;if(16&i&&"function"===typeof a.then)return a}var n=Object.create(null);s.r(n);var r={};e=e||[null,t({}),t([]),t(t)];for(var l=2&i&&a;"object"==typeof l&&!~e.indexOf(l);l=t(l))Object.getOwnPropertyNames(l).forEach((function(e){r[e]=function(){return a[e]}}));return r["default"]=function(){return a},s.d(n,r),n}}(),function(){s.d=function(e,t){for(var a in t)s.o(t,a)&&!s.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:t[a]})}}(),function(){s.f={},s.e=function(e){return Promise.all(Object.keys(s.f).reduce((function(t,a){return s.f[a](e,t),t}),[]))}}(),function(){s.u=function(e){return"js/"+e+"."+{125:"7b2579d0",167:"dc06bcd0",179:"e1b084c1",221:"3f3e92b8",234:"3adb23e4"}[e]+".js"}}(),function(){s.miniCssF=function(e){}}(),function(){s.g=function(){if("object"===typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"===typeof window)return window}}()}(),function(){s.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)}}(),function(){var e={},t="mlfit:";s.l=function(a,i,n,r){if(e[a])e[a].push(i);else{var l,o;if(void 0!==n)for(var c=document.getElementsByTagName("script"),m=0;m<c.length;m++){var d=c[m];if(d.getAttribute("src")==a||d.getAttribute("data-webpack")==t+n){l=d;break}}l||(o=!0,l=document.createElement("script"),l.charset="utf-8",l.timeout=120,s.nc&&l.setAttribute("nonce",s.nc),l.setAttribute("data-webpack",t+n),l.src=a),e[a]=[i];var u=function(t,s){l.onerror=l.onload=null,clearTimeout(p);var i=e[a];if(delete e[a],l.parentNode&&l.parentNode.removeChild(l),i&&i.forEach((function(e){return e(s)})),t)return t(s)},p=setTimeout(u.bind(null,void 0,{type:"timeout",target:l}),12e4);l.onerror=u.bind(null,l.onerror),l.onload=u.bind(null,l.onload),o&&document.head.appendChild(l)}}}(),function(){s.r=function(e){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}}(),function(){s.nmd=function(e){return e.paths=[],e.children||(e.children=[]),e}}(),function(){s.p="/"}(),function(){s.b=document.baseURI||self.location.href;var e={524:0};s.f.j=function(t,a){var i=s.o(e,t)?e[t]:void 0;if(0!==i)if(i)a.push(i[2]);else{var n=new Promise((function(s,a){i=e[t]=[s,a]}));a.push(i[2]=n);var r=s.p+s.u(t),l=new Error,o=function(a){if(s.o(e,t)&&(i=e[t],0!==i&&(e[t]=void 0),i)){var n=a&&("load"===a.type?"missing":a.type),r=a&&a.target&&a.target.src;l.message="Loading chunk "+t+" failed.\n("+n+": "+r+")",l.name="ChunkLoadError",l.type=n,l.request=r,i[1](l)}};s.l(r,o,"chunk-"+t,t)}},s.O.j=function(t){return 0===e[t]};var t=function(t,a){var i,n,r=a[0],l=a[1],o=a[2],c=0;if(r.some((function(t){return 0!==e[t]}))){for(i in l)s.o(l,i)&&(s.m[i]=l[i]);if(o)var m=o(s)}for(t&&t(a);c<r.length;c++)n=r[c],s.o(e,n)&&e[n]&&e[n][0](),e[n]=0;return s.O(m)},a=self["webpackChunkmlfit"]=self["webpackChunkmlfit"]||[];a.forEach(t.bind(null,0)),a.push=t.bind(null,a.push.bind(a))}();var a=s.O(void 0,[504],(function(){return s(52696)}));a=s.O(a)})();
//# sourceMappingURL=app.f4e2059e.js.map