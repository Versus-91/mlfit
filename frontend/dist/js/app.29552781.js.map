{"version":3,"file":"js/app.29552781.js","mappings":"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","sources":["webpack://mlfit/./src/App.vue","webpack://mlfit/./src/components/sidebar-component.vue","webpack://mlfit/./src/components/upload-component.vue","webpack://mlfit/./src/helpers/parser/parser.js","webpack://mlfit/./src/helpers/parser/csv_parser.js","webpack://mlfit/./src/helpers/parser/xlx_parser.js","webpack://mlfit/./src/helpers/parser/txt_parser.js","webpack://mlfit/./src/helpers/parser/parser_factory.js","webpack://mlfit/./src/stores/settings.js","webpack://mlfit/src/components/upload-component.vue","webpack://mlfit/./src/components/upload-component.vue?4aa8","webpack://mlfit/./src/components/upload-component.vue?14a8","webpack://mlfit/./src/helpers/settings.js","webpack://mlfit/./src/helpers/py-worker.js","webpack://mlfit/./src/helpers/dimensionality-reduction/pca.js","webpack://mlfit/./src/helpers/utils.js","webpack://mlfit/./src/helpers/charts.js","webpack://mlfit/./src/helpers/ui.js","webpack://mlfit/./src/helpers/model.js","webpack://mlfit/./src/helpers/classification/logistic_regression.js","webpack://mlfit/./src/helpers/regression_model.js","webpack://mlfit/./src/helpers/regression/linear_regression.js","webpack://mlfit/./src/helpers/regression/bspline_regression.js","webpack://mlfit/./src/helpers/classification/svm.js","webpack://mlfit/./src/helpers/regression/svm.js","webpack://mlfit/./src/helpers/classification/knn.js","webpack://mlfit/./src/helpers/regression/knn_regressor.js","webpack://mlfit/./src/helpers/classification/random_forest.js","webpack://mlfit/./src/helpers/regression/random_forest.js","webpack://mlfit/./src/helpers/classification/NaiveBayes.js","webpack://mlfit/./src/helpers/classification/lda.js","webpack://mlfit/./src/helpers/regression/polynomial_regression.js","webpack://mlfit/./src/helpers/regression/kernel_regression.js","webpack://mlfit/./src/helpers/classification/boosting.js","webpack://mlfit/./src/helpers/regression/boosting.js","webpack://mlfit/./src/helpers/model_factory.js","webpack://mlfit/src/components/sidebar-component.vue","webpack://mlfit/./src/components/sidebar-component.vue?5c0f","webpack://mlfit/./src/components/sidebar-component.vue?e4f8","webpack://mlfit/./src/components/main-component.vue","webpack://mlfit/./src/components/tabs/dmensionality-reduction-componenet.vue","webpack://mlfit/src/components/tabs/dmensionality-reduction-componenet.vue","webpack://mlfit/./src/components/tabs/dmensionality-reduction-componenet.vue?9063","webpack://mlfit/./src/components/tabs/dmensionality-reduction-componenet.vue?359e","webpack://mlfit/./src/components/tabs/results-component.vue","webpack://mlfit/./src/components/tabs/classification-view-component.vue","webpack://mlfit/src/components/tabs/classification-view-component.vue","webpack://mlfit/./src/components/tabs/classification-view-component.vue?e406","webpack://mlfit/./src/components/tabs/classification-view-component.vue?de8c","webpack://mlfit/./src/components/tabs/regression-view-component.vue","webpack://mlfit/src/components/tabs/regression-view-component.vue","webpack://mlfit/./src/components/tabs/regression-view-component.vue?6ab4","webpack://mlfit/./src/components/tabs/regression-view-component.vue?8435","webpack://mlfit/src/components/tabs/results-component.vue","webpack://mlfit/./src/components/tabs/results-component.vue?b709","webpack://mlfit/./src/components/tabs/results-component.vue?73e9","webpack://mlfit/./src/components/visualization/scatterplot-matrix-component.vue","webpack://mlfit/./src/components/visualization/parallel-coordinate-plot-component.vue","webpack://mlfit/src/components/visualization/parallel-coordinate-plot-component.vue","webpack://mlfit/./src/components/visualization/parallel-coordinate-plot-component.vue?23a4","webpack://mlfit/./src/components/visualization/parallel-coordinate-plot-component.vue?081d","webpack://mlfit/src/components/visualization/scatterplot-matrix-component.vue","webpack://mlfit/./src/components/visualization/scatterplot-matrix-component.vue?4516","webpack://mlfit/./src/components/visualization/scatterplot-matrix-component.vue?dd01","webpack://mlfit/./src/components/tabs/methods-tab-component.vue","webpack://mlfit/src/components/tabs/methods-tab-component.vue","webpack://mlfit/./src/components/tabs/methods-tab-component.vue?7317","webpack://mlfit/./src/components/tabs/methods-tab-component.vue?411b","webpack://mlfit/./src/helpers/sns-worker.js","webpack://mlfit/./src/helpers/correlation/correlation-matrix.js","webpack://mlfit/src/components/main-component.vue","webpack://mlfit/./src/components/main-component.vue?f8f6","webpack://mlfit/./src/components/main-component.vue?26f6","webpack://mlfit/src/App.vue","webpack://mlfit/./src/App.vue?c036","webpack://mlfit/./src/App.vue?0e40","webpack://mlfit/./src/main.js","webpack://mlfit/webpack/bootstrap","webpack://mlfit/webpack/runtime/amd define","webpack://mlfit/webpack/runtime/amd options","webpack://mlfit/webpack/runtime/chunk loaded","webpack://mlfit/webpack/runtime/compat get default export","webpack://mlfit/webpack/runtime/define property getters","webpack://mlfit/webpack/runtime/get javascript chunk filename","webpack://mlfit/webpack/runtime/global","webpack://mlfit/webpack/runtime/hasOwnProperty shorthand","webpack://mlfit/webpack/runtime/make namespace object","webpack://mlfit/webpack/runtime/node module decorator","webpack://mlfit/webpack/runtime/publicPath","webpack://mlfit/webpack/runtime/jsonp chunk loading","webpack://mlfit/webpack/startup"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"container\"},[_c('b-notification',{directives:[{name:\"show\",rawName:\"v-show\",value:(this.settings.getDatasizeFlag),expression:\"this.settings.getDatasizeFlag\"}],staticClass:\"mt-2\",attrs:{\"type\":\"is-warning\",\"has-icon\":\"\",\"aria-close-label\":\"Close notification\",\"role\":\"alert\"}},[_vm._v(\" Due to the large size of dataset only 10,000 radom samples from dataset would be used. \")]),_c('div',{staticClass:\"columns is-multiline\",attrs:{\"id\":\"app\"}},[_c('SidebarComponent',{ref:\"sidebar\",on:{\"updateFeatures\":_vm.updateFeatureStats}}),_c('MainComponent',{ref:\"main\",attrs:{\"dataframe\":this.settings.df},on:{\"check-target\":function($event){return _vm.checkTarget()}}})],1)],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"column is-2 has-background-info-light\",staticStyle:{\"height\":\"100%\"}},[_vm._m(0),_c('section',[_c('upload-component',{on:{\"uploaded\":_vm.generateTargetDropdown}}),_c('div',{staticClass:\"column is-12\"},[_c('b-field',[_c('b-button',{attrs:{\"size\":\"is-small\",\"type\":\"is-primary is-light\",\"icon-pack\":\"fas\",\"icon-left\":\"cog\"},on:{\"click\":function($event){_vm.configureFeatures = true}}},[_vm._v(\"Select Features \"+_vm._s(_vm.featureSettings.filter(feature => feature.selected).length))])],1),_c('b-field',{attrs:{\"label\":\"Seed\",\"label-position\":'on-border'}},[_c('b-input',{attrs:{\"size\":\"is-small\",\"placeholder\":\"Seed\",\"type\":\"number\",\"min\":\"0\"},model:{value:(_vm.seed),callback:function ($$v) {_vm.seed=$$v},expression:\"seed\"}})],1),_c('b-field',{attrs:{\"label\":\"Target\",\"label-position\":'on-border'}},[_c('b-select',{attrs:{\"expanded\":true,\"size\":\"is-small\"},on:{\"input\":_vm.checkmodelTask},model:{value:(_vm.modelTarget),callback:function ($$v) {_vm.modelTarget=$$v},expression:\"modelTarget\"}},_vm._l((_vm.columns),function(option){return _c('option',{key:option,domProps:{\"value\":option}},[_vm._v(\" \"+_vm._s(option)+\" \")])}),0)],1),_c('b-field',{attrs:{\"label\":\"Imputation\",\"label-position\":'on-border'}},[_c('b-select',{attrs:{\"expanded\":true,\"size\":\"is-small\"},model:{value:(_vm.imputationOption),callback:function ($$v) {_vm.imputationOption=$$v},expression:\"imputationOption\"}},_vm._l((_vm.imputationOptions),function(option){return _c('option',{key:option.id,domProps:{\"value\":option.id}},[_vm._v(\" \"+_vm._s(option.label)+\" \")])}),0)],1),_c('b-field',{attrs:{\"label\":\"Cross Validation\",\"label-position\":'on-border'}},[_c('b-select',{attrs:{\"expanded\":true,\"size\":\"is-small\"},model:{value:(_vm.crossValidationOption),callback:function ($$v) {_vm.crossValidationOption=$$v},expression:\"crossValidationOption\"}},_vm._l((_vm.crossValidationOptions),function(option){return _c('option',{key:option.id,domProps:{\"value\":option.id}},[_vm._v(\" \"+_vm._s(option.label)+\" \")])}),0)],1),_c('b-field',{attrs:{\"label\":\"Model\",\"label-position\":'on-border'}},[_c('b-select',{attrs:{\"disabled\":_vm.tuneModel,\"expanded\":true,\"size\":\"is-small\"},model:{value:(_vm.modelOption),callback:function ($$v) {_vm.modelOption=$$v},expression:\"modelOption\"}},_vm._l((_vm.modelOptions),function(option){return _c('option',{key:option.id,domProps:{\"value\":option.id}},[_vm._v(\" \"+_vm._s(option.label)+\" \")])}),0),_c('b-button',{attrs:{\"size\":\"is-small\",\"icon-pack\":\"fas\",\"icon-left\":!this.tuneModel ? 'cog' : 'arrow-left'},on:{\"click\":_vm.configureModel}})],1),(_vm.tuneModel)?_c('section',{staticClass:\"mx-1\"},_vm._l((_vm.modelConfigurations),function(option,i){return _c('b-field',{key:i,attrs:{\"label\":option.label,\"label-position\":'on-border'}},[(option.type === 'select')?_c('b-select',{attrs:{\"expanded\":true,\"size\":\"is-small\"},model:{value:(option.value),callback:function ($$v) {_vm.$set(option, \"value\", $$v)},expression:\"option.value\"}},_vm._l((option.values),function(item,index){return _c('option',{key:index,domProps:{\"value\":item.value}},[_vm._v(\" \"+_vm._s(item.label)+\" \")])}),0):(option.type === 'number')?_c('b-input',{attrs:{\"size\":\"is-small\",\"type\":\"number\"},model:{value:(option.value),callback:function ($$v) {_vm.$set(option, \"value\", $$v)},expression:\"option.value\"}}):(option.type === 'text')?_c('b-input',{attrs:{\"size\":\"is-small\",\"type\":\"text\"},model:{value:(option.value),callback:function ($$v) {_vm.$set(option, \"value\", $$v)},expression:\"option.value\"}}):_vm._e()],1)}),1):_vm._e(),_c('b-field',[_c('b-checkbox',{attrs:{\"size\":\"is-small\"},model:{value:(_vm.dataScalingBehavior),callback:function ($$v) {_vm.dataScalingBehavior=$$v},expression:\"dataScalingBehavior\"}},[_vm._v(\"Standardize by default\")])],1),_c('b-field',[_c('b-checkbox',{attrs:{\"size\":\"is-small\"},model:{value:(_vm.explainModel),callback:function ($$v) {_vm.explainModel=$$v},expression:\"explainModel\"}},[_vm._v(\"Explain the model\")])],1),_c('b-field',[_c('b-checkbox',{attrs:{\"size\":\"is-small\"},model:{value:(_vm.usePCAs),callback:function ($$v) {_vm.usePCAs=$$v},expression:\"usePCAs\"}},[_vm._v(\"Use PC components\")])],1),(_vm.usePCAs)?_c('b-field',{attrs:{\"label\":\"Number of Components\",\"label-position\":'on-border'}},[_c('b-input',{attrs:{\"size\":\"is-small\",\"type\":\"number\"},model:{value:(_vm.numberOfComponents),callback:function ($$v) {_vm.numberOfComponents=$$v},expression:\"numberOfComponents\"}})],1):_vm._e(),_c('b-field',[_c('b-button',{attrs:{\"size\":\"is-small\",\"icon-pack\":\"fas\",\"icon-left\":\"play\",\"loading\":_vm.training,\"disabled\":!_vm.dataframe || _vm.modelOption == null},on:{\"click\":_vm.train}},[_vm._v(\" train\")])],1),_c('b-loading',{attrs:{\"is-full-page\":false},model:{value:(_vm.training),callback:function ($$v) {_vm.training=$$v},expression:\"training\"}})],1)],1)])\n}\nvar staticRenderFns = [function (){var _vm=this,_c=_vm._self._c;return _c('figure',{staticClass:\"image is-96x96\"},[_c('img',{attrs:{\"src\":\"/logo.png\"}})])\n}]\n\nexport { render, staticRenderFns }","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"column is-12 has-background-light\"},[_c('b-field',{staticClass:\"file is-success is-fullwidth\",class:{ 'has-name': !!_vm.file }},[_c('b-upload',{staticClass:\"file-label\",attrs:{\"accept\":\".csv,.txt,.xlsx\"},model:{value:(_vm.file),callback:function ($$v) {_vm.file=$$v},expression:\"file\"}},[_c('a',{staticClass:\"button is-success is-small is-fullwidth\"},[_c('b-icon',{staticClass:\"file-icon\",attrs:{\"pack\":\"fas\",\"icon\":\"upload\"}}),_c('span',{staticClass:\"file-label\"},[_vm._v(_vm._s(this.settings.datasetName || \"Upload\"))])],1)])],1),_c('b-field',[_c('b-checkbox',{attrs:{\"size\":\"is-small\"},model:{value:(_vm.header),callback:function ($$v) {_vm.header=$$v},expression:\"header\"}},[_vm._v(\"Header\")])],1),_c('b-field',{attrs:{\"label\":\"Separator\",\"label-position\":'on-border'}},[_c('b-select',{attrs:{\"expanded\":true,\"size\":\"is-small\"},model:{value:(_vm.separator),callback:function ($$v) {_vm.separator=$$v},expression:\"separator\"}},_vm._l((_vm.separatorOptions),function(option){return _c('option',{key:option.id,domProps:{\"value\":option.id}},[_vm._v(\" \"+_vm._s(option.label)+\" \")])}),0)],1),_c('b-field',{attrs:{\"label\":\"Decimal\",\"label-position\":'on-border'}},[_c('b-select',{attrs:{\"expanded\":true,\"size\":\"is-small\",\"label-position\":'on-border'},model:{value:(_vm.decimal),callback:function ($$v) {_vm.decimal=$$v},expression:\"decimal\"}},_vm._l((_vm.decimalOptions),function(option){return _c('option',{key:option.id,domProps:{\"value\":option.id}},[_vm._v(\" \"+_vm._s(option.label)+\" \")])}),0)],1),_c('b-field',[_c('b-select',{attrs:{\"expanded\":true,\"size\":\"is-small\"},on:{\"input\":_vm.handleFileSelect},model:{value:(_vm.sampleDataset),callback:function ($$v) {_vm.sampleDataset=$$v},expression:\"sampleDataset\"}},_vm._l((_vm.samplDataOptions),function(option){return _c('option',{key:option.id,domProps:{\"value\":option.name}},[_vm._v(\" \"+_vm._s(option.label)+\" \")])}),0)],1)],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","/* eslint-disable no-unused-vars */\r\nexport class DataParser {\r\n    parse(_content) {\r\n        throw new Error(\"Not implemented.\")\r\n    }\r\n}","import { DataParser } from './parser';\r\nimport Papa from 'papaparse';\r\n\r\nexport class CSVParser extends DataParser {\r\n    constructor(options) {\r\n        super();\r\n        this.separators = { 0: ',', 1: '.', 2: ',', 3: ' ' }\r\n        this.separator = options.separator;\r\n        this.delimiter = options.delimiter;\r\n        this.has_header = options.header\r\n    }\r\n    parse(content) {\r\n        return new Promise((resolve) => {\r\n            Papa.parse(content, {\r\n                worker: false,\r\n                header: this.has_header,\r\n                delimiter: this.separators[this.separator],\r\n                transform: (val) => {\r\n                    if (val === \"?\" || val === \"NA\") {\r\n                        return NaN\r\n                    }\r\n                    return val\r\n                },\r\n                // transformHeader: (val) => {\r\n                //     return val.replace(/[^a-zA-Z0-9 ]/g, \"\").trim()\r\n                // },\r\n                skipEmptyLines: true,\r\n                dynamicTyping: true,\r\n                complete: async function (result) {\r\n                    resolve(result.data)\r\n                }\r\n            })\r\n        }\r\n        )\r\n    }\r\n}","/* eslint-disable no-undef */\r\nimport { DataParser } from './parser';\r\n\r\nexport class XLXParser extends DataParser {\r\n    parse(content) {\r\n        return new Promise((resolve) => {\r\n            var reader = new FileReader();\r\n            reader.onload = function () {\r\n                var arrayBuffer = this.result,\r\n                    array = new Uint8Array(arrayBuffer),\r\n                    binaryString = String.fromCharCode.apply(null, array);\r\n                var workbook = XLSX.read(binaryString, {\r\n                    type: \"binary\"\r\n                });\r\n                var first_sheet_name = workbook.SheetNames[0];\r\n                var worksheet = workbook.Sheets[first_sheet_name];\r\n                resolve(XLSX.utils.sheet_to_json(worksheet, {\r\n                    raw: true\r\n                }));\r\n            }\r\n            reader.readAsArrayBuffer(content);\r\n        }\r\n        )\r\n    }\r\n}","import { DataParser } from './parser';\r\nimport Papa from 'papaparse';\r\n\r\nexport class TXTParser extends DataParser {\r\n    constructor(options) {\r\n        super();\r\n        this.separators = { 0: ',', 1: '.', 2: ',', 3: ' ' }\r\n        this.separator = options.separator;\r\n        this.delimiter = options.delimiter;\r\n        this.has_header = options.header\r\n    }\r\n    parse(content) {\r\n        return new Promise((resolve) => {\r\n            Papa.parse(content, {\r\n                worker: false,\r\n                header: this.has_header,\r\n                delimiter: this.separators[this.separator],\r\n                transform: (val) => {\r\n                    if (val === \"?\" || val === \"NA\") {\r\n                        return NaN\r\n                    }\r\n                    return val\r\n                },\r\n                // transformHeader: (val) => {\r\n                //     return val.replace(/[^a-zA-Z0-9 ]/g, \"\").trim()\r\n                // },\r\n                skipEmptyLines: true,\r\n                dynamicTyping: true,\r\n                complete: async function (result) {\r\n                    if (this.delimiter == 1) {\r\n                        for (let i = 0; i < result.data.length; i++) {\r\n                            const element = result.data[i];\r\n                            for (let j = 0; j < element.length; j++) {\r\n                                result.data[i][j] = parseFloat(result.data[i][j].replace(/\\./g, '').replace(',', '.'));\r\n                            }\r\n                        }\r\n                    }\r\n                    resolve(result.data)\r\n                }\r\n            })\r\n        }\r\n        )\r\n    }\r\n}","import { CSVParser } from './csv_parser'\r\nimport { XLXParser } from './xlx_parser'\r\nimport { TXTParser } from './txt_parser'\r\n\r\n\r\nexport class ParserFactory {\r\n    static createParser(fileType, options) {\r\n        switch (fileType.toLowerCase()) {\r\n            case 'csv':\r\n                return new CSVParser(options);\r\n            case 'txt': {\r\n                let parser = new TXTParser(options)\r\n                return parser\r\n            }\r\n            case 'xlsx':\r\n                return new XLXParser();\r\n            default:\r\n                throw new Error(`Unsupported file type: ${fileType}`);\r\n        }\r\n    }\r\n}\r\n","import { defineStore } from 'pinia'\r\n\r\nexport const settingStore = defineStore({\r\n    id: 'cart',\r\n    state: () => ({\r\n        counter: 0,\r\n        df: {},\r\n        rawData: {},\r\n        features: [],\r\n        transformations: [],\r\n        classTransformations: [],\r\n        results: [],\r\n        messages: [],\r\n        datasetName: '',\r\n        activeTab: 0,\r\n        dataSizeFlag: false,\r\n        resultActiveTab: '',\r\n        datasetShape: {\r\n            count: 0,\r\n            columns: 0\r\n        },\r\n        target: null,\r\n        isClassification: true,\r\n        seed: 123,\r\n    }),\r\n    getters: {\r\n        items: (state) => {\r\n            return state.features\r\n        },\r\n        getDatasizeFlag: (state) => {\r\n            return state.dataSizeFlag\r\n        },\r\n        getCounter: (state) => {\r\n            return state.counter\r\n        },\r\n        getMessages: (state) => {\r\n            return state.messages.reverse()\r\n        },\r\n        getDatasetName: (state) => {\r\n            return state.datasetName\r\n        },\r\n        getDatasetShape: (state) => {\r\n            return state.datasetShape\r\n        },\r\n        getDataset: (state) => {\r\n            return state.df;\r\n        },\r\n        getRawData: (state) => {\r\n            return state.rawData;\r\n        },\r\n        currentTab: (state) => {\r\n            return state.activeTab\r\n        },\r\n        mergedClasses: (state) => {\r\n            return state.classTransformations\r\n        },\r\n        getSeed: (state) => {\r\n            return state.seed\r\n        },\r\n        getMethodResults: (state) => {\r\n            return state.results\r\n        },\r\n        getResultTab: (state) => {\r\n            return state.resultActiveTab\r\n        },\r\n        outputs: (state) => state.results,\r\n        transformationsList: (state) => state.transformations,\r\n        modelTarget: (state) => state.target,\r\n        classificationTask: (state) => state.isClassification,\r\n    },\r\n    actions: {\r\n        setSeed(seed) {\r\n            this.seed = seed\r\n        },\r\n        setDatasetName(name) {\r\n            this.datasetName = name;\r\n        },\r\n        setDatasetShape(shape) {\r\n            this.datasetShape = shape;\r\n        },\r\n        resetFeatures() {\r\n            this.features = []\r\n            this.transformations = []\r\n            this.classTransformations = []\r\n        },\r\n        resetTransformations() {\r\n            this.transformations = []\r\n        },\r\n        setDatasizeFlag(flag) {\r\n            this.dataSizeFlag = flag;\r\n        },\r\n        resetDataset() {\r\n            this.datasetName = '';\r\n            this.datasetShape = {\r\n                count: 0,\r\n                columns: 0\r\n            };\r\n\r\n        },\r\n        increaseCounter() {\r\n            this.counter++;\r\n        },\r\n        setDataframe(data) {\r\n            this.df = data;\r\n        },\r\n        setRawData(data) {\r\n            this.rawData = data;\r\n        },\r\n        addFeature(feature) {\r\n            feature.scaler = 0;\r\n            let index = this.features.findIndex(m => m.name === feature.name);\r\n            if (index !== -1) {\r\n                this.features[index] = feature\r\n                return\r\n            }\r\n            this.features.push(feature)\r\n        },\r\n        setClassTransformation(transformations) {\r\n            this.classTransformations = transformations\r\n        },\r\n\r\n        addTransformation(transformation) {\r\n            let index = this.transformations.findIndex(m => m.name === transformation.name);\r\n            if (index !== -1) {\r\n                this.transformations[index] = transformation\r\n                return\r\n            }\r\n            this.transformations.push(transformation)\r\n        },\r\n        addResult(result) {\r\n            this.results.push(result)\r\n        },\r\n        addMessage(message) {\r\n            var date = new Date();\r\n            message['date'] = date.toLocaleString()\r\n            this.messages.push(message)\r\n        },\r\n        removeResult(id) {\r\n            const i = this.results.findIndex(m => m.id === id)\r\n            if (i > -1) {\r\n                this.results.splice(i, 1);\r\n            }\r\n        },\r\n        getResultVisualizations(id) {\r\n            const i = this.results.findIndex(m => m.id === id)\r\n            if (i > -1) {\r\n                let tables = this.results[i].tables;\r\n                let plots = this.results[i].plots;\r\n                return [tables, plots]\r\n            }\r\n        },\r\n        resetDF() {\r\n            this.df = {}\r\n        },\r\n        updateFeature(feature) {\r\n            let index = this.features.findIndex(m => m.name === feature.name);\r\n            if (index !== -1) {\r\n                this.features[index] = feature\r\n            }\r\n        },\r\n        removeItem(name) {\r\n            const i = this.features.lastIndexOf(name)\r\n            if (i > -1) this.features.splice(i, 1)\r\n        },\r\n        setTarget(target) {\r\n            this.target = target\r\n        },\r\n        setmodelTask(type) {\r\n            this.isClassification = type\r\n        },\r\n        setActiveTab(index) {\r\n            this.activeTab = index\r\n        },\r\n        setResultActiveTab(index) {\r\n            this.resultActiveTab = index\r\n        }\r\n    },\r\n})\r\n\r\n","<template>\r\n    <div class=\"column is-12 has-background-light\">\r\n        <b-field class=\"file is-success is-fullwidth\" :class=\"{ 'has-name': !!file }\">\r\n            <b-upload accept=\".csv,.txt,.xlsx\" v-model=\"file\" class=\"file-label\">\r\n                <a class=\"button is-success is-small is-fullwidth\">\r\n                    <b-icon pack=\"fas\" class=\"file-icon\" icon=\"upload\"></b-icon>\r\n                    <span class=\"file-label\">{{ this.settings.datasetName || \"Upload\" }}</span>\r\n                </a>\r\n            </b-upload>\r\n        </b-field>\r\n        <b-field>\r\n            <b-checkbox size=\"is-small\" v-model=\"header\">Header</b-checkbox>\r\n        </b-field>\r\n        <b-field label=\"Separator\" :label-position=\"'on-border'\">\r\n            <b-select :expanded=\"true\" v-model=\"separator\" size=\"is-small\">\r\n                <option v-for=\"option in separatorOptions\" :value=\"option.id\" :key=\"option.id\">\r\n                    {{ option.label }}\r\n                </option>\r\n            </b-select>\r\n        </b-field>\r\n        <b-field label=\"Decimal\" :label-position=\"'on-border'\">\r\n            <b-select :expanded=\"true\" v-model=\"decimal\" size=\"is-small\" :label-position=\"'on-border'\">\r\n                <option v-for=\"option in decimalOptions\" :value=\"option.id\" :key=\"option.id\">\r\n                    {{ option.label }}\r\n                </option>\r\n            </b-select>\r\n        </b-field>\r\n        <b-field>\r\n            <b-select :expanded=\"true\" @input=\"handleFileSelect\" size=\"is-small\" v-model=\"sampleDataset\">\r\n                <option v-for=\"option in samplDataOptions\" :value=\"option.name\" :key=\"option.id\">\r\n                    {{ option.label }}\r\n                </option>\r\n            </b-select>\r\n        </b-field>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { ParserFactory } from '../helpers/parser/parser_factory.js'\r\nimport { DataFrame } from 'danfojs/dist/danfojs-base';\r\nimport { settingStore } from '@/stores/settings'\r\n\r\nconst DATASET_SIZE = 10000;\r\nexport default {\r\n    setup() {\r\n        const settings = settingStore()\r\n        return { settings }\r\n    },\r\n    name: 'UploadComponent',\r\n    props: {\r\n        msg: String\r\n    },\r\n    data() {\r\n        return {\r\n            sampleDataset: 'none',\r\n            file: null,\r\n            separator: 2,\r\n            header: true,\r\n            decimal: 1,\r\n            decimalOptions:\r\n                [\r\n                    {\r\n                        id: 1,\r\n                        label: '.',\r\n                    }, {\r\n                        id: 2,\r\n                        label: ',',\r\n                    }]\r\n            ,\r\n            separatorOptions:\r\n                [\r\n                    {\r\n                        id: 1,\r\n                        label: '.',\r\n                    }, {\r\n                        id: 2,\r\n                        label: ',',\r\n                    }\r\n                    , {\r\n                        id: 3,\r\n                        label: 'space',\r\n                    }]\r\n            ,\r\n            samplDataOptions:\r\n                [\r\n                    {\r\n                        id: 0,\r\n                        name: 'none',\r\n                        label: 'Select toy dataset',\r\n\r\n                    },\r\n                    {\r\n                        id: 1,\r\n                        name: 'iris',\r\n                        label: 'iris',\r\n                    }, {\r\n                        id: 2,\r\n                        name: 'wine',\r\n                        label: 'wine',\r\n\r\n                    }\r\n                    , {\r\n                        id: 3,\r\n                        name: 'diabetes',\r\n                        label: 'diabetes',\r\n                    }, {\r\n                        id: 4,\r\n                        name: 'housing',\r\n                        label: 'California Housing',\r\n                    }, {\r\n                        id: 5,\r\n                        name: 'Titanic',\r\n                        label: 'Titanic',\r\n\r\n                    },]\r\n            ,\r\n        }\r\n    },\r\n    watch: {\r\n        file: async function (val) {\r\n            try {\r\n                let dataset = await this.process_file(val, val.name.split('.')[1])\r\n                this.initDataframe(dataset, val.name.split('.')[0])\r\n            } catch (error) {\r\n                this.$buefy.toast.open('Failed to parse the dataset.')\r\n            }\r\n\r\n        }\r\n    },\r\n\r\n    methods: {\r\n        shuffle(array, seed) {\r\n            var m = array.length, t, i;\r\n            // While there remain elements to shuffle…\r\n            while (m) {\r\n\r\n                // Pick a remaining element…\r\n                i = Math.floor(this.random(seed) * m--);\r\n\r\n                // And swap it with the current element.\r\n                t = array[m];\r\n                array[m] = array[i];\r\n                array[i] = t;\r\n                ++seed\r\n            }\r\n        },\r\n        random(seed) {\r\n            var x = Math.sin(seed++) * 10000;\r\n            return x - Math.floor(x);\r\n        },\r\n        async initDataframe(dataset, name) {\r\n            this.settings.resetFeatures();\r\n            this.settings.setDatasetName(name);\r\n            this.settings.setDatasetShape({ count: dataset.$data.length, columns: dataset.columns.length });\r\n            let df = await dataset.sample(dataset.$data.length, { seed: this.settings.getSeed });\r\n            this.settings.setDataframe(df)\r\n            this.$emit('uploaded', true)\r\n        },\r\n        async process_file(file, type) {\r\n\r\n            let options = {\r\n                separator: this.separator,\r\n                delimiter: this.decimal,\r\n                header: this.header\r\n            }\r\n            let processdDataset = await ParserFactory.createParser(type, options).parse(file)\r\n            if (processdDataset.length > DATASET_SIZE) {\r\n                this.settings.setDatasizeFlag(true);\r\n                this.shuffle(processdDataset, this.settings.getSeed)\r\n                processdDataset = processdDataset.slice(0, DATASET_SIZE)\r\n            } else {\r\n                this.settings.setDatasizeFlag(false);\r\n            }\r\n            let dataFrame = new DataFrame(processdDataset);\r\n            this.settings.setRawData(processdDataset);\r\n\r\n            return dataFrame\r\n        },\r\n        async handleFileSelect(name) {\r\n            if (name == 'none') {\r\n                return\r\n            }\r\n            name += '.csv';\r\n            let current = this;\r\n            let file;\r\n            fetch('/' + name)\r\n                .then(response => response.blob())\r\n                .then(async blob => {\r\n                    file = new File([blob], name);\r\n                    let dataframe = await this.process_file(file, 'csv');\r\n                    current.initDataframe(dataframe, name.split('.')[0])\r\n                })\r\n                .catch(error => {\r\n                    console.error('Error fetching the file:', error);\r\n                });\r\n\r\n        },\r\n    }\r\n}\r\n</script>\r\n\r\n<style></style>","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./upload-component.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./upload-component.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./upload-component.vue?vue&type=template&id=d48bac48\"\nimport script from \"./upload-component.vue?vue&type=script&lang=js\"\nexport * from \"./upload-component.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","export const FeatureCategories = {\r\n    \"Numerical\": {\r\n        id: 1,\r\n        name: \"Numerical\"\r\n    }\r\n    , \"Nominal\": {\r\n        id: 2,\r\n        name: \"Nominal\"\r\n    }\r\n    , \"Ordinal\": {\r\n        id: 3,\r\n        name: \"Ordinal\"\r\n    }\r\n};\r\nexport const CV_OPTIONS = {\r\n    SPLIT: 1,\r\n    NO: 2,\r\n    KFOLD: 3\r\n}\r\nexport const REGRESSION = 1;\r\nexport const CLASSIFICATION = 2;\r\n\r\n\r\nexport const ScaleOptions = {\r\n    \"No\": {\r\n        id: 0,\r\n        name: \"No\",\r\n    },\r\n    \"Scale\": {\r\n        id: 1,\r\n        name: \"Scale\"\r\n    }\r\n    , \"x^2\": {\r\n        id: 2,\r\n        name: \"x^2\"\r\n    }\r\n    , \"ln(x)\": {\r\n        id: 3,\r\n        name: \"ln(x)\"\r\n    }, \"Standardize\": {\r\n        id: 4,\r\n        name: \"Standardize\"\r\n    }\r\n}\r\nexport const Settings = {\r\n    \"classification\": {\r\n        \"logistic_regression\": {\r\n            \"id\": 1,\r\n            \"label\": \"Logistic Regression\",\r\n            \"value\": 1,\r\n            \"options\": {\r\n                \"regularization\": {\r\n                    \"label\": \"regulrization\",\r\n                    \"type\": \"select\",\r\n                    default: \"no\",\r\n                    value: \"no\",\r\n                    \"values\": [{ label: \"No\", value: \"no\" }, { label: \"adaptive lasso\", value: \"Lasso\" }, { label: \"ridge\", value: \"ridge\" }]\r\n                }\r\n            }\r\n        },\r\n        \"discriminant_analysis\": {\r\n            \"id\": 2,\r\n            \"label\": \"Discriminant Analysis\",\r\n            \"value\": 2,\r\n            \"options\": {\r\n                \"type\": {\r\n                    \"label\": \"type\",\r\n                    \"type\": \"select\",\r\n                    default: \"linear\",\r\n                    \"values\": [{ label: \"linear\", value: \"linear\" }, { label: \"quadratic\", value: \"quadratic\" }]\r\n                },\r\n                \"priors\": {\r\n                    label: \"priors\",\r\n                    type: \"text\",\r\n                    placeholder: \"comma separated priors\"\r\n                },\r\n            }\r\n        },\r\n        \"k_nearest_neighbour\": {\r\n            \"id\": 3,\r\n            \"label\": \"k nearest neighbour\",\r\n            \"value\": 3,\r\n            \"options\": {\r\n                \"min\": {\r\n                    \"label\": \"min\",\r\n                    type: \"number\",\r\n                    default: 3\r\n                },\r\n                \"max\": {\r\n                    \"label\": \"max\",\r\n                    type: \"number\",\r\n                    default: 9\r\n                },\r\n                \"metric\": {\r\n                    label: \"metrics\",\r\n                    type: \"select\",\r\n                    default: \"manhattan\",\r\n                    values: [{ label: \"euclidean\", value: \"euclidean\" }, { label: \"manhattan\", value: \"manhattan\" }]\r\n                },\r\n            },\r\n        },\r\n        \"support_vector_machine\": {\r\n            \"id\": 4,\r\n            \"label\": \"Support vector machine\",\r\n            \"value\": 4,\r\n            \"options\": {\r\n                \"kernel\": {\r\n                    label: 'kernel',\r\n                    type: \"select\",\r\n                    default: \"rbf\",\r\n                    values: [{ label: \"RBF\", value: \"rbf\" }, { label: \"Linear\", value: \"linear\" }, { label: \"Polynomial\", value: \"poly\" }\r\n                        , { label: \"Sigmoid\", value: \"sigmoid\" }]\r\n                },\r\n\r\n                \"bias\": {\r\n                    \"label\": \"bias\",\r\n                    type: \"number\",\r\n                    for: [\"Sigmoid\", \"Sigmoid\"],\r\n                    default: 0\r\n                },\r\n                \"c\": {\r\n                    \"label\": \"Regularization parameter\",\r\n                    type: \"number\",\r\n                    default: 1\r\n                },\r\n                \"degree\": {\r\n                    label: 'degree',\r\n                    type: \"number\",\r\n                    for: [\"Polynomial\"],\r\n                    default: 3\r\n                },\r\n            },\r\n        },\r\n        \"random_forest\": {\r\n            \"id\": 5,\r\n            \"label\": \"Random forest\",\r\n            \"value\": 5,\r\n            \"options\": {\r\n                \"estimators\": {\r\n                    label: \"estimators\",\r\n                    type: \"number\",\r\n                    default: 100\r\n                },\r\n                \"features\": {\r\n                    label: \"features\",\r\n                    type: \"number\",\r\n                    default: \"sqrt\"\r\n                },\r\n                \"depth\": {\r\n                    label: \"depth\",\r\n                    type: \"number\",\r\n                    default: 5\r\n                },\r\n                \"criteria\": {\r\n                    label: \"criteria\",\r\n                    type: \"select\",\r\n                    default: \"gini\",\r\n                    \"values\": [{ label: \"gini\", value: \"gini\" }, { label: \"log loss\", value: \"log_loss\" },\r\n                    { label: \"entropy\", value: \"entropy\" }]\r\n                }\r\n            },\r\n        },\r\n        \"boosting\": {\r\n            \"id\": 6,\r\n            \"label\": \"Boosting\",\r\n            \"value\": 6,\r\n            \"options\": {\r\n                \"booster\": {\r\n                    type: \"select\",\r\n                    label: \"booster\",\r\n                    default: \"gbtree\",\r\n                    values: [{ label: \"gbtree\", value: \"gbtree\" }, { label: \"gblinear\", value: \"gblinear\" }, { label: \"dart\", value: \"dart\" }]\r\n                },\r\n                \"eta\": {\r\n                    label: \"learning rate\",\r\n                    type: \"number\",\r\n                    default: 0.3\r\n                },\r\n                \"estimators\": {\r\n                    label: \"estimators\",\r\n                    type: \"number\",\r\n                    default: 200\r\n                },\r\n                \"depth\": {\r\n                    label: \"depth\",\r\n                    type: \"number\",\r\n                    default: 5\r\n                },\r\n\r\n            },\r\n        },\r\n        \"naive_bayes\": {\r\n            \"label\": \"Naive Bayes\",\r\n            \"value\": 7,\r\n            \"id\": 7,\r\n            \"options\": {\r\n                \"laplace\": {\r\n                    label: \"laplace smoothing\",\r\n                    type: \"number\",\r\n                    default: 0.05\r\n                },\r\n                \"priors\": {\r\n                    label: \"priors\",\r\n                    type: \"text\",\r\n                    placeholder: \"comma separated priors\"\r\n                },\r\n                \"type\": {\r\n                    label: \"type\",\r\n                    type: \"select\",\r\n                    default: \"Gaussian\",\r\n                    values: [{ label: \"Gaussian\", value: \"Gaussian\" }, { label: \"Multinomial\", value: \"Multinomial\" }, { label: \"Bernoulli\", value: \"Bernoulli\" }]\r\n                }\r\n            }\r\n\r\n        },\r\n    },\r\n    \"regression\": {\r\n        \"linear_regression\": {\r\n            \"label\": \"Linear Regression\",\r\n            \"value\": 9,\r\n            \"id\": 9,\r\n            \"feature_selection\": [\"no\", \"Lasso\", \"ridge\"],\r\n            \"criteria\": [\"AIC\", \"BIC\", \"AR2\",],\r\n            \"options\": {\r\n                \"regularization\": {\r\n                    label: \"regularization\",\r\n                    type: \"select\",\r\n                    default: \"Lasso\",\r\n                    values: [{ label: \"adaptive lasso\", value: \"Lasso\" }, { label: \"Ridge\", value: \"Ridge\" }]\r\n                }\r\n            }\r\n        },\r\n        \"polynomial_regression\": {\r\n            \"label\": \"Polynomial Regression\",\r\n            \"value\": 14,\r\n            \"id\": 14,\r\n            \"feature_selection\": [\"no\", \"Lasso\", \"ridge\"],\r\n            \"criteria\": [\"AIC\", \"BIC\", \"AR2\",],\r\n            \"options\": {\r\n                \"regularization\": {\r\n                    label: \"regularization\",\r\n                    type: \"select\",\r\n                    default: \"Lasso\",\r\n                    values: [{ label: \"Lasso\", value: \"Lasso\" }, { label: \"Ridge\", value: \"Ridge\" }]\r\n                },\r\n                \"degree\": {\r\n                    label: \"Degree\",\r\n                    type: \"number\",\r\n                    default: 2,\r\n                }\r\n            }\r\n        },\r\n        \"k_nearest_neighbour\": {\r\n            \"label\": \"k nearest neighbour Regression\",\r\n            \"value\": 10,\r\n            \"id\": 10,\r\n            \"options\": {\r\n                \"min\": {\r\n                    label: \"min\",\r\n                    type: \"number\",\r\n                    default: 3\r\n                },\r\n                \"max\": {\r\n                    label: \"max\",\r\n                    type: \"number\",\r\n                    default: 9\r\n                },\r\n            },\r\n        },\r\n        \"boosting\": {\r\n            \"label\": \"Boosting Regression\",\r\n            \"value\": 11,\r\n            \"id\": 11,\r\n            \"options\": {\r\n                \"booster\": {\r\n                    label: \"booster\",\r\n                    type: \"select\",\r\n                    default: \"gbtree\",\r\n                    values: [{ label: \"gbtree\", value: \"gbtree\" }, { label: \"gblinear\", value: \"gblinear\" }, { label: \"dart\", value: \"dart\" }]\r\n                },\r\n                \"eta\": {\r\n                    label: \"learning rate\",\r\n                    type: \"number\",\r\n                    default: 0.3\r\n                },\r\n                \"estimators\": {\r\n                    label: \"estimators\",\r\n                    type: \"number\",\r\n                    default: 200\r\n                },\r\n                \"depth\": {\r\n                    label: \"depth\",\r\n                    type: \"number\",\r\n                    default: 5\r\n                },\r\n\r\n            },\r\n        },\r\n        \"support_vector_machine\": {\r\n            \"label\": \"Support vector machine Regression\",\r\n            \"value\": 12,\r\n            \"id\": 12,\r\n            \"options\": {\r\n                \"kernel\": {\r\n                    label: \"kernel\",\r\n                    type: \"select\",\r\n                    default: \"rbf\",\r\n                    values: [{ label: \"RBF\", value: \"rbf\" }, { label: \"Linear\", value: \"linear\" }, { label: \"Polynomial\", value: \"poly\" }\r\n                        , { label: \"Sigmoid\", value: \"sigmoid\" }]\r\n                },\r\n                \"gamma\": {\r\n                    label: \"gamma\",\r\n                    type: \"number\",\r\n                    for: [\"RBF\", \"Sigmoid\", \"Polynomial\"],\r\n                    default: 1\r\n                },\r\n                \"bias\": {\r\n                    label: \"bias\",\r\n                    type: \"number\",\r\n                    for: [\"Sigmoid\", \"Sigmoid\"],\r\n                    default: 0\r\n                },\r\n                \"degree\": {\r\n                    label: \"degree polynomial\",\r\n                    type: \"number\",\r\n                    for: [\"Polynomial\"],\r\n                    default: 3\r\n                },\r\n            },\r\n        },\r\n        \"random_forest\": {\r\n            \"label\": \"Random forest Regression\",\r\n            \"value\": 13,\r\n            \"id\": 13,\r\n            \"options\": {\r\n                \"estimators\": {\r\n                    label: \"num of estimators\",\r\n                    type: \"number\",\r\n                    default: 100\r\n                },\r\n                \"features\": {\r\n                    label: \"features length\",\r\n                    type: \"number\",\r\n                    default: \"sqrt\"\r\n                },\r\n                \"depth\": {\r\n                    label: \"depth\",\r\n                    type: \"number\",\r\n                    default: 5\r\n                },\r\n                \"criteria\": {\r\n                    type: \"select\",\r\n                    label: \"criteria\",\r\n                    default: \"squared_error\",\r\n                    \"values\": [{ label: \"squared_error\", value: \"squared_error\" }, { label: \"absolute_error\", value: \"absolute_error\" },\r\n                    { label: \"friedman_mse\", value: \"friedman_mse\" }, { label: \"poisson\", value: \"poisson\" }]\r\n                }\r\n            },\r\n        },\r\n        \"kernel_regression\": {\r\n            \"label\": \"Kernel Regression\",\r\n            \"value\": 15,\r\n            \"id\": 15,\r\n            \"options\": {\r\n                \"estimators\": {\r\n                    type: \"number\",\r\n                    default: 100\r\n                },\r\n            },\r\n        },\r\n        \"bspline_regression\": {\r\n            \"label\": \"Bspline Regression\",\r\n            \"value\": 16,\r\n            \"id\": 16,\r\n\r\n            \"options\": {\r\n                \"knots\": {\r\n                    label: \"knots\",\r\n                    type: \"number\",\r\n                    default: 5\r\n                },\r\n                \"degree\": {\r\n                    label: \"degree\",\r\n                    type: \"number\",\r\n                    default: 3\r\n                },\r\n            },\r\n        },\r\n    },\r\n};","const pyodideWorker = new Worker(new URL('./webworker.js', import.meta.url))\r\n\r\nconst callbacks = {};\r\n\r\npyodideWorker.onmessage = (event) => {\r\n    const { id, ...data } = event.data;\r\n    const onSuccess = callbacks[id];\r\n    delete callbacks[id];\r\n    onSuccess(data);\r\n};\r\n\r\nconst asyncRun = (() => {\r\n    let id = 0; // identify a Promise\r\n    return (script, context) => {\r\n        // the id could be generated more carefully\r\n        id = (id + 1) % Number.MAX_SAFE_INTEGER;\r\n        return new Promise((onSuccess) => {\r\n            callbacks[id] = onSuccess;\r\n            pyodideWorker.postMessage({\r\n                ...context,\r\n                python: script,\r\n                id,\r\n            });\r\n        });\r\n    };\r\n})();\r\n\r\nexport { asyncRun };","import { asyncRun } from \"../py-worker\";\r\nexport default class PCA {\r\n    constructor() {\r\n    }\r\n    async predict(x, n, x_test = []) {\r\n        this.context = {\r\n            x_train: x,\r\n            x_test: x_test,\r\n            has_test_set: x_test.length > 0,\r\n            n: +n,\r\n        };\r\n        const script = `\r\n        import matplotlib.pyplot as plt\r\n        import numpy as np\r\n        from sklearn.decomposition import PCA\r\n        from js import x_train,n,x_test,has_test_set\r\n        from sklearn.preprocessing import StandardScaler\r\n        x_train = np.array(x_train)\r\n        scaler = StandardScaler()\r\n        X_scaled = scaler.fit_transform(x_train) \r\n        pca_x = PCA(n_components=n,random_state = 42)\r\n        pca = pca_x.fit_transform(np.array(X_scaled))\r\n        pca_test=[]\r\n        if has_test_set:\r\n            x_test = np.array(x_test)\r\n            x_test_scaled= scaler.transform(x_test) \r\n            pca_test = pca_x.fit_transform(np.array(x_test_scaled))\r\n        ccircle = []\r\n        eucl_dist = []\r\n        for i,j in enumerate(x_train.T):\r\n            corr1 = np.corrcoef(j,pca[:,0])[0,1]\r\n            corr2 = np.corrcoef(j,pca[:,1])[0,1]\r\n            ccircle.append((corr1, corr2))\r\n            eucl_dist.append(np.sqrt(corr1**2 + corr2**2))\r\n        (pca,np.arange(1, len(pca_x.explained_variance_ratio_) + 1), pca_x.explained_variance_ratio_,ccircle,eucl_dist,pca_test)\r\n    `;\r\n        try {\r\n            const { results, error } = await asyncRun(script, this.context);\r\n            if (results) {\r\n                return results;\r\n            } else if (error) {\r\n                throw Error(\"Faced errot fitting PCA\")\r\n            }\r\n        } catch (e) {\r\n            throw Error(\"Failed to fit PCA\")\r\n        }\r\n    }\r\n\r\n}\r\n","/* eslint-disable no-undef */\r\nimport { asyncRun } from \"./py-worker\";\r\nimport { MinMaxScaler, StandardScaler, LabelEncoder, getDummies } from 'danfojs/dist/danfojs-base';\r\nimport { FeatureCategories } from '../helpers/settings'\r\n\r\nimport * as Papa from 'papaparse';\r\nasync function parseCsv(data) {\r\n    return new Promise(resolve => {\r\n        data = data.map((row) => {\r\n            return Object.keys(row).sort().map(key => parseFloat(row[key]));\r\n        });\r\n        resolve(data);\r\n    });\r\n}\r\n\r\n/**\r\n * Downloads and returns the csv.\r\n *\r\n * @param {string} filename Name of file to be loaded.\r\n *\r\n * @returns {Promise.Array<number[]>} Resolves to parsed csv data.\r\n */\r\nexport async function loadCsv(filename) {\r\n    return new Promise(resolve => {\r\n        const url = `${BASE_URL}${filename}.csv`;\r\n\r\n        Papa.parse(url, {\r\n            download: true,\r\n            header: true,\r\n            complete: (results) => {\r\n                resolve(parseCsv(results['data']));\r\n            }\r\n        })\r\n    });\r\n}\r\n\r\n/**\r\n * Shuffles data and label using Fisher-Yates algorithm.\r\n */\r\nexport async function shuffle(data, label) {\r\n    let counter = data.length;\r\n    let temp = 0;\r\n    let index = 0;\r\n    while (counter > 0) {\r\n        index = (Math.random() * counter) | 0;\r\n        counter--;\r\n        // data:\r\n        temp = data[counter];\r\n        data[counter] = data[index];\r\n        data[index] = temp;\r\n        // label:\r\n        temp = label[counter];\r\n        label[counter] = label[index];\r\n        label[index] = temp;\r\n    }\r\n}\r\n\r\n/**\r\n * Calculate the arithmetic mean of a vector.\r\n *\r\n * @param {Array} vector The vector represented as an Array of Numbers.\r\n *\r\n * @returns {number} The arithmetic mean.\r\n */\r\nfunction mean(vector) {\r\n    let sum = 0;\r\n    for (const x of vector) {\r\n        sum += x;\r\n    }\r\n    return sum / vector.length;\r\n}\r\n\r\n/**\r\n * Calculate the standard deviation of a vector.\r\n *\r\n * @param {Array} vector The vector represented as an Array of Numbers.\r\n *\r\n * @returns {number} The standard deviation.\r\n */\r\nfunction stddev(vector) {\r\n    let squareSum = 0;\r\n    const vectorMean = mean(vector);\r\n    for (const x of vector) {\r\n        squareSum += (x - vectorMean) * (x - vectorMean);\r\n    }\r\n    return Math.sqrt(squareSum / (vector.length - 1));\r\n}\r\n\r\n/**\r\n * Normalize a vector by its mean and standard deviation.\r\n *\r\n * @param {Array} vector Vector to be normalized.\r\n * @param {number} vectorMean Mean to be used.\r\n * @param {number} vectorStddev Standard Deviation to be used.\r\n *\r\n * @returns {Array} Normalized vector.\r\n */\r\nconst normalizeVector = (vector, vectorMean, vectorStddev) => {\r\n    return vector.map(x => (x - vectorMean) / vectorStddev);\r\n};\r\n\r\n/**\r\n * Normalizes the dataset\r\n *\r\n * @param {Array} dataset Dataset to be normalized.\r\n * @param {boolean} isTrainData Whether it is training data or not.\r\n * @param {Array} vectorMeans Mean of each column of dataset.\r\n * @param {Array} vectorStddevs Standard deviation of each column of dataset.\r\n *\r\n * @returns {Object} Contains normalized dataset, mean of each vector column,\r\n *                   standard deviation of each vector column.\r\n */\r\nexport function normalizeDataset(\r\n    dataset, isTrainData = true, vectorMeans = [], vectorStddevs = []) {\r\n    const numFeatures = dataset[0].length;\r\n    let vectorMean;\r\n    let vectorStddev;\r\n\r\n    for (let i = 0; i < numFeatures; i++) {\r\n        const vector = dataset.map(row => row[i]);\r\n\r\n        if (isTrainData) {\r\n            vectorMean = mean(vector);\r\n            vectorStddev = stddev(vector);\r\n\r\n            vectorMeans.push(vectorMean);\r\n            vectorStddevs.push(vectorStddev);\r\n        } else {\r\n            vectorMean = vectorMeans[i];\r\n            vectorStddev = vectorStddevs[i];\r\n        }\r\n\r\n        const vectorNormalized =\r\n            normalizeVector(vector, vectorMean, vectorStddev);\r\n\r\n        vectorNormalized.forEach((value, index) => {\r\n            dataset[index][i] = value;\r\n        });\r\n    }\r\n\r\n    return { dataset, vectorMeans, vectorStddevs };\r\n}\r\n\r\n/**\r\n * Binarizes a tensor based on threshold of 0.5.\r\n *\r\n * @param {tf.Tensor} y Tensor to be binarized.\r\n * @param {number} threshold (default: 0.5).\r\n * @returns {tf.Tensor} Binarized tensor.\r\n */\r\nexport function binarize(y, threshold) {\r\n    if (threshold == null) {\r\n        threshold = 0.5;\r\n    }\r\n    tf.util.assert(\r\n        threshold >= 0 && threshold <= 1,\r\n        `Expected threshold to be >=0 and <=1, but got ${threshold}`);\r\n\r\n    return tf.tidy(() => {\r\n        const condition = y.greater(tf.scalar(threshold));\r\n        return tf.where(condition, tf.onesLike(y), tf.zerosLike(y));\r\n    });\r\n}\r\nexport function encode_name(key) {\r\n    let str_encoded = key.replace(/\\s/g, '').replace(/[^\\w-]/g, '_');\r\n    return str_encoded\r\n}\r\nexport function calculatePrecision(classIndex, confusionMatrix) {\r\n    let truePositive = confusionMatrix[classIndex][classIndex];\r\n    let falsePositive = 0;\r\n\r\n    for (let i = 0; i < confusionMatrix.length; i++) {\r\n        if (i !== classIndex) {\r\n            falsePositive += confusionMatrix[i][classIndex];\r\n        }\r\n    }\r\n\r\n    if (truePositive === 0 && falsePositive === 0) {\r\n        return 1;\r\n    }\r\n\r\n    return truePositive / (truePositive + falsePositive);\r\n}\r\n\r\nexport function calculateRecall(classIndex, confusionMatrix) {\r\n    let truePositive = confusionMatrix[classIndex][classIndex];\r\n    let falseNegative = 0;\r\n    for (let i = 0; i < confusionMatrix.length; i++) {\r\n        falseNegative += confusionMatrix[classIndex][i];\r\n    }\r\n    falseNegative -= truePositive;\r\n    if (truePositive === 0 && falseNegative === 0) {\r\n        return 1;\r\n    }\r\n    return truePositive / (truePositive + falseNegative);\r\n}\r\n\r\n\r\nexport function calculateF1Score(classIndex, confusionMatrix) {\r\n    const precision = calculatePrecision(classIndex, confusionMatrix);\r\n    const recall = calculateRecall(classIndex, confusionMatrix);\r\n    return (2 * precision * recall) / (precision + recall);\r\n}\r\n\r\nexport async function metrics(y, y_pred, labels) {\r\n    const context = {\r\n        y: y,\r\n        y_pred: y_pred,\r\n        labels: labels\r\n    };\r\n    const script = `\r\n        from sklearn.metrics import precision_recall_fscore_support, classification_report, f1_score,accuracy_score\r\n        from js import y_pred,y,labels       \r\n        from sklearn.metrics import recall_score,precision_score\r\n\r\n        precision = precision_score(y, y_pred, average=None,labels=labels)\r\n        recall = recall_score(y, y_pred, average=None,labels=labels)\r\n        f1_micro = f1_score(y, y_pred, average='micro')\r\n        f1_macro = f1_score(y, y_pred, average='macro')\r\n        accuracy = accuracy_score(y, y_pred)\r\n        (precision,recall,f1_micro,f1_macro,accuracy)\r\n    `;\r\n    try {\r\n        const { results, error } = await asyncRun(script, context);\r\n        if (results) {\r\n            return {\r\n                precision: results[0],\r\n                recall: results[1],\r\n                f1_micro: results[2],\r\n                f1_macro: results[3],\r\n                accuracy: results[4],\r\n\r\n            }\r\n        } else if (error) {\r\n            throw error\r\n        }\r\n    } catch (e) {\r\n        throw (\"Something went wrong\", e)\r\n    }\r\n}\r\nexport function calculateRSquared(actual, predicted) {\r\n    const meanActual = mean_array(actual);\r\n    const totalSumOfSquares = actual.reduce((acc, val) => acc + Math.pow(val - meanActual, 2), 0);\r\n    const residualSumOfSquares = actual.reduce((acc, val, index) => acc + Math.pow(val - predicted[index], 2), 0);\r\n    return 1 - (residualSumOfSquares / totalSumOfSquares);\r\n}\r\nexport function calculateMSE(actualValues, predictedValues) {\r\n    if (actualValues.length !== predictedValues.length) {\r\n        throw new Error(\"The lengths of actual values and predicted values must be the same.\");\r\n    }\r\n\r\n    const n = actualValues.length;\r\n    let sumSquaredError = 0;\r\n\r\n    for (let i = 0; i < n; i++) {\r\n        const squaredError = Math.pow(actualValues[i] - predictedValues[i], 2);\r\n        sumSquaredError += squaredError;\r\n    }\r\n\r\n    const meanSquaredError = sumSquaredError / n;\r\n    return meanSquaredError;\r\n}\r\nfunction mean_array(array) {\r\n    return array.reduce((acc, val) => acc + val, 0) / array.length;\r\n}\r\nexport function evaluate_classification(predictions, y_test, encoder) {\r\n    console.assert(predictions.length === y_test.length, \"predictions and test should have the same length.\")\r\n    let missclassification_indexes = []\r\n    let missclassification_preds = []\r\n    let currect_classifications_sum = 0\r\n    y_test.forEach((element, i) => {\r\n        if (element === predictions[i]) {\r\n            currect_classifications_sum++\r\n        } else {\r\n            missclassification_indexes.push(i)\r\n            let label = [predictions[i]]\r\n            let result = encoder.inverseTransform(label)\r\n            missclassification_preds.push(result[0])\r\n\r\n        }\r\n    });\r\n    return {\r\n        accuracy: Number((currect_classifications_sum / predictions.length) * 100),\r\n        indexes: missclassification_indexes,\r\n        mispredictions: missclassification_preds\r\n    }\r\n}\r\nexport function scale_data(dataset, column, normalization_type) {\r\n    try {\r\n\r\n\r\n        switch (normalization_type) {\r\n            case \"0\":\r\n                {\r\n                    break;\r\n                }\r\n            case \"1\":\r\n                {\r\n                    let scaler = new MinMaxScaler()\r\n                    scaler.fit(dataset[column])\r\n                    dataset.addColumn(column, scaler.transform(dataset[column]), { inplace: true })\r\n                    break;\r\n                }\r\n            case \"2\":\r\n                dataset.addColumn(column, dataset[column].apply((x) => x * x), { inplace: true })\r\n                break;\r\n            case \"3\":\r\n                dataset.addColumn(column, dataset[column].apply((x) => {\r\n                    let ln = Math.log(x);\r\n                    if (isNaN(ln)) {\r\n                        throw new Error('falied at data transformation.');\r\n                    }\r\n                    return Math.log(x)\r\n                }\r\n                ), { inplace: true })\r\n                break;\r\n            case \"4\":\r\n                {\r\n                    let scaler = new StandardScaler()\r\n                    scaler.fit(dataset[column])\r\n                    dataset.addColumn(column, scaler.transform(dataset[column]), { inplace: true })\r\n                    break;\r\n                }\r\n            default:\r\n                break;\r\n        }\r\n    } catch (error) {\r\n        throw new Error('falied at data transformation.')\r\n    }\r\n}\r\nexport function applyDataTransformation(dataset, column_names, transformations) {\r\n    for (let i = 0; i < column_names.length; i++) {\r\n        const column = column_names[i];\r\n        let transformation = transformations.find(transformation => transformation.name === column)\r\n        if (transformation) {\r\n            scale_data(dataset, column, transformation.scaler.toString())\r\n        }\r\n    }\r\n    return dataset\r\n}\r\nexport function handle_missing_values(data_frame, impute = false) {\r\n    // to do normalization\r\n    if (impute) {\r\n        let string_columns = []\r\n        let numeric_columns = []\r\n        let string_column_modes = []\r\n        let numeric_column_means = []\r\n        data_frame.columns.forEach((item) => {\r\n            if (data_frame.column(item)?.dtype === 'string') {\r\n                string_columns.push(item)\r\n            } else {\r\n                numeric_columns.push(item)\r\n            }\r\n        })\r\n        string_columns.forEach(element => {\r\n            let mode = getCategoricalMode(data_frame.column(element).values).mode\r\n            string_column_modes.push(mode)\r\n        });\r\n        numeric_columns.forEach(element => {\r\n            let mean = data_frame.column(element).mean()\r\n            numeric_column_means.push(mean)\r\n        });\r\n        data_frame = data_frame.fillNa(string_column_modes, { columns: string_columns })\r\n        data_frame = data_frame.fillNa(numeric_column_means, { columns: numeric_columns })\r\n    } else {\r\n        data_frame.dropNa({ axis: 1, inplace: true })\r\n    }\r\n    return data_frame\r\n}\r\nexport function getCategoricalMode(arr) {\r\n    if (arr.length === 0) {\r\n        return null;\r\n    }\r\n\r\n    const categoryCount = {};\r\n    categoryCount['total'] = 0\r\n    categoryCount['mode'] = ''\r\n    for (let i = 0; i < arr.length; i++) {\r\n        const category = arr[i];\r\n        if (category === null || category === undefined) {\r\n            continue\r\n        }\r\n        categoryCount['total']++\r\n        if (category in categoryCount) {\r\n            categoryCount[category]++;\r\n        } else {\r\n            categoryCount[category] = 1;\r\n        }\r\n    }\r\n\r\n    let modeCategory = null;\r\n    let modeCount = 0;\r\n    for (const category in categoryCount) {\r\n        if (category === 'total') {\r\n            continue\r\n        }\r\n        if (categoryCount[category] > modeCount) {\r\n            modeCategory = category;\r\n            modeCount = categoryCount[category];\r\n        }\r\n    }\r\n    categoryCount['mode'] = modeCategory;\r\n    return categoryCount;\r\n}\r\nexport function encode_dataset(data_frame, columns_types) {\r\n    let df = data_frame.copy()\r\n\r\n    let categorical_columns = columns_types.filter(column => column.type === FeatureCategories.Nominal.id || column.type === FeatureCategories.Ordinal.id)\r\n    let categoriclaFeaturesAfterEncoding = []\r\n    categorical_columns.forEach((column) => {\r\n        if (column.type === FeatureCategories.Ordinal.id) {\r\n            let encoder = new LabelEncoder()\r\n            encoder.fit(df[column.name])\r\n            let encoded_column = encoder.transform(df[column.name])\r\n            df.addColumn(column.name, encoded_column.values, { inplace: true })\r\n            categoriclaFeaturesAfterEncoding.push(column.name)\r\n        } else {\r\n            df = getDummies(df, { columns: [column.name] })\r\n            df.drop({ columns: [df.columns.find(m => m.includes(column.name + \"_\"))], inplace: true });\r\n            categoriclaFeaturesAfterEncoding.push(...df.columns.filter(m => m.includes(column.name + \"_\")))\r\n\r\n        }\r\n    })\r\n    return [df, categoriclaFeaturesAfterEncoding]\r\n}\r\n\r\nexport function merge_classes(classes, dataframe) {\r\n    let newClass = classes.map(m => m.class).join('-');\r\n    classes.forEach(cls => {\r\n        dataframe.replace(cls.class, newClass, { columns: [this.settings.modelTarget], inplace: true })\r\n    });\r\n    let message = { message: 'merged classes: ' + newClass, type: 'info' }\r\n    this.$buefy.toast.open('merged classes: ' + newClass)\r\n    this.settings.addMessage(message)\r\n}\r\n\r\n","/* eslint-disable no-unused-vars */\r\n/* eslint-disable no-undef */\r\nimport Plotly from 'danfojs/node_modules/plotly.js-dist-min';\r\nimport PCA from './dimensionality-reduction/pca';\r\nimport { binarize } from './utils'\r\nimport * as ss from \"simple-statistics\"\r\nimport { schemeTableau10, interpolateBlues, interpolateRainbow } from 'd3-scale-chromatic';\r\nimport { FeatureCategories } from \"./settings\";\r\nimport { metrics as ClassificationMetric, encode_name } from './utils.js';\r\nimport { metrics } from '@tensorflow/tfjs-vis';\r\nimport { scale_data } from './utils';\r\nimport { tensorflow, LabelEncoder } from 'danfojs/dist/danfojs-base';\r\nimport { MinMaxScaler } from 'danfojs/dist/danfojs-base';\r\nconst plotlyImageExportConfig = {\r\n    toImageButtonOptions: {\r\n        format: 'png', // one of png, svg, jpeg, webp\r\n        height: null,\r\n        width: null,\r\n        scale: 2\r\n    }\r\n};\r\nexport default class ChartController {\r\n    constructor() {\r\n        this.color_scheme = schemeTableau10;\r\n        this.color_scheme_sequential = interpolateRainbow;\r\n\r\n    }\r\n\r\n    // eslint-disable-next-line no-unused-vars\r\n    classification_target_chart(values, labels, name, container, title = \"\") {\r\n        var uniqueLabels = [...new Set(labels)];\r\n        var colorIndices = labels.map(label => this.indexToColor(uniqueLabels.indexOf(label)));\r\n        var data = [];\r\n        data.push({\r\n            name: \"Count\",\r\n            data: values.map((item, i) => ({ y: item, color: colorIndices[i] }))\r\n        })\r\n\r\n        Highcharts.chart(container, {\r\n            credits: {\r\n                enabled: false\r\n            },\r\n            title: {\r\n                text: \"\"\r\n            },\r\n            chart: {\r\n                type: 'column'\r\n            },\r\n            xAxis: {\r\n                categories: uniqueLabels,\r\n            },\r\n            yAxis: {\r\n                min: 0,\r\n            },\r\n            plotOptions: {\r\n                column: {\r\n                    pointPadding: 0.1,\r\n                    borderWidth: 0\r\n                }\r\n            },\r\n            colors: colorIndices,\r\n            series: data\r\n        });\r\n    }\r\n    regression_target_chart(items, container, name) {\r\n        let kde_data = [];\r\n        let ys = [];\r\n        let items_range = items\r\n        var breaks = ss.equalIntervalBreaks(items_range, 100);\r\n        let kde = ss.kernelDensityEstimation(items, 'gaussian', 'nrd');\r\n        breaks.forEach((item) => {\r\n            ys.push(kde(item, 'nrd'));\r\n            kde_data.push([item, ys[ys.length - 1]]);\r\n        });\r\n\r\n\r\n        Highcharts.chart(container, {\r\n            credits: {\r\n                enabled: false\r\n            },\r\n            legend: {\r\n                enabled: false,\r\n                verticalAlign: 'top',\r\n            },\r\n            chart: {\r\n                height: '300',\r\n                type: \"spline\",\r\n                animation: true,\r\n            },\r\n            title: {\r\n                text: name // Assuming `column` is defined elsewhere\r\n            },\r\n            yAxis: {\r\n                title: { text: null }\r\n            },\r\n            tooltip: {\r\n                valueDecimals: 3\r\n            },\r\n            plotOptions: {\r\n                series: {\r\n                    marker: {\r\n                        enabled: false\r\n                    },\r\n                    dashStyle: \"shortdot\",\r\n                    area: true\r\n                }\r\n            },\r\n            series: [{\r\n                type: 'area',\r\n                dashStyle: \"solid\",\r\n                lineWidth: 2,\r\n                data: kde_data\r\n            }]\r\n        });\r\n    }\r\n    draw_categorical_barplot(column_values, target, title) {\r\n        const key = title + \"- barplot\";\r\n        $(\"#categories_barplots\").append(`<div class=\"column is-4\" style=\"height:40vh;\" id=\"${key}\"></div>`)\r\n        const countOccurrences = column_values.reduce((acc, val) => {\r\n            acc[val] = (acc[val] || 0) + 1;\r\n            return acc;\r\n        }, {});\r\n        const countArray = Object.entries(countOccurrences).map(([value, count]) => ({ value: value, count }));\r\n        countArray.sort((a, b) => b.count - a.count);\r\n        const top5 = countArray.slice(0, 5);\r\n        new Highcharts.Chart({\r\n            chart: {\r\n                renderTo: key,\r\n                type: 'column'\r\n            },\r\n            xAxis: {\r\n                categories: top5.map(m => m.value),\r\n            },\r\n            title: {\r\n                text: title\r\n            },\r\n            yAxis: {\r\n                min: 0,\r\n                labels: {\r\n                    overflow: 'justify'\r\n                }\r\n            },\r\n            credits: {\r\n                enabled: false\r\n            },\r\n            plotOptions: {\r\n                bar: {\r\n                    dataLabels: {\r\n                        enabled: true\r\n                    }\r\n                }\r\n            },\r\n            series: [{\r\n                showInLegend: false,\r\n                name: title,\r\n                data: top5.map(m => m.count)\r\n            }]\r\n        });\r\n\r\n    }\r\n    roc_chart(container, true_positive_rates, false_positive_rates) {\r\n        var trace = {\r\n            x: false_positive_rates,\r\n            y: true_positive_rates,\r\n            type: 'scatter',\r\n            mode: 'lines',\r\n            name: 'ROC Curve',\r\n        };\r\n        var trace2 = {\r\n            x: [0, 1],\r\n            y: [0, 1],\r\n            type: 'scatter',\r\n            name: 'diagonal',\r\n        };\r\n        var layout = {\r\n            showlegend: false,\r\n            title: 'ROC Curve',\r\n            xaxis: { title: 'False Positive Rate' },\r\n            yaxis: { title: 'True Positive Rate' },\r\n        };\r\n\r\n        var data = [trace, trace2];\r\n\r\n        Plotly.newPlot(container, data, layout);\r\n    }\r\n    falsePositives(yTrue, yPred) {\r\n        return tf.tidy(() => {\r\n            const one = tf.scalar(1);\r\n            const zero = tf.scalar(0);\r\n            return tf.logicalAnd(yTrue.equal(zero), yPred.equal(one))\r\n                .sum()\r\n                .cast('float32');\r\n        });\r\n    }\r\n    indexToColor(index, max) {\r\n        return this.color_scheme_sequential((index + 1) / max);\r\n    }\r\n    indexToColorSequential(value, min, max) {\r\n        let normalizer_value = (value - min) / (max - min)\r\n        return this.color_scheme_sequential(normalizer_value);\r\n    }\r\n    reshape(array, shape) {\r\n        if (shape.length === 0) return array[0];\r\n\r\n        const [size, ...restShape] = shape;\r\n        const result = [];\r\n        const restSize = restShape.reduce((a, b) => a * b, 1);\r\n        console.log(restSize);\r\n\r\n        for (let i = 0; i < size; i++) {\r\n            result.push(this.reshape(array.slice(i * restSize, (i + 1) * restSize), restShape));\r\n        }\r\n\r\n        return result;\r\n    }\r\n    async plot_tsne(data, labels, regression_labels, iterations) {\r\n        document.getElementById(\"dimensionality_reduction_panel_tsne\").style.display = \"block\"\r\n        console.assert(Array.isArray(data));\r\n        // Create some data\r\n        // const items = tf.randomUniform([2000, 10]);\r\n\r\n        // Get a tsne optimizer\r\n        const tsneOpt = tsne.tsne(tensorflow.tensor2d(data));\r\n\r\n        // Compute a T-SNE embedding, returns a promise.\r\n        // Runs for 1000 iterations by default.\r\n        await tsneOpt.compute(iterations);\r\n        // tsne.coordinate returns a *tensor* with x, y coordinates of\r\n        // the embedded data.\r\n        const coordinates = tsneOpt.coordinates();\r\n        // let model = new TSNE();\r\n        // var Y = await model.train(data)\r\n        const items = coordinates.dataSync()\r\n        const Y = this.reshape(items, coordinates.shape)\r\n        let x = []\r\n        let traces = []\r\n        if (labels.length > 0) {\r\n            labels = labels.flat()\r\n            var uniqueLabels = [...new Set(labels)];\r\n            let points_labled = Y.map(function (item, i) {\r\n                return {\r\n                    label: labels[i],\r\n                    'x': item[0],\r\n                    'y': item[1]\r\n                }\r\n            }\r\n            )\r\n            uniqueLabels.forEach((label, i) => {\r\n                var items_for_label = points_labled.filter(m => m.label === label)\r\n                traces.push({\r\n                    x: items_for_label.map(m => m.x),\r\n                    y: items_for_label.map(m => m.y),\r\n                    mode: 'markers',\r\n                    type: 'scatter',\r\n                    name: label,\r\n                    marker: {\r\n                        size: 4,\r\n                        color: this.indexToColor(i, uniqueLabels.length),\r\n                    }\r\n                })\r\n            })\r\n        } else {\r\n            let points = Y.map(function (item, i) {\r\n                x.push(regression_labels[i][0])\r\n                return {\r\n                    'x': item[0],\r\n                    'y': item[1]\r\n                }\r\n            })\r\n            let min = Math.min(...x);\r\n            let max = Math.max(...x);\r\n\r\n            traces.push({\r\n                x: x,\r\n                y: points.map(m => m.y),\r\n                mode: 'markers+text',\r\n                type: 'scatter',\r\n                marker: {\r\n                    size: 4,\r\n                    color: x.map(item => this.indexToColorSequential(item, min, max)),\r\n                },\r\n            })\r\n\r\n        }\r\n\r\n        var layout = {\r\n            showlegend: labels.length > 0 ? true : false,\r\n            margin: {\r\n                l: 50,\r\n                r: 40,\r\n                b: 50,\r\n                t: 40,\r\n                pad: 20\r\n            },\r\n            xaxis: {\r\n                linecolor: 'black',\r\n                linewidth: 1,\r\n                mirror: true,\r\n                zeroline: false,\r\n\r\n            },\r\n            yaxis: {\r\n                linecolor: 'black',\r\n                linewidth: 1,\r\n                zeroline: false,\r\n                mirror: true,\r\n            },\r\n            legend: {\r\n                x: 1,\r\n                xanchor: 'right',\r\n                y: 1\r\n            },\r\n        };\r\n        Plotly.newPlot('tsne', traces, layout, { responsive: true, modeBarButtonsToRemove: ['resetScale2d', 'select2d', 'resetViews', 'sendDataToCloud', 'hoverCompareCartesian', 'lasso2d', 'drawopenpath '] });\r\n\r\n    }\r\n    trueNegatives(yTrue, yPred) {\r\n        return tf.tidy(() => {\r\n            const zero = tf.scalar(0);\r\n            return tf.logicalAnd(yTrue.equal(zero), yPred.equal(zero))\r\n                .sum()\r\n                .cast('float32');\r\n        });\r\n    }\r\n\r\n    // TODO(cais): Use tf.metrics.falsePositiveRate when available.\r\n    falsePositiveRate(yTrue, yPred) {\r\n        return tf.tidy(() => {\r\n            const fp = this.falsePositives(yTrue, yPred);\r\n            const tn = this.trueNegatives(yTrue, yPred);\r\n            return fp.div(fp.add(tn));\r\n        });\r\n    }\r\n    drawROC(targets, probs) {\r\n\r\n        return tf.tidy(() => {\r\n            const thresholds = [\r\n                0.0, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55,\r\n                0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.92, 0.94, 0.96, 0.98, 1.0\r\n            ];\r\n            const tprs = [];  // True positive rates.\r\n            const fprs = [];  // False positive rates.\r\n            let area = 0;\r\n            for (let i = 0; i < thresholds.length; ++i) {\r\n                const threshold = thresholds[i];\r\n                const threshPredictions = binarize(probs, threshold).as1D();\r\n\r\n                const fpr = this.falsePositiveRate(targets, threshPredictions).dataSync()[0];\r\n                const tpr = tf.metrics.recall(targets, threshPredictions).dataSync()[0];\r\n\r\n                fprs.push(fpr);\r\n                tprs.push(tpr);\r\n                // Accumulate to area for AUC calculation.\r\n                if (i > 0) {\r\n                    area += (tprs[i] + tprs[i - 1]) * (fprs[i - 1] - fprs[i]) / 2;\r\n                }\r\n            }\r\n            return [area, fprs, tprs];\r\n        });\r\n    }\r\n    nrd(x) {\r\n        let s = ss.standardDeviation(x);\r\n        const iqr = ss.interquartileRange(x);\r\n        if (typeof iqr === \"number\") {\r\n            s = Math.min(s, iqr / 1.34);\r\n        }\r\n        return 1.06 * s * Math.pow(x.length, -0.2);\r\n    }\r\n    hexToRgb(hex) {\r\n        var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n        return result ? {\r\n            r: parseInt(result[1], 16),\r\n            g: parseInt(result[2], 16),\r\n            b: parseInt(result[3], 16),\r\n            a: 0.5\r\n        } : null;\r\n    }\r\n    kernelFunctions = {\r\n        gaussian: function (u) {\r\n            return Math.exp(-0.5 * u * u) / Math.sqrt(2 * Math.PI);\r\n        },\r\n        uniform: function (x) {\r\n            return Math.abs(x) <= 1 ? 0.5 : 0;\r\n        },\r\n        triangular: function (x) {\r\n            return Math.abs(x) <= 1 ? 1 - Math.abs(x) : 0;\r\n        },\r\n        biweight: function (x) {\r\n            return Math.abs(x) <= 1 ? 15 / 16 * Math.pow(1 - x * x, 2) : 0;\r\n        },\r\n        triweight: function (x) {\r\n            return Math.abs(x) <= 1 ? 35 / 32 * Math.pow(1 - x * x, 3) : 0;\r\n        },\r\n        Epanechnikov: function (x) {\r\n            return Math.abs(x) <= 1 ? 0.75 * (1 - x * x) : 0;\r\n        }\r\n    };\r\n\r\n    draw_kde(dataset, column, target_name, bandwidth = \"nrd\", is_classification = false, redrawing = false) {\r\n        try {\r\n\r\n\r\n            let items = dataset.column(column).values;\r\n            let default_bandwidth = this.nrd(items).toFixed(2);\r\n            let raw_values = dataset.loc({ columns: [column, target_name] });\r\n            let uniqueLabels = [...new Set(raw_values.column(target_name).values)];\r\n            if (uniqueLabels.length === 2) {\r\n                uniqueLabels.sort()\r\n            }\r\n            let column_values = raw_values.values;\r\n            let subsets = [];\r\n            var colorIndices = uniqueLabels.map(label => this.indexToColor(uniqueLabels.indexOf(label), uniqueLabels.legend));\r\n            if (!is_classification) {\r\n                subsets.push(dataset[column].values);\r\n            } else {\r\n                for (let i = 0; i < uniqueLabels.length; i++) {\r\n                    const label = uniqueLabels[i];\r\n                    let subset = [];\r\n                    for (let i = 0; i < column_values.length; i++) {\r\n                        const item = column_values[i];\r\n                        if (item[1] === label) {\r\n                            subset.push(item[0])\r\n                        }\r\n                    }\r\n                    subsets.push(subset);\r\n                }\r\n            }\r\n\r\n            document.getElementById(\"kde_panel\").style.display = \"block\";\r\n\r\n            var newColumn = document.createElement(\"div\");\r\n            newColumn.className = \"column is-3\";\r\n            newColumn.setAttribute(\"id\", column + '-kde-plot');\r\n            if (!redrawing) {\r\n                let key = encode_name(column)\r\n\r\n                $(\"#container\").append(\r\n                    `<div class=\"column is-4 is-size-6-tablet my-1\">\r\n                <div class=\"columns is-multiline\">\r\n                <div class=\"column is-12\" >\r\n                    <div id=\"${key + '-kde-plot'}\"> </div>\r\n                    <div id=\"${key + '-boxplot'}\" style=\"height:20vh;width: 100%\">\r\n                    </div>\r\n                    <div class=\"field has-addons has-addons-centered my-1\">\r\n                    <div class=\"control\">\r\n                    <span class=\"select is-small\">\r\n                      <select id=\"${key + '-kernel_type'}\">\r\n                      <option value=\"gaussian\">gaussian</option>\r\n                        <option value=\"uniform\">uniform</option>\r\n                        <option value=\"triangular\">triangular</option>\r\n                        <option value=\"biweight\">biweight</option>\r\n                        <option value=\"triweight\">triweight</option>\r\n                        <option value=\"Epanechnikov\">Epanechnikov</option>\r\n                      </select>\r\n                    </span>\r\n                    <p class=\"help is-success\">Kernel</p>\r\n                  </div>\r\n                  <div class=\"control\">\r\n                        <div class=\"select is-small\">\r\n                            <select id=\"${key + '--normal'}\">\r\n                                <option value=\"0\">No</option>\r\n                                <option value=\"1\">Scale</option>\r\n                                <option value=\"2\">x^2</option>\r\n                                <option value=\"3\">ln(x)</option>\r\n                                <option value=\"4\">Standardize </option>\r\n                            </select>\r\n                        </div>\r\n                    <p class=\"help is-success\">Normalization</p>\r\n                    </div>\r\n                        <div class=\"control\">\r\n                            <input class=\"input is-small\" type=\"number\"  min=\"0\" id=\"${key + '-kde'}\" value=\"${default_bandwidth}\">\r\n                            <p class=\"help is-success\">Bandwidth</p>\r\n                        </div>\r\n                        <p class=\"control\">\r\n                            <a class=\"button is-success is-small\" id=\"${key + '-kde-button'}\">\r\n                                Apply\r\n                            </a>\r\n                        </div>\r\n                    </div>\r\n                  </div>\r\n                </div>`\r\n                );\r\n                document.getElementById(key + '--normal').addEventListener('change', function () {\r\n                    const target = document.getElementById(\"target\").value;\r\n                    let is_classification = document.getElementById(target).value !== FeatureCategories.Numerical;\r\n                    let data = dataset.loc({ columns: [column, target] });\r\n                    let normalization_type = document.getElementById(key + '--normal').value\r\n                    scale_data(data, column, normalization_type)\r\n                    data.dropNa({ axis: 1, inplace: true })\r\n                    var newBandwidth = parseFloat(document.getElementById(key + '-kde').value);\r\n                    current_class.draw_kde(data, column, target, newBandwidth, is_classification, true);\r\n                });\r\n            }\r\n            var current_class = this;\r\n            let key = encode_name(column)\r\n\r\n            document.getElementById(key + '-kde-button').addEventListener(\"click\", function () {\r\n                const target = document.getElementById(\"target\").value;\r\n                let is_classification = document.getElementById(target).value !== FeatureCategories.Numerical;\r\n                let data = dataset.loc({ columns: [column, target] });\r\n                let normalization_type = document.getElementById(key + '--normal').value\r\n                scale_data(data, column, normalization_type)\r\n                var newBandwidth = parseFloat(document.getElementById(key + '-kde').value);\r\n                data.dropNa({ axis: 1, inplace: true })\r\n                current_class.draw_kde(data, column, target, newBandwidth, is_classification, true);\r\n            });\r\n            let container_id = key + '-kde-plot';\r\n            let items_range = [...raw_values.column(column).values]\r\n            // let minValue = Math.min(...items_range);\r\n            // let maxValue = Math.max(...items_range);\r\n            // items_range.push(minValue - parseFloat(default_bandwidth))\r\n            // items_range.push(maxValue + parseFloat(default_bandwidth))\r\n            var breaks = ss.equalIntervalBreaks(items_range, 100);\r\n            let allData = [];\r\n            let kernel_type = document.getElementById(key + \"-kernel_type\")?.value ?? \"gaussian\"\r\n            // Loop through subsets to generate data for all subsets\r\n            let traces = []\r\n            let kde;\r\n            if (is_classification) {\r\n                for (let i = 0; i < subsets.length; i++) {\r\n                    if (subsets[i].length > 2) {\r\n                        let ys = [];\r\n                        kde = ss.kernelDensityEstimation(subsets[i], this.kernelFunctions[kernel_type], bandwidth);\r\n                        let data = [];\r\n                        breaks.forEach((item) => {\r\n                            ys.push(kde(item, bandwidth));\r\n                            data.push([item, ys[ys.length - 1]]);\r\n                        });\r\n                        allData.push(data);\r\n                    } else {\r\n                        allData.push([]);\r\n                    }\r\n                    traces.push({\r\n                        name: uniqueLabels[i],\r\n                        x: subsets[i],\r\n                        marker: {\r\n                            color: colorIndices[i]\r\n                        },\r\n                        type: 'box',\r\n                    })\r\n                }\r\n            } else {\r\n                for (let i = 0; i < subsets.length; i++) {\r\n                    if (subsets[i].length > 2) {\r\n                        let ys = [];\r\n                        kde = ss.kernelDensityEstimation(subsets[i], this.kernelFunctions[kernel_type], bandwidth);\r\n                        let data = [];\r\n                        breaks.forEach((item) => {\r\n                            ys.push(kde(item, bandwidth));\r\n                            data.push([item, ys[ys.length - 1]]);\r\n                        });\r\n                        allData.push(data);\r\n                    } else {\r\n                        allData.push([]);\r\n                    }\r\n                }\r\n                traces.push({\r\n                    name: column,\r\n                    x: items,\r\n                    type: 'box',\r\n                })\r\n            }\r\n\r\n            let animationDuration = 4000;\r\n\r\n            var layout = {\r\n\r\n                yaxis: {\r\n                    visible: false,\r\n                },\r\n                showlegend: false,\r\n                margin: {\r\n                    l: 20,\r\n                    r: 10,\r\n                    b: 60,\r\n                    t: 10,\r\n                },\r\n                legend: {\r\n                    x: 1,\r\n                    xanchor: 'right',\r\n                    y: 1\r\n                },\r\n            };\r\n            Plotly.newPlot(key + '-boxplot', traces, layout, { autosize: true, responsive: true, modeBarButtonsToRemove: ['pan', 'resetScale2d', 'select2d', 'resetViews', 'sendDataToCloud', 'hoverCompareCartesian', 'lasso2d', 'drawopenpath '] });\r\n            Highcharts.chart(container_id, {\r\n                credits: {\r\n                    enabled: false\r\n                },\r\n                legend: {\r\n                    enabled: is_classification ? true : false, align: 'right',\r\n                    verticalAlign: 'top',\r\n                },\r\n                chart: {\r\n                    height: '300',\r\n                    type: \"spline\",\r\n                    animation: true,\r\n                },\r\n                title: {\r\n                    text: column // Assuming `column` is defined elsewhere\r\n                },\r\n                yAxis: {\r\n                    title: { text: null }\r\n                },\r\n                tooltip: {\r\n                    valueDecimals: 3\r\n                },\r\n                plotOptions: {\r\n                    series: {\r\n                        marker: {\r\n                            enabled: false\r\n                        },\r\n                        dashStyle: \"shortdot\",\r\n                        color: colorIndices,\r\n                        animation: {\r\n                            duration: animationDuration\r\n                        },\r\n                        area: true\r\n                    }\r\n                },\r\n                series: allData.map((data, index) => ({\r\n                    type: 'area',\r\n                    name: uniqueLabels[index],\r\n                    dashStyle: \"solid\",\r\n                    lineWidth: 2,\r\n                    color: colorIndices[index],\r\n                    data: data\r\n                }))\r\n            });\r\n            window.dispatchEvent(new Event('resize'));\r\n        } catch (error) {\r\n            throw new Error('falied at plotting kde.')\r\n        }\r\n    }\r\n\r\n    async classificationPCA(dataset, labels, missclassifications, uniqueLabels, index, n) {\r\n\r\n        const pca = new PCA();\r\n        var colorIndices = labels.map(label => this.indexToColor(uniqueLabels.indexOf(label), uniqueLabels.length));\r\n        const pca_data = await pca.predict(dataset, n)\r\n        let x = []\r\n        let y = []\r\n        let x_error = []\r\n        let y_error = []\r\n        let error_texts = []\r\n        let real_labels = []\r\n        let missclassificationColors = []\r\n        let truePredsColors = []\r\n        pca_data[0].forEach((element, i) => {\r\n            if (missclassifications['indexes'].includes(i)) {\r\n                let index = missclassifications['indexes'].findIndex(index => index == i)\r\n                error_texts.push(dataset[i].join())\r\n                real_labels.push([labels[i], missclassifications['mispredictions'][index]])\r\n                x_error.push(element[0])\r\n                y_error.push(element[1])\r\n                missclassificationColors.push(colorIndices[i])\r\n            } else {\r\n                x.push(element[0])\r\n                y.push(element[1])\r\n                truePredsColors.push(colorIndices[i])\r\n            }\r\n\r\n        });\r\n        var trace1 = {\r\n            x: x,\r\n            y: y,\r\n            name: 'Predictions',\r\n            text: labels,\r\n            mode: 'markers',\r\n            type: 'scatter',\r\n            marker: {\r\n                size: 4,\r\n                color: truePredsColors,\r\n                symbol: 'circle'\r\n            },\r\n        };\r\n        var trace2 = {\r\n            name: 'Missclassifications',\r\n            x: x_error,\r\n            y: y_error,\r\n            text: error_texts,\r\n            customdata: real_labels,\r\n            mode: 'markers',\r\n            type: 'scatter',\r\n            marker: {\r\n                size: 7,\r\n                color: missclassificationColors,\r\n                symbol: 'cross'\r\n            },\r\n            hovertemplate:\r\n                \"Features : %{text}<br>\" +\r\n                \"True class: %{customdata[0]}<br>\" +\r\n                \"Predited class: %{customdata[1]}\" +\r\n                \"<extra></extra>\"\r\n\r\n        };\r\n        var data = [trace1, trace2];\r\n\r\n        Plotly.newPlot('pca_results_' + index, data, {\r\n            title: {\r\n                text: 'Principle Component Analysis of Predictions'\r\n            },\r\n            hovermode: \"closest\",\r\n            hoverlabel: { bgcolor: \"#FFF\" },\r\n            showlegend: true,\r\n            legend: {\r\n                x: 1,\r\n                xanchor: 'right',\r\n                y: 1,\r\n                bgcolor: 'rgba(0,0,0,0)',\r\n\r\n            },\r\n            xaxis: {\r\n                linecolor: 'black',\r\n                linewidth: 1,\r\n                mirror: true,\r\n                title: 'PC1'\r\n            },\r\n            yaxis: {\r\n                linecolor: 'black',\r\n                linewidth: 1,\r\n                mirror: true,\r\n                title: 'PC2'\r\n            }\r\n        }, { ...plotlyImageExportConfig, staticPlot: false, responsive: true, modeBarButtonsToRemove: ['resetScale2d', 'select2d', 'resetViews', 'sendDataToCloud', 'hoverCompareCartesian', 'lasso2d', 'drawopenpath '] });\r\n\r\n    }\r\n    purge_charts(id) {\r\n        Plotly.purge(id)\r\n    }\r\n    async draw_pca(dataset, labels, regression_labels, numberOfComponents, axes, columns, drawScreePlot = false) {\r\n        const pca = new PCA();\r\n\r\n        labels = labels.flat()\r\n        var uniqueLabels = [...new Set(labels)];\r\n\r\n        const [pca_data, _, explained_variances, circels, distances] = await pca.predict(dataset, numberOfComponents)\r\n\r\n        let x = []\r\n        for (let i = 0; i < axes.length; i++) {\r\n            let principle_components = []\r\n            let axis = axes[i]\r\n            pca_data.forEach((element, i) => {\r\n                principle_components.push({\r\n                    x: element[axis[0] - 1],\r\n                    y: element[axis[1] - 1],\r\n                    label: labels[i]\r\n                })\r\n                x.push(regression_labels[i][0])\r\n            });\r\n            let traces1 = []\r\n            if (uniqueLabels.length !== 0) {\r\n                uniqueLabels.forEach((label, i) => {\r\n                    var items_for_label = principle_components.filter(m => m.label === label)\r\n                    traces1.push({\r\n                        x: items_for_label.map(m => m.x),\r\n                        y: items_for_label.map(m => m.y),\r\n                        mode: 'markers',\r\n                        type: 'scatter',\r\n                        name: label,\r\n                        marker: {\r\n                            size: 4,\r\n                            color: this.indexToColor(i, uniqueLabels.length),\r\n                        }\r\n                    })\r\n                })\r\n            } else {\r\n                let x = principle_components.map(m => m.x);\r\n                let y = principle_components.map(m => m.y);\r\n                let max = Math.max(...x)\r\n                let min = Math.min(...x)\r\n                traces1.push({\r\n                    x: x,\r\n                    y: y,\r\n                    mode: 'markers',\r\n                    type: 'scatter',\r\n                    marker: {\r\n                        color: x.map(item => this.indexToColorSequential(item, min, max)),\r\n                        size: 2,\r\n                    },\r\n\r\n                })\r\n            }\r\n\r\n\r\n            Plotly.newPlot('pca_' + i, traces1, {\r\n                showlegend: uniqueLabels.length != 0 ? true : false,\r\n                margin: {\r\n                    l: 40,\r\n                    r: 40,\r\n                    b: 40,\r\n                    t: 40,\r\n                    pad: 10\r\n                },\r\n                legend: {\r\n                    x: 1,\r\n                    xanchor: 'right',\r\n                    y: 1,\r\n                    bgcolor: 'rgba(0,0,0,0)',\r\n\r\n                },\r\n                xaxis: {\r\n                    linecolor: 'black',\r\n                    linewidth: 1,\r\n                    mirror: true,\r\n                    title: 'PC' + axis[0]\r\n                },\r\n                yaxis: {\r\n                    linecolor: 'black',\r\n                    linewidth: 1,\r\n                    mirror: true,\r\n                    title: 'PC' + axis[1]\r\n                }\r\n            }, { ...plotlyImageExportConfig, responsive: true, staticPlot: true });\r\n\r\n        }\r\n        let arrows = [];\r\n        let shapes = []\r\n\r\n        distances.forEach((distance, i) => {\r\n            arrows.push({\r\n                axref: 'x',\r\n                x: 0,\r\n                ayref: 'y',\r\n                y: 0,\r\n                arrowside: 'start',\r\n                arrowcolor: this.indexToColor(i, distances.length),\r\n                font: {\r\n                    color: \"black\",\r\n                    size: 8\r\n                },\r\n                xanchor: 'left',   // Align text properly\r\n                yanchor: 'top', // Align text properly\r\n                arrowwidth: 1.2,\r\n                arrowhead: 5,\r\n                text: columns[i],\r\n                hovertext: columns[i] + `(${circels[i][0].toFixed(2)},${circels[i][1].toFixed(2)})`,\r\n                ax: circels[i][0],\r\n                ay: circels[i][1],\r\n            });\r\n        })\r\n        shapes = [\r\n            {\r\n                type: 'circle',\r\n                xref: 'x',\r\n                yref: 'y',\r\n                x0: -1,\r\n                y0: -1,\r\n                x1: 1,\r\n                y1: 1,\r\n                line: {\r\n                    color: 'rgba(50, 171, 96, 1)'\r\n                }\r\n            },\r\n\r\n        ]\r\n\r\n        Plotly.newPlot('correlation_circle', [], {\r\n            annotations: arrows,\r\n            shapes: shapes,\r\n            showlegend: true,\r\n            height: 300,\r\n            width: 300,\r\n            margin: {\r\n                l: 40,\r\n                r: 40,\r\n                b: 40,\r\n                t: 40,\r\n                pad: 10\r\n            },\r\n            legend: {\r\n                x: 1,\r\n                xanchor: 'right',\r\n                y: 1, bgcolor: 'rgba(0,0,0,0)',\r\n\r\n            },\r\n            xaxis: {\r\n                range: [-1.2, 1.2],\r\n                linecolor: 'black',\r\n                linewidth: 1,\r\n                mirror: true,\r\n                title: 'PC1'\r\n            },\r\n            yaxis: {\r\n                range: [-1.2, 1.2],\r\n                linecolor: 'black',\r\n                linewidth: 1,\r\n                mirror: true,\r\n                title: 'PC2'\r\n            }\r\n        }, { ...plotlyImageExportConfig, responsive: true });\r\n\r\n        let cumulatedExplainedVaraince = []\r\n        let sum = 0\r\n        let compnentsaxis = []\r\n        explained_variances.forEach((element, i) => {\r\n            sum = sum + element\r\n            compnentsaxis.push(i + 1)\r\n            cumulatedExplainedVaraince.push(sum)\r\n        });\r\n        var trace1 = {\r\n            name: 'Propotional',\r\n            x: compnentsaxis,\r\n            y: explained_variances,\r\n            type: 'scatter'\r\n        };\r\n\r\n        var trace2 = {\r\n            name: 'Cumulative',\r\n            x: compnentsaxis,\r\n            y: cumulatedExplainedVaraince,\r\n            type: 'scatter'\r\n        };\r\n        var trace3 = {\r\n            showlegend: false,\r\n            x: [1.1, 1.1],\r\n            y: [0.92, 0.82],\r\n            text: ['0.9', '0.8'],\r\n            mode: 'text'\r\n        };\r\n        var data = [trace1, trace2, trace3];\r\n        if (drawScreePlot) {\r\n            Plotly.newPlot('scree_plot', data, {\r\n                legend: {\r\n                    x: 0.1,\r\n                    y: 0.2,\r\n                    traceorder: 'normal',\r\n                    orientation: \"h\",\r\n                    font: {\r\n                        size: 8,\r\n                    },\r\n                    bgcolor: 'rgba(0,0,0,0)',\r\n                },\r\n                shapes: [\r\n                    {\r\n                        type: 'line',\r\n                        x0: 1,\r\n                        y0: 0.9,\r\n                        x1: Math.max(...compnentsaxis),\r\n                        y1: 0.9,\r\n                        line: {\r\n                            color: 'rgb(250, 0, 0)',\r\n                            width: 1.5,\r\n                            dash: 'dashdot'\r\n                        }\r\n                    }, {\r\n                        type: 'line',\r\n                        x0: 1,\r\n                        y0: 0.8,\r\n                        x1: Math.max(...compnentsaxis),\r\n                        y1: 0.8,\r\n                        line: {\r\n                            color: 'rgb(50, 171, 96)',\r\n                            width: 1.5,\r\n                            dash: 'dashdot'\r\n                        }\r\n                    }],\r\n                margin: {\r\n                    l: 60,\r\n                    r: 60,\r\n                    b: 40,\r\n                    t: 40,\r\n                    pad: 10\r\n                },\r\n                xaxis: {\r\n                    linecolor: 'black',\r\n                    linewidth: 1,\r\n                    tickmode: 'linear',\r\n                    dtick: 1,\r\n                    mirror: true,\r\n                    zeroline: false,\r\n                    title: 'Number of PCs'\r\n                },\r\n                yaxis: {\r\n                    linecolor: 'black',\r\n                    linewidth: 1,\r\n                    rang: [0, 1],\r\n                    zeroline: false,\r\n                    mirror: true,\r\n                    title: 'Explained variance'\r\n                }\r\n            }, { ...plotlyImageExportConfig, responsive: true });\r\n        }\r\n\r\n        // Highcharts.chart('scree_plot', {\r\n        //     credits: {\r\n        //         enabled: false\r\n        //     },\r\n\r\n        //     title: {\r\n        //         text: 'Explained Variance',\r\n        //     },\r\n        //     legend: {\r\n        //         verticalAlign: 'bottom',\r\n        //         align: 'left',\r\n        //         floating: true,\r\n        //     },\r\n        //     yAxis: {\r\n        //         linecolor: 'black',\r\n        //         linewidth: 2,\r\n        //         mirror: true,\r\n        //         min: 0,\r\n        //         max: 1,\r\n        //         title: {\r\n        //             text: 'Explained variance'\r\n        //         },\r\n        //         plotLines: [{\r\n        //             value: 0.9,\r\n        //             dashStyle: 'shortdash',\r\n        //             color: 'grey',\r\n        //             width: 1,\r\n        //             zIndex: 4,\r\n        //             label: {\r\n        //                 text: '0.9', align: \"right\",\r\n        //             }\r\n        //         }, {\r\n        //             value: 0.8,\r\n        //             dashStyle: 'shortdash',\r\n        //             color: 'darkgrey',\r\n        //             width: 1,\r\n        //             zIndex: 4,\r\n        //             label: {\r\n        //                 text: '0.8', align: \"right\",\r\n        //             }\r\n        //         }]\r\n\r\n        //     },\r\n        //     xAxis: {\r\n        //         linecolor: 'black',\r\n        //         linewidth: 2,\r\n        //         mirror: true,\r\n        //         labels: {\r\n        //             enabled: true,\r\n        //             formatter: function () {\r\n        //                 return this.value + 1;\r\n        //             }\r\n        //         },\r\n\r\n        //         title: {\r\n        //             text: 'Number of PCs'\r\n        //         },\r\n        //     },\r\n        //     series: [{\r\n        //         name: 'Propotional',\r\n        //         color: \"blue\",\r\n        //         data: explained_variances\r\n        //     },\r\n        //     {\r\n        //         name: 'Cumulative',\r\n        //         color: \"red\",\r\n        //         data: cumulatedExplainedVaraince\r\n        //     }],\r\n\r\n        // });\r\n\r\n    }\r\n    // eslint-disable-next-line no-unused-vars\r\n    drawStackedHorizontalChart(categories, lable) {\r\n        var trace1 = {\r\n            x: [20, 14, 23],\r\n            y: ['giraffes', 'orangutans', 'monkeys'],\r\n            name: 'SF Zoo',\r\n            orientation: 'h',\r\n            marker: {\r\n                color: 'rgba(55,128,191,0.6)',\r\n                width: 1\r\n            },\r\n            type: 'bar'\r\n        };\r\n\r\n        var trace2 = {\r\n            x: [12, 18, 29],\r\n            y: ['giraffes', 'orangutans', 'monkeys'],\r\n            name: 'LA Zoo',\r\n            orientation: 'h',\r\n            type: 'bar',\r\n            marker: {\r\n                color: 'rgba(255,153,51,0.6)',\r\n                width: 1\r\n            }\r\n        };\r\n\r\n        var data = [trace1, trace2];\r\n\r\n        var layout = {\r\n            title: 'Colored Bar Chart',\r\n            barmode: 'stack'\r\n        };\r\n\r\n        Plotly.newPlot('myDiv', data, layout);\r\n\r\n    }\r\n    regularization_plot(xs, ys, labels) {\r\n        const traces = []\r\n        labels.forEach((element, i) => {\r\n            traces.push({\r\n                x: xs,\r\n                y: ys.map(m => m[i]),\r\n                type: 'scatter',\r\n                name: element,\r\n                mode: 'line'\r\n            })\r\n        });\r\n        var layout = {\r\n            colorway: ['#f3cec9', '#e7a4b6', '#cd7eaf', '#a262a9', '#6f4d96', '#3d3b72', '#182844'],\r\n            title: 'Lasso Coefficients as Alpha varies',\r\n            xaxis: {\r\n                type: 'log',\r\n                title: 'Alpha (Regularization Strength)'\r\n            },\r\n            yaxis: {\r\n                title: 'Coefficient Value'\r\n            }\r\n        };\r\n        Plotly.newPlot('lasso_plot', traces, layout);\r\n    }\r\n    argmax(array) {\r\n        return array.reduce((maxIndex, currentValue, currentIndex, array) => {\r\n            return currentValue > array[maxIndex] ? currentIndex : maxIndex;\r\n        }, 0);\r\n    }\r\n    probabilities_boxplot(probs, labels, uniqueLabels, index) {\r\n        let traces = [];\r\n        let probablitiesFormatted = []\r\n        let subsets = {};\r\n        labels.forEach((true_label, i) => {\r\n            if (!(true_label in subsets)) {\r\n                subsets[true_label] = [];\r\n            }\r\n            subsets[true_label].push(probs[i]);\r\n        });\r\n        for (const trueClass in subsets) {\r\n            const classProbas = subsets[trueClass];\r\n            classProbas.forEach((proba) => {\r\n                const max = Math.max(...proba)\r\n                probablitiesFormatted.push({\r\n                    trueClass: trueClass,\r\n                    predicted: proba.findIndex(prob => prob == max),\r\n                    probablity: proba\r\n                })\r\n            })\r\n        }\r\n        let i = 0;\r\n        let x = probablitiesFormatted.map(prob => prob.predicted);\r\n        for (let true_label in subsets) {\r\n            let classIndex = uniqueLabels.findIndex(m => m == true_label)\r\n            traces.push({\r\n                type: 'box',\r\n                name: true_label,\r\n                marker: {\r\n                    color: this.indexToColor(classIndex, uniqueLabels.length),\r\n                    size: 2,\r\n                    line: {\r\n                        outlierwidth: 0.3\r\n                    }\r\n                },\r\n                line: {\r\n                    width: 0.5\r\n                },\r\n                y: probablitiesFormatted.map(m => m.probablity[i]),\r\n                x: x\r\n            });\r\n            i++;\r\n        }\r\n        // traces.forEach(trace => {\r\n        //     trace['type'] = 'violin'\r\n        // })\r\n        // Plotly.newPlot(\"proba_violin_plot_\" + index, traces, {\r\n        //     xaxis: {\r\n        //         linecolor: 'black',\r\n        //         linewidth: 1,\r\n        //         mirror: true,\r\n        //     },\r\n        //     yaxis: {\r\n        //         title: 'Predicted Probability',\r\n        //         linecolor: 'black',\r\n        //         zeroline: false,\r\n        //         linewidth: 1,\r\n        //         mirror: true,\r\n        //     },\r\n        //     legend: {\r\n        //         x: 1,\r\n        //         xanchor: 'right',\r\n        //         y: 1\r\n        //     },\r\n        //     violinmode: 'group'\r\n        // }, { responsive: true });\r\n        // traces.forEach(trace => {\r\n        //     trace['type'] = 'box'\r\n        // })\r\n        Plotly.newPlot(\"proba_plot_\" + index, traces, {\r\n            xaxis: {\r\n                linecolor: 'black',\r\n                linewidth: 1,\r\n                mirror: true,\r\n                title: 'class'\r\n            },\r\n            yaxis: {\r\n                title: 'Predicted Probability',\r\n                linecolor: 'black',\r\n                zeroline: false,\r\n                linewidth: 1,\r\n                mirror: true,\r\n            },\r\n            legend: {\r\n                x: 1,\r\n                xanchor: 'right',\r\n                y: 1,\r\n                bgcolor: 'rgba(0,0,0,0)',\r\n\r\n            },\r\n            boxmode: 'group'\r\n        }, { responsive: true });\r\n    }\r\n\r\n    async plotConfusionMatrix(y, predictedLabels, labels, uniqueClasses, tab_index) {\r\n\r\n        const confusionMatrix = await metrics.confusionMatrix(y, predictedLabels, uniqueClasses.length);\r\n        let metric = await ClassificationMetric(y.arraySync(), predictedLabels.arraySync(), uniqueClasses)\r\n        let accuracy = metric.accuracy.toFixed(2);\r\n        let f1Micro = metric.f1_micro.toFixed(2)\r\n        let f1Macro = metric.f1_macro.toFixed(2)\r\n\r\n        let len = confusionMatrix[0].length\r\n        let preceissions = [];\r\n        let recalls = [];\r\n        for (let j = 0; j < len; j++) {\r\n            preceissions.push(parseFloat(metric.precision[j].toFixed(2)))\r\n        }\r\n        for (let j = 0; j < len; j++) {\r\n            recalls.push(parseFloat(metric.recall[j].toFixed(2)))\r\n        }\r\n        tensorflow.dispose(y)\r\n        tensorflow.dispose(predictedLabels)\r\n        const metric_labels = [\"Precession\", \"Recall\", \"F1 score\", \"Support\"]\r\n        labels.push(\"Precession\")\r\n        recalls.push(0)\r\n        confusionMatrix.push(preceissions)\r\n        let items_labels = labels.filter(x => !metric_labels.includes(x))\r\n        let formatted_matrix = []\r\n        for (let i = 0; i < confusionMatrix.length; i++) {\r\n            const element = confusionMatrix[i];\r\n            if (i < confusionMatrix.length - 1) {\r\n                element.push(recalls[i])\r\n            }\r\n            for (let j = 0; j < element.length; j++) {\r\n                const item = element[j];\r\n                formatted_matrix.push([j, i, item])\r\n            }\r\n        }\r\n        items_labels.push(\"Recall\")\r\n\r\n        Highcharts.chart(\"confusion_matrix_\" + tab_index, {\r\n            credits: {\r\n                enabled: false\r\n            },\r\n            exporting: {\r\n                enabled: true\r\n            },\r\n            chart: {\r\n                type: 'heatmap',\r\n                plotBorderWidth: 1\r\n            },\r\n            title: {\r\n                text: '',\r\n                style: {\r\n                    fontSize: '0.75em'\r\n                }\r\n            },\r\n\r\n            xAxis: [{\r\n                categories: items_labels,\r\n                title: {\r\n                    text: 'Predicted Class'\r\n                }\r\n            }, {\r\n                linkedTo: 0,\r\n                opposite: true,\r\n                tickLength: 0,\r\n                labels: {\r\n                    formatter: function () {\r\n                        var chart = this.chart,\r\n                            each = Highcharts.each,\r\n                            series = chart.series[0],\r\n                            sum = 0,\r\n                            x = this.value;\r\n\r\n                        series.options.data.forEach(function (p, i) {\r\n                            if (p[0] === x) {\r\n                                if (p[1] < uniqueClasses.length) {\r\n                                    sum += p[2];\r\n                                }\r\n                            }\r\n                        });\r\n\r\n                        return +sum.toFixed(2);\r\n                    }\r\n                }\r\n            }],\r\n            yAxis: [{\r\n                categories: labels,\r\n                title: {\r\n                    text: 'Actual Class'\r\n                },\r\n                reversed: true, endOnTick: false\r\n            }, {\r\n                linkedTo: 0,\r\n                opposite: true,\r\n                tickLength: 0,\r\n                labels: {\r\n                    formatter: function () {\r\n                        var chart = this.chart,\r\n                            each = Highcharts.each,\r\n                            series = chart.series[0],\r\n                            sum = 0,\r\n                            x = this.value;\r\n                        series.options.data.forEach(function (p, i) {\r\n                            if (p[1] < uniqueClasses.length) {\r\n                                if (p[1] === x) {\r\n                                    if (p[0] < uniqueClasses.length) {\r\n                                        sum += p[2];\r\n                                    }\r\n\r\n                                }\r\n                            }\r\n                        });\r\n                        return +sum.toFixed(2);\r\n                    }\r\n                },\r\n                title: null\r\n            }],\r\n            colorAxis: {\r\n                min: 0,\r\n                minColor: '#FFFFFF',\r\n                maxColor: Highcharts.getOptions().colors[0]\r\n            },\r\n            legend: {\r\n                enabled: false,\r\n                align: 'center',\r\n                layout: 'horizontal',\r\n                margin: 0,\r\n                verticalAlign: 'top',\r\n                y: 5,\r\n                symbolHeight: 10\r\n            },\r\n            series: [{\r\n                name: '',\r\n                borderWidth: 1,\r\n                data: formatted_matrix,\r\n                dataLabels: {\r\n                    enabled: true,\r\n                    useHTML: true,\r\n                    color: '#000000',\r\n                    formatter: function () {\r\n                        var totalCount = this.series.data.reduce(function (acc, cur, i) {\r\n                            if ((i + 1) % (uniqueClasses.length + 1) === 0) {\r\n                                return acc\r\n                            }\r\n                            return +(acc + cur?.value).toFixed(2);\r\n                        }, 0);\r\n                        var count = this.point.value;\r\n                        var skip = this.point.index >= this.series.data.length - (1 * (uniqueClasses.length + 1));\r\n\r\n                        if (!skip && !((this.point.index + 1) % (uniqueClasses.length + 1) === 0)) {\r\n                            var percentage = +((count / totalCount) * 100).toFixed(2);\r\n                            return '<p style=\"margin:auto; text-align:center;\">' + (+count.toFixed(2)) + '<br/>(' + (+percentage).toFixed(2) + '%)</p> ';\r\n                        } else {\r\n                            return '<p style=\"margin:auto; text-align:center;\">' + (+count.toFixed(2)) + '</p>';\r\n                        }\r\n                    }\r\n                }\r\n            }],\r\n            responsive: {\r\n                rules: [{\r\n                    condition: {\r\n                        maxWidth: 200\r\n                    },\r\n                    chartOptions: {\r\n                        yAxis: {\r\n                            labels: {\r\n                                format: '{substr value 0 1}',\r\n                                padding: 0,\r\n                                style: {\r\n                                    fontSize: '6px'\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }]\r\n            }\r\n        });\r\n        return [accuracy, f1Micro, f1Macro]\r\n    }\r\n\r\n\r\n\r\n\r\n    plot_regularization(weights, alphas, names, tab_index) {\r\n        let content = `\r\n                    <div class=\"column is-6\" id=\"regularization_${tab_index}\" style=\"height: 40vh;\">\r\n                    </div>\r\n    `\r\n        $(\"#tabs_info li[data-index='\" + tab_index + \"'] #results_\" + tab_index + \"\").append(content);\r\n\r\n        let serieses = []\r\n        for (let i = 0; i < names.length; i++) {\r\n            serieses.push({\r\n                name: names[i],\r\n                data: weights.map(m => m[i])\r\n            })\r\n        }\r\n        const alphas_formatted = [];\r\n        for (let i = 0; i < alphas.length; i++) {\r\n            alphas_formatted.push(alphas[i].toFixed(2));\r\n        }\r\n        Highcharts.chart(\"regularization_\" + tab_index, {\r\n\r\n            title: {\r\n                text: '',\r\n            },\r\n            yAxis: {\r\n                title: {\r\n                    text: 'Coefficients'\r\n                }\r\n            },\r\n            xAxis: {\r\n                title: {\r\n                    text: 'penalty weight'\r\n                },\r\n                categories: alphas_formatted,\r\n            },\r\n            legend: {\r\n                layout: 'vertical',\r\n                align: 'right',\r\n                verticalAlign: 'middle'\r\n            },\r\n\r\n            plotOptions: {\r\n                series: {\r\n                    label: {\r\n                        connectorAllowed: false\r\n                    },\r\n                }\r\n            },\r\n            series: serieses,\r\n            responsive: {\r\n                rules: [{\r\n                    condition: {\r\n                        maxWidth: 500\r\n                    },\r\n                    chartOptions: {\r\n                        legend: {\r\n                            layout: 'horizontal',\r\n                            align: 'center',\r\n                            verticalAlign: 'bottom'\r\n                        }\r\n                    }\r\n                }]\r\n            }\r\n        });\r\n    }\r\n    yhat_plot(y_test, predictions, container, title = '') {\r\n        Plotly.newPlot(container, [{\r\n            x: y_test,\r\n            y: predictions,\r\n            type: 'scatter',\r\n            name: \"y\",\r\n            mode: 'markers',\r\n        }, {\r\n            x: y_test,\r\n            y: y_test,\r\n            mode: 'lines',\r\n            type: 'scatter',\r\n            line: { color: 'red', dash: 'dash' },\r\n            name: 'y = x line'\r\n        }], {\r\n            title: {\r\n                text: title,\r\n                font: {\r\n                    family: 'sans-serif',\r\n                    size: 10\r\n                },\r\n                xref: 'paper',\r\n                x: 0.05,\r\n            },\r\n            showlegend: false,\r\n            xaxis: {\r\n                linecolor: 'black',\r\n                linewidth: 1,\r\n                mirror: true,\r\n                title: {\r\n                    text: 'y',\r\n                    font: {\r\n                        family: 'sans-serif',\r\n                        size: 14,\r\n                        color: '#7f7f7f'\r\n                    }\r\n                },\r\n            },\r\n            yaxis: {\r\n                linecolor: 'black',\r\n                linewidth: 1,\r\n                mirror: true,\r\n                title: {\r\n                    text: 'predictions',\r\n                    font: {\r\n                        family: 'sans-serif',\r\n                        size: 14,\r\n                        color: '#7f7f7f'\r\n                    }\r\n                }\r\n            },\r\n            margin: {\r\n                l: 40,\r\n                r: 10,\r\n                b: 40,\r\n                t: 20,\r\n                pad: 0\r\n            }\r\n        }, { responsive: true, });\r\n    }\r\n    residual_plot(y, residuals, container, title = '') {\r\n        Plotly.newPlot(container, [{\r\n            x: y,\r\n            y: residuals,\r\n            type: 'scatter',\r\n            name: \"y\",\r\n            mode: 'markers',\r\n            marker: {\r\n                color: 'rgb(17, 157, 255)',\r\n                size: 7\r\n            },\r\n        }], {\r\n            title: {\r\n                text: title,\r\n                font: {\r\n                    family: 'sans-serif',\r\n                    size: 10\r\n                },\r\n                xref: 'paper',\r\n                x: 0.05,\r\n            },\r\n            showlegend: false,\r\n            xaxis: {\r\n                linecolor: 'black',\r\n                linewidth: 1,\r\n                mirror: true,\r\n                title: {\r\n                    text: 'y',\r\n                    font: {\r\n                        family: 'sans-serif',\r\n                        size: 14,\r\n                        color: '#7f7f7f'\r\n                    }\r\n                },\r\n            },\r\n            yaxis: {\r\n                linecolor: 'black',\r\n                linewidth: 1,\r\n                mirror: true,\r\n                title: {\r\n                    text: 'residuals',\r\n                    font: {\r\n                        family: 'sans-serif',\r\n                        size: 14,\r\n                        color: '#7f7f7f'\r\n                    }\r\n                }\r\n            },\r\n            margin: {\r\n                l: 40,\r\n                r: 10,\r\n                b: 40,\r\n                t: 20,\r\n                pad: 0\r\n            }\r\n        }, { responsive: true, });\r\n    }\r\n\r\n    ScatterplotMatrix(items, features, labels, number_of_categoricals, is_classification = true, numeric_columns, categorical_columns, dataset) {\r\n        return new Promise((resolve, reject) => {\r\n            setTimeout(() => {\r\n                let unique_labels = [...new Set(labels)];\r\n                if (unique_labels.length === 2) {\r\n                    unique_labels.sort()\r\n                }\r\n                var colors = labels.map(label => this.indexToColor(unique_labels.indexOf(label), unique_labels.length));\r\n                let traces = []\r\n                let index = 1;\r\n                for (let i = 0; i < features.length; i++) {\r\n                    for (let j = 0; j < features.length; j++) {\r\n                        if (i === j) {\r\n                            let subsets = [];\r\n                            let kde;\r\n                            let breaks = []\r\n                            let allData = []\r\n                            if (is_classification) {\r\n\r\n                                if (i >= features.length - number_of_categoricals) {\r\n                                    if (i === features.length - 1) {\r\n                                        for (let k = 0; k < unique_labels.length; k++) {\r\n                                            subsets.push(items.filter(m => m[items[0].length - 1] === unique_labels[k]).map(m => m[i]));\r\n                                        }\r\n                                        traces.push({\r\n                                            x: unique_labels,\r\n                                            y: subsets.map(set => set.length),\r\n                                            type: 'bar',\r\n                                            xaxis: 'x' + (index),\r\n                                            yaxis: 'y' + (index),\r\n                                            marker: {\r\n                                                color: unique_labels.map((_, z) => this.indexToColor(z, unique_labels.length))\r\n                                                , opacity: 0.7\r\n                                            }\r\n                                        })\r\n                                    } else {\r\n                                        let unique_labels_feature = [...new Set(items.map(m => m[i]))];\r\n                                        for (let k = 0; k < unique_labels.length; k++) {\r\n                                            let lablel_items = items.filter(m => m[items[0].length - 1] === unique_labels[k])\r\n                                            let counts = [];\r\n                                            unique_labels_feature.forEach(label =>\r\n                                                counts.push(lablel_items.filter(m => m[i] === label).length)\r\n                                            )\r\n                                            subsets.push({\r\n                                                items: lablel_items,\r\n                                                counts: counts\r\n                                            });\r\n                                        }\r\n                                        unique_labels.forEach((_, i) => {\r\n                                            traces.push({\r\n                                                x: unique_labels_feature,\r\n                                                y: subsets[i].counts,\r\n                                                type: 'bar',\r\n                                                xaxis: 'x' + (index),\r\n                                                yaxis: 'y' + (index),\r\n                                                marker: {\r\n                                                    color: this.indexToColor(i, unique_labels.length)\r\n                                                    , opacity: 0.7\r\n                                                }\r\n                                            })\r\n                                        })\r\n                                    }\r\n                                } else {\r\n                                    for (let k = 0; k < unique_labels.length; k++) {\r\n                                        subsets.push(items.filter(m => m[items[0].length - 1] === unique_labels[k]).map(m => m[i]));\r\n                                    }\r\n                                    for (let ii = 0; ii < subsets.length; ii++) {\r\n                                        if (subsets[ii].length > 2) {\r\n                                            let default_bandwidth = this.nrd(subsets[ii]).toFixed(2);\r\n                                            breaks = ss.equalIntervalBreaks(subsets[ii], 100);\r\n\r\n                                            let ys = [];\r\n                                            kde = ss.kernelDensityEstimation(subsets[ii], 'gaussian', 'nrd');\r\n                                            let data = [];\r\n                                            breaks.forEach((item) => {\r\n                                                ys.push(kde(item, default_bandwidth));\r\n                                                data.push([item, ys[ys.length - 1]]);\r\n                                            });\r\n                                            allData.push(data);\r\n                                        } else {\r\n                                            allData.push([]);\r\n                                        }\r\n                                    }\r\n                                    for (let i = 0; i < allData.length; i++) {\r\n                                        traces.push({\r\n                                            type: 'scatter',\r\n                                            x: allData[i].map(m => m[0]),\r\n                                            y: allData[i].map(m => m[1]),\r\n                                            xaxis: 'x' + (index),\r\n                                            yaxis: 'y' + (index),\r\n                                            mode: 'lines',\r\n                                            name: 'Red',\r\n                                            fill: 'tozeroy',\r\n                                            line: {\r\n                                                color: this.indexToColor(i, allData.length),\r\n                                                opacity: 0.7,\r\n                                                width: 3\r\n                                            }\r\n                                        })\r\n\r\n                                    }\r\n                                }\r\n\r\n                            } else {\r\n                                if (categorical_columns.includes(features[i])) {\r\n                                    let column_items = items.map(m => m[i]);\r\n                                    let unique_classes = [...new Set(column_items)];\r\n                                    let class_frequencies = []\r\n                                    for (let i = 0; i < unique_classes.length; i++) {\r\n                                        const class_label = unique_classes[i];\r\n                                        class_frequencies.push(column_items.filter(m => m === class_label).length)\r\n                                    }\r\n                                    traces.push({\r\n                                        x: unique_classes,\r\n                                        y: class_frequencies,\r\n                                        type: 'bar',\r\n                                        name: 'Trace 1',\r\n                                        xaxis: 'x' + (index),\r\n                                        yaxis: 'y' + (index),\r\n                                    })\r\n                                } else {\r\n                                    subsets.push(items.map(m => m[i]));\r\n                                    for (let i = 0; i < subsets.length; i++) {\r\n                                        if (subsets[i].length > 2) {\r\n                                            let ys = [];\r\n                                            let default_bandwidth = this.nrd(subsets[i]).toFixed(2);\r\n                                            breaks = ss.equalIntervalBreaks(subsets[i], 100);\r\n                                            kde = ss.kernelDensityEstimation(subsets[i], 'gaussian', 'nrd');\r\n                                            let data = [];\r\n                                            breaks.forEach((item) => {\r\n                                                ys.push(kde(item, default_bandwidth));\r\n                                                data.push([item, ys[ys.length - 1]]);\r\n                                            });\r\n                                            allData.push(data);\r\n                                        } else {\r\n                                            allData.push([]);\r\n                                        }\r\n                                    }\r\n                                    traces.push({\r\n                                        type: 'scatter',\r\n                                        x: allData[0].map(m => m[0]),\r\n                                        y: allData[0].map(m => m[1]),\r\n                                        mode: 'lines',\r\n                                        fill: 'tozeroy',\r\n                                        xaxis: 'x' + (index),\r\n                                        yaxis: 'y' + (index),\r\n                                        name: 'Red',\r\n                                        line: {\r\n                                            color: 'rgb(219, 64, 82)',\r\n                                            opacity: 0.7,\r\n                                            width: 3\r\n                                        }\r\n                                    })\r\n                                }\r\n\r\n                            }\r\n                        }\r\n                        else if (i === features.length - 1) {\r\n                            traces.push({\r\n                                y: items.map(m => m[i]),\r\n                                x: items.map(m => m[j]),\r\n                                color: colors,\r\n                                marker: {\r\n                                    colorscale: 'Portland',\r\n                                    color: is_classification ? colors : labels,\r\n                                    opacity: 0.7,\r\n                                    size: 2,\r\n                                },\r\n                                type: 'scattergl',\r\n                                mode: 'markers',\r\n                                xaxis: 'x' + (index),\r\n                                yaxis: 'y' + (index),\r\n                            })\r\n                        } else if (j >= features.length - number_of_categoricals) {\r\n                            if (!is_classification) {\r\n                                traces.push({\r\n                                    x: [],\r\n                                    y: [],\r\n                                    mode: 'lines',\r\n                                    name: 'Trace 1'\r\n                                })\r\n                            } else {\r\n\r\n                                let boxplot_labels = [...new Set(items.map(m => m[j]))].sort((a, b) => a - b)\r\n                                let boxtraces = []\r\n                                for (let m = 0; m < unique_labels.length; m++) {\r\n                                    for (let n = 0; n < boxplot_labels.length; n++) {\r\n\r\n                                        let box_items = items.filter(item => item[j] === boxplot_labels[n] && item[features.length - 1] === unique_labels[m])\r\n                                        if (box_items) {\r\n                                            boxtraces.push({\r\n                                                y: box_items.map(item => item[i]),\r\n                                                marker: {\r\n                                                    color: this.indexToColor(m, unique_labels.length),\r\n                                                    size: 2,\r\n                                                    line: {\r\n                                                        outlierwidth: 0.3\r\n                                                    }\r\n                                                },\r\n                                                type: 'box',\r\n                                                xaxis: 'x' + (index),\r\n                                                yaxis: 'y' + (index),\r\n                                                line: {\r\n                                                    width: 0.5\r\n                                                }\r\n                                            })\r\n                                        }\r\n                                    }\r\n                                }\r\n                                if (j < features.length - 1) {\r\n                                    for (let i = 0; i < (boxtraces.length) / 2; i++) {\r\n                                        boxtraces[i]['x'] = Array(boxtraces[i]['y'].length).fill(i);\r\n                                        if (boxtraces[((boxtraces.length) / 2) + i]) {\r\n                                            boxtraces[((boxtraces.length) / 2) + i]['x'] = Array(boxtraces[i]['y'].length).fill(i + 0.5);\r\n                                        }\r\n                                    }\r\n                                    traces = traces.concat(boxtraces)\r\n                                } else {\r\n                                    traces = traces.concat(boxtraces)\r\n                                }\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (j > i) {\r\n                                let arr1 = items.map(m => m[i])\r\n                                let arr2 = items.map(m => m[j])\r\n                                traces.push({\r\n                                    x: [1.5],\r\n                                    y: [1.5],\r\n                                    text: [jStat.corrcoeff(arr1, arr2).toFixed(2)],\r\n                                    mode: 'text',\r\n                                    textfont: {\r\n                                        size: 12, // Font size for the text\r\n                                        color: 'black'\r\n                                    },\r\n                                    xaxis: 'x' + (index),\r\n                                    yaxis: 'y' + (index),\r\n                                    type: 'scatter'\r\n                                });\r\n\r\n                            } else {\r\n                                traces.push({\r\n                                    y: items.map(m => m[i]),\r\n                                    x: items.map(m => m[j]),\r\n                                    color: colors,\r\n\r\n                                    type: 'scattergl',\r\n                                    mode: 'markers',\r\n                                    marker: {\r\n                                        colorscale: 'Portland',\r\n                                        color: is_classification ? colors : labels,\r\n                                        size: 2,\r\n                                    },\r\n                                    xaxis: 'x' + (index),\r\n                                    yaxis: 'y' + (index),\r\n                                })\r\n                            }\r\n                        }\r\n                        index++\r\n                    }\r\n\r\n                }\r\n\r\n                var layout = {\r\n                    width: features.length * 100,\r\n                    height: features.length * 100,\r\n                    spacing: 0,\r\n                    showlegend: false,\r\n                    boxmode: 'overlay',\r\n                    grid: { rows: features.length, xgap: 0.0, ygap: 0.0, columns: features.length, pattern: 'independent' },\r\n                    margin: { t: 20, r: 20 },\r\n\r\n                };\r\n                for (var i = 0; i < features.length; i++) {\r\n                    for (var j = 0; j < features.length; j++) {\r\n                        var xAxisKey = 'xaxis' + ((i * features.length) + j + 1);\r\n                        var yAxisKey = 'yaxis' + ((i * features.length) + j + 1);\r\n                        let fontSize = 10;\r\n                        layout[xAxisKey] = {\r\n                            linecolor: 'black',\r\n                            linewidth: 1,\r\n                            mirror: true,\r\n                            showgrid: false,\r\n                            showticklabels: false,\r\n                            tickfont: {\r\n                                size: fontSize\r\n                            },\r\n                        };\r\n                        layout[yAxisKey] = {\r\n                            linecolor: 'black',\r\n                            linewidth: 1,\r\n                            mirror: true,\r\n                            showgrid: false,\r\n                            showticklabels: false,\r\n                            tickfont: {\r\n                                size: fontSize\r\n                            },\r\n                        };\r\n                        if (i === features.length - 1) {\r\n                            layout[xAxisKey] = {\r\n                                linecolor: 'black',\r\n                                linewidth: 1,\r\n                                mirror: true,\r\n                                tickfont: {\r\n                                    size: fontSize\r\n                                },\r\n                                title: {\r\n                                    text: features[j], font: {\r\n                                        size: fontSize\r\n                                    },\r\n                                }\r\n                            };\r\n\r\n                        }\r\n                        if (j === 0) {\r\n                            layout[yAxisKey] = {\r\n                                linecolor: 'black',\r\n                                linewidth: 1,\r\n                                mirror: true,\r\n                                tickfont: {\r\n                                    size: fontSize\r\n                                },\r\n                                title: {\r\n                                    text: features[i], font: {\r\n                                        size: fontSize\r\n                                    },\r\n                                }\r\n                            };\r\n                        }\r\n                    }\r\n                }\r\n\r\n                Plotly.react('scatterplot_mtx', traces, layout, {\r\n                    ...plotlyImageExportConfig,\r\n                    staticPlot: true,\r\n                    modeBarButtonsToRemove: ['resetScale2d', 'select2d', 'resetViews', 'sendDataToCloud', 'hoverCompareCartesian', 'lasso2d', 'drawopenpath ']\r\n                })\r\n                resolve()\r\n            }, 1000);\r\n        })\r\n    }\r\n\r\n    KNNPerformancePlot(results, best_n, id, label = \"Accuracy\") {\r\n        let traces = []\r\n        traces.push({\r\n            x: results.map(m => m[1]),\r\n            y: results.filter(n => n[0] === 'manhattan').map(m => Number(m[2])),\r\n            mode: 'lines',\r\n            name: 'manhattan test set',\r\n            line: {\r\n                color: 'rgb(55, 128, 191)',\r\n                width: 2\r\n            }\r\n        });\r\n\r\n        traces.push({\r\n            x: results.map(m => m[1]),\r\n            y: results.filter(n => n[0] === 'euclidean').map(m => Number(m[2])),\r\n            mode: 'lines',\r\n            name: 'euclidean test set',\r\n            line: {\r\n                color: 'rgb(219, 64, 82)',\r\n                width: 2\r\n            }\r\n        });\r\n\r\n        var layout = {\r\n            showlegend: true,\r\n            legend: {\r\n                \"orientation\": \"h\",\r\n                font: {\r\n                    family: 'sans-serif',\r\n                    size: 8,\r\n                    color: '#000'\r\n                },\r\n            },\r\n            xaxis: {\r\n                linecolor: 'black',\r\n                linewidth: 1,\r\n                mirror: true,\r\n                title: {\r\n                    text: 'K',\r\n                },\r\n            },\r\n            yaxis: {\r\n                range: [0, 1],\r\n                linecolor: 'black',\r\n                linewidth: 1,\r\n                mirror: true,\r\n                title: {\r\n                    text: label,\r\n                }\r\n            },\r\n            shapes: [\r\n                {\r\n                    type: 'line',\r\n                    x0: best_n,\r\n                    y0: 0,\r\n                    x1: best_n,\r\n                    y1: 1,\r\n                    line: {\r\n                        dash: 'dot',\r\n                        color: 'rgb(55, 128, 191)',\r\n                        width: 1\r\n                    }\r\n                },]\r\n        };\r\n        Plotly.newPlot(\"knn_table_\" + id, traces, layout, { responsive: true });\r\n    }\r\n    KNNPerformancePlotRegression(results, optimalTrainSpec, optimalTestSpec, id) {\r\n        let traces = []\r\n        traces.push({\r\n            x: results.map(m => m.k),\r\n            y: results.filter(n => n.metric === 'manhattan').map(m => Number((m.evaluation).toFixed(2))),\r\n            mode: 'lines',\r\n            name: 'manhattan test set',\r\n            line: {\r\n                color: 'rgb(55, 128, 191)',\r\n                width: 2\r\n            }\r\n        });\r\n\r\n        traces.push({\r\n            x: results.map(m => m.k),\r\n            y: results.filter(n => n.metric === 'euclidean').map(m => Number((m.evaluation).toFixed(2))),\r\n            mode: 'lines',\r\n            name: 'euclidean test set',\r\n            line: {\r\n                color: 'rgb(219, 64, 82)',\r\n                width: 2\r\n            }\r\n        });\r\n        traces.push({\r\n            x: results.map(m => m.k),\r\n            y: results.filter(n => n.metric === 'manhattan').map(m => Number((m.evaluation_train).toFixed(2))),\r\n            mode: 'lines',\r\n            name: 'manhattan train set',\r\n            line: {\r\n                color: 'rgb(55, 128, 191)',\r\n                width: 1\r\n            }\r\n        });\r\n        traces.push({\r\n            x: results.map(m => m.k),\r\n            y: results.filter(n => n.metric === 'euclidean').map(m => Number((m.evaluation_train).toFixed(2))),\r\n            mode: 'lines',\r\n            name: 'euclidean train set',\r\n            line: {\r\n                color: 'rgb(219, 64, 82)',\r\n                width: 1\r\n            }\r\n        });\r\n        var min_y = Number.POSITIVE_INFINITY;\r\n        var max_y = Number.NEGATIVE_INFINITY;\r\n        traces.forEach(trace => {\r\n            let min = Math.min(...trace.y)\r\n            let max = Math.max(...trace.y)\r\n            if (min < min_y) {\r\n                min_y = min\r\n            }\r\n            if (max > max_y) {\r\n                max_y = max\r\n            }\r\n\r\n        })\r\n        var layout = {\r\n            showlegend: true,\r\n            legend: {\r\n                \"orientation\": \"h\",\r\n                font: {\r\n                    family: 'sans-serif',\r\n                    size: 8,\r\n                    color: '#000'\r\n                },\r\n            },\r\n            xaxis: {\r\n                title: {\r\n                    text: 'K',\r\n                },\r\n            },\r\n            yaxis: {\r\n                title: {\r\n                    text: 'MSE',\r\n                }\r\n            },\r\n            shapes: [\r\n                {\r\n                    type: 'line',\r\n                    x0: optimalTrainSpec.k,\r\n                    y0: min_y,\r\n                    x1: optimalTrainSpec.k,\r\n                    y1: max_y,\r\n                    line: {\r\n                        color: 'rgb(55, 128, 191)',\r\n                        width: 1\r\n                    }\r\n                }, {\r\n                    type: 'line',\r\n                    x0: optimalTestSpec.k,\r\n                    y0: min_y,\r\n                    x1: optimalTestSpec.k,\r\n                    y1: max_y,\r\n                    line: {\r\n                        color: 'rgb(55, 128, 191)',\r\n                        width: 1\r\n                    }\r\n                },]\r\n        };\r\n        Plotly.newPlot(\"knn_table_\" + id, traces, layout);\r\n    }\r\n    correaltoinMatrixColorscale(correlations) {\r\n        let featuresCount = correlations[0].length;\r\n        let corrs = [];\r\n\r\n        for (let i = 0; i < featuresCount; i++) {\r\n            corrs.push(...correlations[i])\r\n        }\r\n        corrs.sort()\r\n        let countNegatives = 0\r\n        for (let i = 0; i < corrs.length; i++) {\r\n            if (corrs[i] < 0) {\r\n                countNegatives += 1\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        let portionOfNegativeValues = Math.round(((countNegatives - 1) / corrs.length) * 100) / 100\r\n\r\n        let colorscale = [\r\n            [0, 'rgb(0, 0, 100)'],\r\n            [portionOfNegativeValues, 'rgb(161, 161, 255)'],\r\n            [portionOfNegativeValues + 0.001, 'rgb(253, 237, 237)'],\r\n            [1.0, 'rgb(255, 0, 0)']\r\n        ]\r\n        return colorscale\r\n    }\r\n    async correlationHeatmap(id, correlations, names) {\r\n\r\n        var data = [\r\n            {\r\n                z: correlations,\r\n                x: names,\r\n                y: names,\r\n                type: 'heatmap',\r\n                zmin: -1,\r\n                zmax: 1,\r\n                hoverongaps: false,\r\n                colorscale: [\r\n                    [0, 'rgb(74,141,255)'],\r\n                    [0.10, 'rgb(102,151,255)'],\r\n                    [0.20, 'rgb(121,170,255)'],\r\n                    [0.30, 'rgb(137,187,255)'],\r\n                    [0.40, 'rgb(205,221,255)'],\r\n                    [0.50, 'rgb(255,255,255)'],\r\n                    [0.51, 'rgb(253, 237, 237)'],\r\n                    [0.6, 'rgb(255,169,169)'],\r\n                    [0.75, 'rgb(249,100,100)'],\r\n                    [0.95, 'rgb(225,0,0)'],\r\n                    [1.0, 'rgb(165,0,0)']\r\n                ],\r\n                showscale: false,\r\n            }\r\n        ];\r\n        var layout = {\r\n\r\n            annotations: [],\r\n            font: {\r\n                size: 10\r\n            },\r\n            xaxis: {\r\n                ticks: '',\r\n                side: 'bottom',\r\n                tickangle: -90,\r\n            },\r\n            yaxis: {\r\n                autorange: \"reversed\",\r\n                tickangle: -45,\r\n                ticks: '',\r\n                ticksuffix: ' ',\r\n            },\r\n            autosize: true,\r\n\r\n        };\r\n        for (var i = 0; i < names.length; i++) {\r\n            for (var j = names.length - 1; j >= 0; j--) {\r\n                var currentValue = correlations[i][j];\r\n                let textColor\r\n                if (currentValue <= 0.0) {\r\n                    textColor = 'black';\r\n                } else {\r\n                    textColor = 'black';\r\n                }\r\n                var result = {\r\n                    xref: 'x1',\r\n                    yref: 'y1',\r\n                    x: names[i],\r\n                    y: names[j],\r\n                    text: currentValue.toFixed(2),\r\n                    font: {\r\n                        family: 'Arial',\r\n                        size: 8,\r\n                        color: textColor\r\n                    },\r\n                    showarrow: false,\r\n                };\r\n                layout.annotations.push(result);\r\n            }\r\n        }\r\n\r\n        await Plotly.newPlot(id, data, layout, { ...plotlyImageExportConfig, responsive: true });\r\n    }\r\n    async dendogramPlot(id, correlations, linkage, names, originalColumns) {\r\n\r\n        var trace4 = {\r\n            x: names,\r\n            y: names,\r\n            z: correlations,\r\n            type: 'heatmap',\r\n            zmin: -1,\r\n            zmax: 1,\r\n            hoverongaps: false,\r\n            colorscale: [\r\n                [0, 'rgb(74,141,255)'],\r\n                [0.10, 'rgb(102,151,255)'],\r\n                [0.20, 'rgb(121,170,255)'],\r\n                [0.30, 'rgb(137,187,255)'],\r\n                [0.40, 'rgb(205,221,255)'],\r\n                [0.50, 'rgb(255,255,255)'],\r\n                [0.51, 'rgb(253, 237, 237)'],\r\n                [0.6, 'rgb(255,169,169)'],\r\n                [0.75, 'rgb(249,100,100)'],\r\n                [0.95, 'rgb(225,0,0)'],\r\n                [1.0, 'rgb(165,0,0)']\r\n            ],\r\n            xaxis: 'x',\r\n            yaxis: 'y',\r\n            colorbar: {\r\n                thickness: 10,\r\n                len: 0.5,\r\n            }\r\n        };\r\n        let indices = []\r\n        let linksLength = linkage.length + 1;\r\n        let currentLimitY = 0;\r\n        let prevLimitY = 0;\r\n        let clusterY = 0\r\n        let clusterX = 0\r\n        for (let i = 0; i < originalColumns.length; i++) {\r\n            indices.push(names.findIndex(name => name == originalColumns[i]))\r\n        }\r\n        let tickValues = []\r\n        for (let i = 0; i < linksLength; i++) {\r\n            tickValues.push((i + 1) * 10)\r\n        }\r\n\r\n        let dendrogramUP = {\r\n            'data': [],\r\n            'layout': {\r\n                'width': '100%', 'showlegend': false,\r\n                'xaxis': {\r\n                    'showticklabels': true, 'tickmode': 'array', 'ticks': 'outside',\r\n                    'showgrid': false, 'mirror': 'allticks', 'zeroline': false, 'showline': true, 'rangemode': 'tozero',\r\n                    'type': 'linear'\r\n                }, 'yaxis': {\r\n                    'showticklabels': true, 'ticks': 'outside', 'showgrid': false, 'mirror': 'allticks', 'zeroline':\r\n                        false, 'showline': true, 'rangemode': 'tozero', 'type': 'linear'\r\n                }, 'hovermode': 'closest', 'autosize': false, 'height': '100%'\r\n            }\r\n        }\r\n\r\n        let dendrogramRIGHT = {\r\n            'data': [],\r\n            'layout': {\r\n                'width': '100%', 'showlegend': false,\r\n                'xaxis': {\r\n                    'showticklabels': true, 'ticks': 'outside', 'showgrid': false, 'mirror': 'allticks', 'zeroline': false, 'showline': true,\r\n                    'rangemode': 'tozero', 'type': 'linear'\r\n                }, 'yaxis': {\r\n                    'showticklabels': true, 'tickmode': 'array', 'ticks': 'outside', 'showgrid': false,\r\n                    'mirror': 'allticks', 'zeroline': false, 'showline': true, 'rangemode': 'tozero',\r\n                    'type': 'linear'\r\n                }, 'hovermode': 'closest', 'autosize': false,\r\n                'height': '100%'\r\n            }\r\n        }\r\n        let history = {}\r\n\r\n        linkage.forEach((link, i) => {\r\n            let l0, l1;\r\n            if (indices[link[0]] + 1) {\r\n                l0 = indices[link[0]] + 1 ?? link[0] + 1\r\n            }\r\n            if (indices[link[1]] + 1) {\r\n                l1 = indices[link[1]] + 1 ?? link[1] + 1\r\n            }\r\n            if (currentLimitY == 0) {\r\n                currentLimitY = (parseFloat(i + 1) / linksLength);\r\n            }\r\n            if (l0 <= linksLength && l1 <= linksLength) {\r\n                clusterX = ((l0 * (Math.max(...tickValues) / linksLength) + l1 * (Math.max(...tickValues) / linksLength)) / 2)\r\n                dendrogramUP.data.push({\r\n                    'yaxis': 'y2', 'x': [l0 * 10, l0 * 10, l1 * 10, l1 * 10],\r\n                    'mode': 'lines', 'xaxis': 'x', 'marker': { 'color': `${this.indexToColor(i)}` },\r\n                    'y': [\r\n                        prevLimitY, currentLimitY,\r\n                        currentLimitY, prevLimitY\r\n                    ],\r\n                    'type': 'scatter'\r\n                })\r\n\r\n            } else {\r\n                prevLimitY = l0 <= linksLength ? currentLimitY : history[link[0]]?.y_current;\r\n                currentLimitY = (parseFloat(i + 1) / linksLength);\r\n                let x = [\r\n                    (l0 <= linksLength ? l0 * 10. : history[link[0]]?.x),\r\n                    (l0 <= linksLength ? l0 * 10. : history[link[0]]?.x),\r\n                    (l1 <= linksLength ? l1 * 10. : history[link[1]]?.x),\r\n                    (l1 <= linksLength ? l1 * 10. : history[link[1]]?.x),\r\n                ]\r\n                let y = [\r\n                    history[link[0]]?.y_current ?? 0, currentLimitY,\r\n                    currentLimitY, history[link[1]]?.y_current ?? 0\r\n                ]\r\n                dendrogramUP.data.push({\r\n                    'yaxis': 'y2', 'x': x,\r\n                    'mode': 'lines', 'xaxis': 'x', 'marker': { 'color': `${this.indexToColor(i)}` },\r\n                    'y': y,\r\n                    'type': 'scatter'\r\n                })\r\n                clusterX = x.reduce((prev, curr) => prev + curr, 0) / 4;\r\n\r\n            }\r\n            history[linksLength + i] = { x: clusterX, y_current: currentLimitY }\r\n\r\n        })\r\n\r\n\r\n\r\n        let currentLimitX = 0;\r\n        let prevLimitX = 0;\r\n        history = []\r\n        linkage.forEach((link, i) => {\r\n            let l0 = indices[link[0]] + 1\r\n            let l1 = indices[link[1]] + 1\r\n\r\n            if (currentLimitX == 0) {\r\n                currentLimitX = (parseFloat(i + 1) / linksLength);\r\n            }\r\n            if (l0 <= linksLength && l1 <= linksLength) {\r\n                clusterY = ((l0 * -10 + l1 * -10) / 2) - 2\r\n                dendrogramRIGHT.data.push({\r\n                    'yaxis': 'y', 'y': [l0 * -10, l0 * -10, l1 * -10, l1 * -10],\r\n                    'mode': 'lines', 'xaxis': 'x2', 'marker': { 'color': `${this.indexToColor(i)}` },\r\n                    'x': [\r\n                        prevLimitX, currentLimitX,\r\n                        currentLimitX, prevLimitX\r\n                    ],\r\n                    'type': 'scatter'\r\n                })\r\n            } else {\r\n                prevLimitX = l0 <= linksLength ? currentLimitX : history[link[0]].x;\r\n                currentLimitX = (parseFloat(i + 1) / linksLength);\r\n                let y = [\r\n                    (l0 <= linksLength ? l0 * -10. : history[link[0]]?.y),\r\n                    (l0 <= linksLength ? l0 * -10. : history[link[0]]?.y),\r\n                    (l1 <= linksLength ? l1 * -10. : history[link[1]]?.y),\r\n                    (l1 <= linksLength ? l1 * -10. : history[link[1]]?.y),\r\n                ]\r\n                dendrogramRIGHT.data.push({\r\n                    'yaxis': 'y', 'y': y,\r\n                    'mode': 'lines', 'xaxis': 'x2', 'marker': { 'color': `${this.indexToColor(i)}` },\r\n                    'x': [\r\n                        history[link[0]]?.x ?? 0, currentLimitX,\r\n                        currentLimitX, history[link[1]]?.x ?? 0\r\n                    ],\r\n                    'type': 'scatter'\r\n                })\r\n                clusterY = y.reduce((prev, curr) => prev + curr, 0) / 4\r\n            }\r\n            history[linksLength + i] = { y: clusterY, x: currentLimitX }\r\n        })\r\n\r\n        var layout2 = {\r\n            annotations: [],\r\n            font: {\r\n                size: 10\r\n            },\r\n            autosize: true,\r\n\r\n            yaxis: {\r\n                domain: [0, 0.75],\r\n                mirror: false,\r\n                showgrid: false,\r\n                showline: false,\r\n                zeroline: false,\r\n                showticklabels: true,\r\n                ticks: \"\",\r\n                tickvals: tickValues.map(tick => -tick),  // Specify tick positions\r\n                ticktext: names,\r\n                tickangle: -45,\r\n\r\n            },\r\n            xaxis: {\r\n                domain: [0, 0.75],\r\n                mirror: false,\r\n                showgrid: false,\r\n                showline: false,\r\n                zeroline: false,\r\n                showticklabels: true,\r\n                ticks: \"\",\r\n                tickvals: tickValues,  // Specify tick positions\r\n                ticktext: names,\r\n                tickangle: -90,\r\n\r\n            },\r\n            xaxis2: {\r\n                domain: [0.75, 1],\r\n                mirror: false,\r\n                showgrid: false,\r\n                showline: false,\r\n                zeroline: false,\r\n                showticklabels: false,\r\n                ticks: \"\",\r\n                ticktext: names,\r\n            },\r\n            yaxis2: {\r\n                domain: [0.75, 1],\r\n                mirror: false,\r\n                showgrid: false,\r\n                showline: false,\r\n                zeroline: false,\r\n                showticklabels: false,\r\n                ticktext: names,\r\n            },\r\n            showlegend: false,\r\n            coloraxis: {\r\n                colorscale: 'YlGnBu',\r\n                showscale: true,\r\n                cmin: -1,\r\n                cmax: 1\r\n            },\r\n            margin: { l: 60, r: 30, b: 60, t: 30 },\r\n\r\n        };\r\n\r\n        let data = dendrogramUP['data']\r\n        data = data.concat(dendrogramRIGHT['data'])\r\n\r\n        trace4['x'] = tickValues\r\n        trace4['y'] = tickValues.map(tick => -tick)\r\n\r\n        data = data.concat(trace4)\r\n\r\n        Plotly.newPlot(id, data, layout2, { ...plotlyImageExportConfig, responsive: true });\r\n    }\r\n    PFIBoxplot(id, importances, columns) {\r\n        let traces = []\r\n        let avgs = []\r\n        importances.forEach(importance => {\r\n            const importancesMean = importance.reduce((a, b) => a + b, 0)\r\n            avgs.push((importancesMean / importance.length))\r\n        });\r\n        let max = Math.max(...avgs)\r\n        let min = Math.min(...avgs)\r\n\r\n        importances.forEach((importance, index) => {\r\n\r\n            traces.push(\r\n                {\r\n                    x: Array.from(importance),\r\n                    type: 'box',\r\n                    name: columns[index],\r\n                    marker: { color: this.indexToColorSequential(avgs[index] + 0.1, min, max) },\r\n                }\r\n            )\r\n        });\r\n        var layout = {\r\n            title: {\r\n                text: 'Permutation Feature Importance',\r\n                font: {\r\n                    size: 14\r\n                },\r\n                xref: 'paper',\r\n                x: 0.05,\r\n            },\r\n            showlegend: false,\r\n            xaxis: {\r\n                linecolor: 'black',\r\n                linewidth: 1,\r\n                mirror: true,\r\n                zeroline: false,\r\n\r\n            },\r\n            yaxis: {\r\n                linecolor: 'black',\r\n                linewidth: 1,\r\n                mirror: true,\r\n                automargin: true,\r\n                zeroline: false,\r\n\r\n            },\r\n        };\r\n\r\n        Plotly.newPlot('pfi_boxplot_' + id, traces, layout, { responsive: true });\r\n    }\r\n    plotPDP(id, averages, grids, labels, columns, categorical_columns) {\r\n        let pfiChartId = 'pdp_containers_' + id;\r\n        id = 'pdp_plot_' + id\r\n\r\n        grids.forEach((grid, i) => {\r\n            let element = document.getElementById(pfiChartId);\r\n            let chartContainer = document.createElement(\"div\");\r\n            chartContainer.classList.add(\"column\", \"is-6\");\r\n            let chartId = id + '_' + i;\r\n            chartContainer.id = chartId\r\n            chartContainer.style.height = \"400px\";\r\n            element.after(chartContainer)\r\n            let traces = []\r\n            const isCategorical = categorical_columns.includes(columns[i])\r\n            averages[i].forEach((average, index) => {\r\n                if (isCategorical) {\r\n                    traces.push(\r\n                        {\r\n                            x: grid,\r\n                            y: Array.from(average),\r\n                            type: 'bar',\r\n                            name: labels[index],\r\n                            marker: { color: this.indexToColor(index, averages[i].length) }\r\n                        }\r\n                    )\r\n                } else {\r\n                    traces.push(\r\n                        {\r\n                            x: grid,\r\n                            y: Array.from(average),\r\n                            mode: 'line',\r\n                            name: labels[index],\r\n                            marker: { color: this.indexToColor(index, averages[i].length) }\r\n                        }\r\n                    )\r\n                }\r\n\r\n            });\r\n            var layout = {\r\n\r\n                title: {\r\n                    text: 'Partial Dependence Plot - ' + columns[i],\r\n                    font: {\r\n                        size: 14\r\n                    },\r\n                    xref: 'paper',\r\n                    x: 0.05,\r\n                },\r\n                legend: { \"orientation\": \"h\" },\r\n\r\n                font: {\r\n                    size: 10\r\n                },\r\n                autosize: true,\r\n                xaxis: {\r\n                    linecolor: 'black',\r\n                    linewidth: 1,\r\n                    mirror: true,\r\n                    zeroline: false,\r\n                },\r\n                yaxis: {\r\n                    linecolor: 'black',\r\n                    zeroline: false,\r\n                    linewidth: 1,\r\n                    mirror: true,\r\n                    title: {\r\n                        text: 'Prediction',\r\n                    }\r\n                },\r\n            };\r\n\r\n            Plotly.newPlot(chartId, traces, layout, { ...plotlyImageExportConfig, responsive: true });\r\n        });\r\n    }\r\n    plotPDPRegression(id, averages, grids, labels, columns, categoricals) {\r\n        let pfiChartId = 'pfi_boxplot_' + id;\r\n        let element = document.getElementById(pfiChartId);\r\n        let chartContainer = document.createElement(\"div\");\r\n        chartContainer.classList.add(\"column\", \"is-6\");\r\n        const chartId = id + '_number';\r\n        chartContainer.id = chartId\r\n        chartContainer.style.height = \"400px\";\r\n        element.after(chartContainer);\r\n        element = document.getElementById(chartId);\r\n\r\n        chartContainer = document.createElement(\"div\");\r\n        chartContainer.classList.add(\"column\", \"is-6\");\r\n        const chartIdCategorical = id + '_class';\r\n        chartContainer.id = chartIdCategorical\r\n        chartContainer.style.height = \"400px\";\r\n        element.after(chartContainer);\r\n\r\n        let traces = []\r\n        let traces_categoricals = []\r\n        let allxs = []\r\n        // grids.forEach((grid, i) => {\r\n        //     if (!categoricals.includes(columns[i])) {\r\n        //         allxs = allxs.concat(grid)\r\n        //     }\r\n        // })\r\n        // scaler.fit(allxs)\r\n        grids.forEach((grid, i) => {\r\n            if (!categoricals.includes(columns[i])) {\r\n                averages[i].forEach((average, index) => {\r\n                    let scaler = new MinMaxScaler();\r\n                    scaler.fit(grid)\r\n                    // let xs = scaler.transform(grid)\r\n                    let xs = grid\r\n\r\n                    traces.push(\r\n                        {\r\n                            x: xs,\r\n                            y: Array.from(average),\r\n                            mode: 'line',\r\n                            name: columns[i],\r\n                            marker: { color: this.indexToColor(i, averages.length) }\r\n                        }\r\n                    )\r\n                });\r\n            } else {\r\n                averages[i].forEach((average, index) => {\r\n                    traces_categoricals.push(\r\n                        {\r\n                            x: grid,\r\n                            y: Array.from(average),\r\n                            type: 'bar',\r\n                            name: columns[i],\r\n                            marker: { color: this.indexToColor(i, averages.length), opacity: 0.7 }\r\n                        }\r\n                    )\r\n                });\r\n            }\r\n\r\n        });\r\n        var layout = {\r\n            title: {\r\n                text: 'Partial Dependence Plot',\r\n                font: {\r\n                    size: 14\r\n                },\r\n                xref: 'paper',\r\n                x: 0.05,\r\n            },\r\n            legend: {\r\n                x: 0.1,\r\n                y: 1,\r\n                orientation: \"h\",\r\n                font: {\r\n                    size: 8\r\n                },\r\n                bgcolor: 'rgba(0,0,0,0)',\r\n            },\r\n\r\n            font: {\r\n                size: 10\r\n            },\r\n            autosize: true,\r\n            xaxis: {\r\n                linecolor: 'black',\r\n                linewidth: 1,\r\n                mirror: true,\r\n                zeroline: false,\r\n                title: {\r\n                    text: 'Feature',\r\n                }\r\n            },\r\n            yaxis: {\r\n                linecolor: 'black',\r\n                linewidth: 1,\r\n                mirror: true,\r\n                zeroline: false,\r\n                title: {\r\n                    text: 'Prediction',\r\n                }\r\n            },\r\n        };\r\n        Plotly.newPlot(chartId, traces, layout, { ...plotlyImageExportConfig, responsive: true });\r\n        var layout2 = {\r\n            title: {\r\n                text: 'Partial Dependence Plot',\r\n                font: {\r\n                    size: 14\r\n                },\r\n                xref: 'paper',\r\n                x: 0.05,\r\n            },\r\n\r\n            barmode: 'group',\r\n            font: {\r\n                size: 10\r\n            },\r\n            autosize: true,\r\n            xaxis: {\r\n                linecolor: 'black',\r\n                linewidth: 1,\r\n                mirror: true,\r\n                title: {\r\n                    text: 'Feature',\r\n                }\r\n            },\r\n            bargap: 0.05,\r\n            yaxis: {\r\n                linecolor: 'black',\r\n                linewidth: 1,\r\n                mirror: true,\r\n                title: {\r\n                    text: 'Prediction',\r\n                }\r\n            },\r\n        };\r\n\r\n        Plotly.newPlot(chartIdCategorical, traces_categoricals, layout2);\r\n    }\r\n    drawAutoencoder(points, xIndex = 1, yIndex = 0, labels, is_classification) {\r\n        labels = labels.map(l => l[0])\r\n        let colors = [];\r\n        if (is_classification) {\r\n            var uniqueLabels = [...new Set(labels)];\r\n            colors = points.map((_, i) => this.indexToColor(uniqueLabels.indexOf(labels[i]), uniqueLabels.length))\r\n        } else {\r\n            let min = Math.min(...labels);\r\n            let max = Math.max(...labels);\r\n            colors = labels.map(label => this.indexToColorSequential(label, min, max))\r\n        }\r\n        var trace1 = {\r\n            x: points.map(point => point[xIndex]),\r\n            y: points.map(point => point[yIndex]),\r\n            mode: 'markers',\r\n            type: 'scatter',\r\n            name: 'Team A',\r\n            marker: {\r\n                size: 3,\r\n                color: colors\r\n            }\r\n        };\r\n\r\n        var data = [trace1];\r\n\r\n        var layout = {\r\n            legend: {\r\n                y: 0.5,\r\n                yref: 'paper',\r\n                font: {\r\n                    family: 'Arial, sans-serif',\r\n                    size: 20,\r\n                    color: 'grey',\r\n                }\r\n            },\r\n            xaxis: {\r\n                linecolor: 'black',\r\n                linewidth: 1,\r\n                mirror: true,\r\n                zeroline: false,\r\n\r\n            },\r\n            yaxis: {\r\n                linecolor: 'black',\r\n                linewidth: 1,\r\n                zeroline: false,\r\n                mirror: true,\r\n            },\r\n            margin: {\r\n                l: 50,\r\n                r: 40,\r\n                b: 50,\r\n                t: 40,\r\n                pad: 20\r\n            },\r\n        };\r\n\r\n        Plotly.newPlot('autoencoder', data, layout);\r\n    }\r\n    plotROC(id, fprs, tprs, labels, auc) {\r\n\r\n        let traces = []\r\n        fprs.forEach((fpr, index) => {\r\n            traces.push(\r\n                {\r\n                    x: fpr,\r\n                    y: tprs[index],\r\n                    mode: 'line',\r\n                    name: labels[index],\r\n                    marker: { color: this.indexToColor(index, labels.length) }\r\n                }\r\n            )\r\n        });\r\n        traces.push(\r\n            {\r\n                x: [0, 1],\r\n                y: [0, 1],\r\n                mode: 'line',\r\n                name: 'Chance Line',\r\n                marker: { color: 'black' },\r\n                line: {\r\n                    dash: 'dot',\r\n                    width: 1\r\n                }\r\n            }\r\n        )\r\n        var layout = {\r\n            title: {\r\n                text: (labels.length > 2 ? ' One-vs-Rest Strategy ROC Curve' : 'ROC Curve') + ' AUC: ' + (+auc).toFixed(2),\r\n                font: {\r\n                    size: 14\r\n                },\r\n            },\r\n            margin: {\r\n                b: 40,\r\n            },\r\n            legend: {\r\n                x: 1,\r\n                xanchor: 'right',\r\n                y: 0.1,\r\n                bgcolor: 'rgba(0,0,0,0)',\r\n\r\n            },\r\n            showlegend: true,\r\n            xaxis: {\r\n                linecolor: 'black',\r\n                linewidth: 1,\r\n                range: [-0.1, 1.1],\r\n                mirror: true,\r\n                title: {\r\n                    text: 'False positive rate',\r\n                },\r\n            },\r\n            yaxis: {\r\n                linecolor: 'black',\r\n                linewidth: 1,\r\n                mirror: true,\r\n                range: [-0.1, 1.1],\r\n                title: {\r\n                    text: 'True positive rate',\r\n                }\r\n            },\r\n        };\r\n\r\n        Plotly.newPlot('roc_plot_' + id, traces, layout, { responsive: true });\r\n    }\r\n\r\n    uniformSplist(n) {\r\n        let numbers = []\r\n        for (let i = 0; i < n; i++) {\r\n            numbers.push(i / (n - 1))\r\n        }\r\n        return numbers;\r\n    }\r\n    parallelCoordinatePlot(features, labels, column_names, is_classification) {\r\n        let labelEncoder = new LabelEncoder()\r\n        if (is_classification) {\r\n            labelEncoder.fit(labels)\r\n            labels = labelEncoder.transform(labels)\r\n        }\r\n        var uniqueLabels = [...new Set(labels)].sort((a, b) => a - b);\r\n        let points = this.uniformSplist(uniqueLabels.length)\r\n        let colorMapping = uniqueLabels.map((label, i) => [points[i], this.indexToColor(label, uniqueLabels.length)])\r\n\r\n        var data = [{\r\n            type: 'parcoords',\r\n            pad: [20, 20, 20, 20],\r\n            line: {\r\n                color: labels,\r\n                colorscale: is_classification ? colorMapping : 'jet',\r\n            },\r\n            dimensions: []\r\n        }];\r\n\r\n        column_names.forEach((column_name, i) => {\r\n            data[0].dimensions.push({\r\n                label: column_name,\r\n                values: features.map(m => m[i])\r\n            })\r\n\r\n        })\r\n        var layout = {\r\n            xaxis: {\r\n                linecolor: 'black',\r\n                linewidth: 1,\r\n                mirror: true,\r\n            },\r\n            yaxis: {\r\n                linecolor: 'black',\r\n                linewidth: 1,\r\n                mirror: true,\r\n            },\r\n        };\r\n\r\n        Plotly.newPlot('parallel_coordinate_plot', data, layout, { ...plotlyImageExportConfig, responsive: true, modeBarButtonsToRemove: ['resetScale2d', 'select2d', 'resetViews', 'sendDataToCloud', 'hoverCompareCartesian', 'lasso2d', 'drawopenpath '] });\r\n    }\r\n}","/* eslint-disable no-unused-vars */\r\n/* eslint-disable no-undef */\r\n\r\nimport { MinMaxScaler, StandardScaler } from 'danfojs/dist/danfojs-base';\r\nimport { calculateRSquared, calculateMSE, encode_name } from './utils';\r\nimport { FeatureCategories, Settings } from \"./settings.js\";\r\nimport Plotly from 'danfojs/node_modules/plotly.js-dist-min';\r\n\r\nexport default class UI {\r\n    constructor(parser, chart_controller) {\r\n        this.data_parser = parser\r\n        this.chart_controller = chart_controller\r\n    }\r\n\r\n    get_model_settings() {\r\n        let model_settings = {};\r\n        let model_name = parseInt(document.getElementById('model_name').value);\r\n        const target = document.getElementById(\"target\").value;\r\n        let is_classification = document.getElementById(target).value !== FeatureCategories.Numerical;\r\n        var model;\r\n        if (is_classification) {\r\n            for (const m in Settings.classification) {\r\n                if (Settings.classification[m].value === model_name) {\r\n                    model_name = m\r\n                    model_settings.name = Settings.classification[m].label\r\n                    model = Settings.classification[model_name];\r\n                    break;\r\n                }\r\n            }\r\n        } else {\r\n            for (const m in Settings.regression) {\r\n                if (Settings.regression[m].value === model_name) {\r\n                    model_name = m\r\n                    model_settings.name = Settings.regression[m].label\r\n                    model = Settings.regression[model_name];\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        model_name = parseInt(document.getElementById('model_name').value);\r\n        for (const option in model?.options) {\r\n            if (model.options[option].type === \"select\") {\r\n                let option_value = document.getElementById(option + \"_\" + model_name)?.value;\r\n                model_settings[option] = option_value ?? model.options[option].default\r\n            } else {\r\n                if (model.options[option].type === \"number\") {\r\n                    let option_value = document.getElementById(option + \"_\" + model_name)?.value;\r\n                    model_settings[option] = !option_value ? model.options[option].default : parseFloat(option_value)\r\n                } else {\r\n                    let option_value = document.getElementById(option + \"_\" + model_name)?.value;\r\n                    model_settings[option] = option_value ?? model.options[option].default\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        return model_settings\r\n    }\r\n\r\n    scale_data(dataset, column, normalization_type) {\r\n        switch (normalization_type) {\r\n            case \"1\": {\r\n                let scaler = new MinMaxScaler()\r\n                scaler.fit(dataset[column])\r\n                dataset.addColumn(column, scaler.transform(dataset[column]), { inplace: true })\r\n                break;\r\n            }\r\n            case \"2\":\r\n                dataset.addColumn(column, dataset[column].apply((x) => x * x), { inplace: true })\r\n                break;\r\n            case \"3\":\r\n                dataset.addColumn(column, dataset[column].apply((x) => Math.log(x)), { inplace: true })\r\n                break;\r\n            case \"4\": {\r\n                let scaler = new StandardScaler()\r\n                scaler.fit(dataset[column])\r\n                dataset.addColumn(column, scaler.transform(dataset[column]), { inplace: true })\r\n                break;\r\n            }\r\n            default:\r\n                break;\r\n        }\r\n\r\n    }\r\n\r\n\r\n    // createDatasetPropsDropdown(items) {\r\n    //     const myClass = this\r\n    //     //feature selection\r\n    //     $('#props').empty()\r\n    //     $('#normalizations').empty()\r\n    //     $('#features-selection').empty()\r\n    //     $('#features').empty()\r\n    //     $('#props').append(this.createTargetDropdown(items))\r\n    //     $('#features-selection').append(`<div class=\"column is-6\"><button id =\"feature_selection_modal\" class=\"button is-warning is-small\" >Select Features</button></div>`)\r\n    //     document.querySelector('#feature_selection_modal').addEventListener('click', function (e) {\r\n    //         var features_dropdown = document.getElementById(\"config_modal\")\r\n    //         var props = document.getElementById(\"props\")\r\n    //         var props_feature_selection_button = document.getElementById(\"feature_selection_modal\")\r\n\r\n    //         if (window.getComputedStyle(features_dropdown).display !== \"none\") {\r\n    //             props_feature_selection_button.innerText = \"Select Features\"\r\n    //             features_dropdown.style.display = \"none\"\r\n    //             props.style.display = \"block\"\r\n    //             const redraw_plots_data_analysis = new CustomEvent(\"update_graphs\");\r\n    //             props_feature_selection_button.dispatchEvent(redraw_plots_data_analysis)\r\n    //             return\r\n    //         }\r\n    //         props_feature_selection_button.innerText = \"Config model\"\r\n    //         features_dropdown.style.display = \"block\"\r\n    //         props.style.display = \"none\"\r\n\r\n    //     });\r\n    //     $(\"#features-selection\").append(`\r\n    //             <div id=\"config_modal\" style=\"display:none;overflow-y:scroll;max-height: 600px;height:500px\">\r\n    //                 <table class=\"table is-narrow is-size-7\" \r\n    //                 <thead>\r\n    //                 <tr>\r\n    //                   <th><input id=\"select_all\" value=\"1\" name=\"selectall\" type=\"checkbox\" checked=\"checked\" /></th>\r\n    //                   <th>Name</th>\r\n    //                   <th>Scale</th>\r\n    //                 </tr>\r\n    //               </thead>\r\n    //               <tbody id=\"features\">\r\n    //               </tbody>\r\n    //                 </table>\r\n    //             </div>\r\n    //         </div>\r\n    //         `)\r\n    //     document.querySelector('#select_all').addEventListener('click', function (e) {\r\n    //         if ($(\"#select_all\").prop('checked')) {\r\n    //             $('.features-filter').prop('checked', true);\r\n    //         } else {\r\n    //             $('.features-filter').prop('checked', false);\r\n    //         }\r\n    //     });\r\n    //     const default_target = items.columns[items.columns.length - 1]\r\n    //     items.columns.forEach(column => {\r\n    //         let key = encode_name(column)\r\n    //         $('#features').append(`\r\n    //             <tr>\r\n    //                 <td>\r\n    //                 <label class=\"checkbox my-2\">\r\n    //                 <input id=\"${key + \"-checkbox\"}\" type=\"checkbox\" value=\"1\" class=\"features-filter\" checked=\"checked\">\r\n    //                 </label>\r\n    //                 </td>\r\n    //                 <td class=\"mt-1\">\r\n    //                 ${column}\r\n    //                 </td>\r\n    //                 <td>\r\n    //                 <div class=\"select is-small is-fullwidth mb-1\">\r\n    //                     <select id=\"${key}\">\r\n    //                         <option value=\"${FeatureCategories.Numerical}\">Numerical</option>\r\n    //                         <option value=\"${FeatureCategories.Nominal}\">Nominal</option>\r\n    //                         <option value=\"${FeatureCategories.Ordinal}\">Ordinal</option>\r\n    //                     </select>\r\n    //                 </div>\r\n    //                 </td>\r\n    //             </tr>\r\n    //             `);\r\n    //         $('#' + key).on('change', function (e) {\r\n    //             const type = e.target.value\r\n    //             if (key === document.getElementById(\"target\").value) {\r\n    //                 $('#algorithm').empty()\r\n    //                 if (type === 'Numerical') {\r\n    //                     $('#algorithm').append(myClass.updateAlgorithmsSelect(1));\r\n    //                 } else {\r\n    //                     $('#algorithm').append(myClass.updateAlgorithmsSelect(2));\r\n    //                 }\r\n    //             }\r\n    //         });\r\n    //         const id = column\r\n    //         if (items.column(column).dtype !== 'string') {\r\n    //             $('#' + key).val(FeatureCategories.Numerical)\r\n    //         } else {\r\n    //             $('#' + key).val(FeatureCategories.Ordinal)\r\n    //         }\r\n    //     });\r\n\r\n\r\n\r\n\r\n\r\n\r\n    //     // $(document).on('change', '#' + default_target, function (e) {\r\n    //     //     $(\"#algorithm\").empty();\r\n    //     //     $(\"#algorithm\").append(myClass.updateAlgorithmsSelect(e.target.value == 1 ? 1 : 2))\r\n    //     // });\r\n    //     $(\"#model_options\").empty();\r\n    //     $('#algorithm').on('change', function () {\r\n    //         $(\"#model_options\").empty();\r\n    //     });\r\n    //     $('#props').append(`\r\n    //         <div class=\"column is-12\">\r\n    //             <div class=\"label is-size-7\">Seed</div>\r\n    //             <input\r\n    //             id=\"seed\"\r\n    //             required\r\n    //             min=\"0\"\r\n    //             class=\"input is-info is-small\"\r\n    //             type=\"number\"\r\n    //             placeholder=\"Seed\"\r\n    //             value = \"123\"\r\n    //             />\r\n    //         </div>`);\r\n    //     $('#props').append(`\r\n    //         <div class=\"column is-12\">\r\n    //             <div class=\"label is-size-7\">Imputation\r\n    //                 <span id=\"imputation_help\" class=\"icon has-text-success\">\r\n    //                     <i class=\"fas fa-info-circle\"></i>\r\n    //                 </span>\r\n    //             </div>\r\n    //             <div class=\"select is-small is-fullwidth mb-1\">\r\n    //                 <select id=\"imputation\">\r\n    //                     <option value=\"1\">Delete rows</option>\r\n    //                     <option value=\"2\">Mean and Mode</option>\r\n    //                     <option value=\"3\">Linear regression</option>\r\n    //                     <option value=\"4\">random forest</option>\r\n    //                 </select>\r\n    //             </div>\r\n    //         </div>\r\n    //         `);\r\n    //     $('#props').append(`\r\n    //         <div class=\"column is-12\">\r\n    //             <div class=\"label is-size-7\">Cross Validation\r\n    //             <span id=\"cv_help\" class=\"icon has-text-success\">\r\n    //                 <i class=\"fas fa-info-circle\"></i>\r\n    //             </span>\r\n    //             </div>\r\n    //             <div class=\"select is-fullwidth is-small mb-1\">\r\n    //                 <select id=\"cross_validation\">\r\n    //                     <option value=\"1\">70 % training - 30 % test</option>\r\n    //                     <option value=\"2\">No</option>\r\n    //                     <option value=\"3\">K-fold</option>\r\n    //                 </select>\r\n    //             </div>\r\n    //         </div>\r\n    //         `)\r\n    //     $('#target').val(default_target)\r\n\r\n\r\n    //     $('#target').on('change', function (e) {\r\n    //         const redraw_plots_data_analysis = new CustomEvent(\"update_graphs\");\r\n    //         var props_feature_selection_button = document.getElementById(\"feature_selection_modal\")\r\n    //         props_feature_selection_button.dispatchEvent(redraw_plots_data_analysis)\r\n    //         const type = document.getElementById(e.target.value).value\r\n    //         $('#algorithm').empty()\r\n    //         if (type === 'Numerical') {\r\n    //             $('#algorithm').append(myClass.updateAlgorithmsSelect(1));\r\n    //         } else {\r\n    //             $('#algorithm').append(myClass.updateAlgorithmsSelect(2));\r\n    //         }\r\n    //     });\r\n\r\n\r\n\r\n\r\n    //     //modle options\r\n    //     $('#algorithm').on('change', function (e) {\r\n    //         const model_type = items.column(default_target).dtype !== 'string' ? 1 : 2;\r\n    //         const label = model_type == 1 ? \"regression\" : \"classification\"\r\n    //         for (const key in Settings[label]) {\r\n    //             if (Settings.hasOwnProperty.call(Settings[label], key)) {\r\n    //                 const item = Settings[label][key];\r\n    //             }\r\n    //         }\r\n    //     });\r\n    //     if (items.column(default_target).dtype !== 'string') {\r\n    //         $('#props').append(this.createAlgorithmsSelect(1));\r\n    //     } else {\r\n    //         $('#props').append(this.createAlgorithmsSelect(2));\r\n    //     }\r\n    //     $(\"#props\").append(`\r\n    //         <div class=\"column is-3\">\r\n    //         <button class=\"button is-small is-success\" id=\"config_modal_button\">\r\n    //         <span class=\"icon is-small\">\r\n    //         <i class=\"fas fa-cog\"></i>\r\n    //         </span>\r\n    //         </button>\r\n    //         </div>\r\n    //         <div class=\"column is-12\" id=\"settings\" style=\"display:none\">\r\n    //         </div>`)\r\n    //     $(\"#model_name\").on(\"change\", () => {\r\n    //         document.getElementById(\"settings\").innerHTML = \"\"\r\n    //         document.getElementById(\"settings\").style.display = \"none\";\r\n\r\n    //     })\r\n    //     document.querySelector('#config_modal_button').addEventListener('click', function (e) {\r\n    //         let model_name = document.getElementById('model_name').value;\r\n    //         const target = document.getElementById(\"target\").value;\r\n    //         let is_classification = document.getElementById(target).value !== FeatureCategories.Numerical;\r\n    //         var model;\r\n    //         if (is_classification) {\r\n    //             for (const key in Settings.classification) {\r\n    //                 if (Object.hasOwnProperty.call(Settings.classification, key)) {\r\n    //                     const element = Settings.classification[key];\r\n    //                     if (element.value === parseInt(model_name)) {\r\n    //                         model = Settings.classification[key];\r\n    //                     }\r\n    //                 }\r\n    //             }\r\n    //         } else {\r\n    //             for (const key in Settings.regression) {\r\n    //                 if (Object.hasOwnProperty.call(Settings.regression, key)) {\r\n    //                     const element = Settings.regression[key];\r\n    //                     if (element.value === parseInt(model_name)) {\r\n    //                         model = Settings.regression[key];\r\n    //                     }\r\n    //                 }\r\n    //             }\r\n    //         }\r\n    //         var options_modal_content = document.getElementById(\"settings\");\r\n    //         if (window.getComputedStyle(options_modal_content).display !== \"none\") {\r\n    //             options_modal_content.innerHTML = \"\"\r\n    //             options_modal_content.style.display = \"none\"\r\n    //             return\r\n    //         }\r\n    //         options_modal_content.innerHTML = \"\"\r\n    //         for (const key in model.options) {\r\n    //             options_modal_content.style.display = \"block\"\r\n    //             if (Object.hasOwnProperty.call(model.options, key)) {\r\n    //                 const option_type = model.options[key][\"type\"]\r\n    //                 const placeholder = model.options[key][\"placeholder\"]\r\n    //                 if (option_type === \"number\" || option_type === \"text\") {\r\n    //                     $('#settings').append(`\r\n    //                         <div class=\"column is-12\">\r\n    //                             <div class=\"field is-horizontal\">\r\n    //                                 <div class=\"field-label is-small\">\r\n    //                                 <label class=\"label is-size-7\">${key}</label>\r\n    //                                 </div>\r\n    //                                 <div class=\"field-body\">\r\n    //                                 <div class=\"control\">\r\n    //                                     <input id=\"${key + \"_\" + model_name}\" class=\"input is-small\" type=\"${option_type}\" placeholder=\"${placeholder ?? \"\"}\">\r\n    //                                 </div>\r\n    //                                 </div>\r\n    //                             </div>\r\n    //                         </div>\r\n    //                         `)\r\n    //                     if (model.options[key][\"default\"]) {\r\n    //                         document.getElementById(key + \"_\" + model_name).value = model.options[key][\"default\"]\r\n    //                     }\r\n    //                 } else if (option_type === \"select\") {\r\n    //                     console.log(model.options[key][\"for\"]);\r\n\r\n    //                     let result = \"\"\r\n    //                     let options = model.options[key][\"values\"]\r\n    //                     result = `\r\n    //                         <div class=\"column is-12\">\r\n    //                             <div class=\"field is-horizontal\">\r\n    //                                 <div class=\"field-label is-small\">\r\n    //                                    <label class=\"label is-size-7 mr-1\">${key}</label>\r\n    //                                 </div>\r\n    //                                 <div class=\"field-body\">\r\n    //                                     <div class=\"select is-small\">\r\n    //                                         <select id=\"${key + \"_\" + model_name}\">\r\n    //                                 </div>\r\n    //                         `\r\n    //                     for (let i = 0; i < options.length; i++) {\r\n    //                         result += `<option value=\"${options[i]?.value}\">${options[i].label}</option>`\r\n    //                     }\r\n    //                     result += \"</select></div></div></div>\"\r\n    //                     $('#settings').append(result)\r\n\r\n    //                 }\r\n    //             }\r\n    //         }\r\n    //     });\r\n    //     $('#props').append(`<div class=\"column is-6\"><button class=\"button is-info mt-2\" id=\"train-button\">train</button></div>`);\r\n\r\n    //     // $('#kde_select').append(this.createFeaturesDropdown(rowMetadata))\r\n    // }\r\n\r\n    createAlgorithmsSelect(category) {\r\n        let result = '<div id=\"algorithm\" class=\"column is-9\"><div class=\"select is-small mb-1\"> <select id=\"model_name\" class=\"select\">'\r\n        const label = category == 1 ? \"regression\" : \"classification\"\r\n        for (const key in Settings[label]) {\r\n            if (Settings.hasOwnProperty.call(Settings[label], key)) {\r\n                const item = Settings[label][key];\r\n                result += `<option value=\"${item.value}\">${item.label}</option>`\r\n            }\r\n        }\r\n        result += '</select></div></div>'\r\n\r\n        return result\r\n    }\r\n    updateAlgorithmsSelect(category) {\r\n        let result = '<div class=\"select is-small mb-1\"> <select id=\"model_name\" class=\"select\">'\r\n        const label = category == 1 ? \"regression\" : \"classification\"\r\n        for (const key in Settings[label]) {\r\n            if (Settings.hasOwnProperty.call(Settings[label], key)) {\r\n                const item = Settings[label][key];\r\n                result += `<option value=\"${item.value}\">${item.label}</option>`\r\n            }\r\n        }\r\n        result += '</select></div>'\r\n        return result\r\n    }\r\n\r\n    find_selected_columns(columns, get_all = false) {\r\n        const selected_columns = [];\r\n        columns.forEach(column => {\r\n            let key = encode_name(column)\r\n            if (document.getElementById(key + '-checkbox').checked || get_all) {\r\n                selected_columns.push(column);\r\n            }\r\n        });\r\n        return selected_columns;\r\n    }\r\n    find_selected_columns_types(columns, include_target = true) {\r\n        if (include_target === false) {\r\n            const target = document.getElementById(\"target\").value;\r\n            columns = columns.filter(column => column !== target)\r\n        }\r\n        const column_types = []\r\n        columns.forEach(column => {\r\n            let key = encode_name(column)\r\n            column_types.push({\r\n                name: column,\r\n                type: document.getElementById(key).value\r\n            })\r\n        });\r\n        return column_types\r\n    }\r\n    createTargetDropdown(items) {\r\n        let result = '<div  class=\"column is-12\"><div class=\"label is-size-7\">Target</div><div class=\"select is-fullwidth is-small mb-1\"> <select id=\"target\">'\r\n        items.columns.forEach(column => {\r\n            let key = encode_name(column)\r\n            result += `<option value=\"${key}\">${key}</option>`\r\n\r\n        });\r\n        result += '</select></div></div>'\r\n        return result\r\n    }\r\n    createFeaturesDropdown(items) {\r\n        let result = '<div  class=\"column is-4\"><h4>Target</h4><div class=\"select mb-1\"> <select class=\"select\" id=\"kde_feature\">'\r\n        for (const key in items) {\r\n            result += `<option value=\"${key}\">${key}</option>`\r\n        }\r\n        result += '</select></div></div>'\r\n        return result\r\n    }\r\n    insertSpaces(string) {\r\n        string = string.replace(/([a-z])([A-Z])/g, '$1 $2');\r\n        string = string.replace(/([A-Z])([A-Z][a-z])/g, '$1 $2')\r\n        return string;\r\n    }\r\n    renderDatasetStats(data, continuousFeatures, categoricalFeatures) {\r\n        //build numerical feature table table\r\n        let continuousFeaturesStats = []\r\n        let categoricalFeaturesStats = []\r\n\r\n        const continuousHeaders =\r\n            [{ field: 'name', label: '#' }, { field: 'min', label: 'Min' }, { field: 'max', label: 'Max' },\r\n            { field: 'mean', label: 'Mean' },\r\n            { field: 'median', label: 'Median' }\r\n                , { field: 'std', label: 'std' }, { field: 'missingVlauesCount', label: '# NAs' }\r\n                , { field: 'type', label: 'type' }\r\n            ];\r\n        const categoricalHeaders =\r\n            [{ field: 'name', label: '#' }, { field: 'shape', label: 'Shape' }, { field: 'mode', label: 'Mode' }, { field: 'percentage', label: 'Mode Percentage' }\r\n                , { field: 'missingVlauesCount', label: '# NAs' }\r\n            ];\r\n\r\n        for (let i = 0; i < continuousFeatures.length; i++) {\r\n            const column = continuousFeatures[i].name;\r\n            continuousFeaturesStats.push({\r\n                name: column,\r\n                min: data.column(column).min().toFixed(2),\r\n                max: data.column(column).max().toFixed(2),\r\n                median: data.column(column).median().toFixed(2),\r\n                mean: data.column(column).mean().toFixed(2),\r\n                std: data.column(column).std().toFixed(2),\r\n                missingValuesCount: data.column(column).isNa().sum(),\r\n                type: 1,\r\n                selected: continuousFeatures[i].selected\r\n            })\r\n        }\r\n\r\n\r\n        categoricalFeatures.forEach((item, i) => {\r\n            let column = item.name\r\n            const shape = [...new Set(data.column(column).values)];\r\n            const category_info = this.getCategoricalMode(data.column(column).values)\r\n            categoricalFeaturesStats.push({\r\n                name: column,\r\n                shape: shape.length,\r\n                mode: category_info['mode'],\r\n                percentage: ((category_info[category_info['mode']] / category_info['total'])).toFixed(2),\r\n                missingValuesCount: data.column(column).isNa().sum(),\r\n                type: 2,\r\n                selected: item.selected\r\n            })\r\n\r\n        });\r\n        return [\r\n            continuousHeaders,\r\n            continuousFeaturesStats,\r\n            categoricalHeaders,\r\n            categoricalFeaturesStats,\r\n        ]\r\n\r\n    }\r\n    getCategoricalMode(arr) {\r\n        if (arr.length === 0) {\r\n            return null;\r\n        }\r\n\r\n        const categoryCount = {};\r\n        categoryCount['total'] = 0\r\n        categoryCount['mode'] = ''\r\n        for (let i = 0; i < arr.length; i++) {\r\n            const category = arr[i];\r\n            if (category === null || category === undefined) {\r\n                continue\r\n            }\r\n            categoryCount['total']++\r\n            if (category in categoryCount) {\r\n                categoryCount[category]++;\r\n            } else {\r\n                categoryCount[category] = 1;\r\n            }\r\n        }\r\n\r\n        let modeCategory = null;\r\n        let modeCount = 0;\r\n        for (const category in categoryCount) {\r\n            if (category === 'total') {\r\n                continue\r\n            }\r\n            if (categoryCount[category] > modeCount) {\r\n                modeCategory = category;\r\n                modeCount = categoryCount[category];\r\n            }\r\n        }\r\n        categoryCount['mode'] = modeCategory;\r\n        return categoryCount;\r\n    }\r\n\r\n    get_numeric_columns(dataset, filter) {\r\n        let selected_columns = this.find_selected_columns(dataset.columns, !filter)\r\n        let selected_columns_types = this.find_selected_columns_types(selected_columns);\r\n        selected_columns = selected_columns.filter(column => {\r\n            let i = selected_columns_types.findIndex(col => col.name === column)\r\n            if (selected_columns_types[i]?.type === FeatureCategories.Numerical) {\r\n                return true;\r\n            }\r\n            return false;\r\n        })\r\n        let numericColumns = []\r\n        dataset.columns.forEach(column => {\r\n            if (dataset.column(column).dtype !== 'string' && column !== \"Id\" && selected_columns.includes(column)) {\r\n                numericColumns.push(column)\r\n            }\r\n        });\r\n        return numericColumns\r\n    }\r\n    get_categorical_columns(dataset, filter) {\r\n        let selected_columns = this.find_selected_columns(dataset.columns, !filter)\r\n        let selected_columns_types = this.find_selected_columns_types(selected_columns);\r\n        selected_columns = selected_columns.filter(column => {\r\n            let i = selected_columns_types.findIndex(col => col.name === column)\r\n            if (i !== -1 && selected_columns_types[i]?.type !== FeatureCategories.Numerical) {\r\n                return true;\r\n            }\r\n            return false;\r\n        })\r\n        let categorical_columns = []\r\n        dataset.columns.forEach(column => {\r\n            if (column !== \"Id\" && selected_columns.includes(column)) {\r\n                categorical_columns.push(column)\r\n            }\r\n        });\r\n        return categorical_columns\r\n    }\r\n    column_types(columns) {\r\n        let selected_columns = this.find_selected_columns(columns, false)\r\n        return this.find_selected_columns_types(selected_columns);\r\n    }\r\n    async visualize(dataset, len, file_name) {\r\n        const current_class = this\r\n        this.renderDatasetStats(dataset);\r\n        let numericColumns = this.get_numeric_columns(dataset, true)\r\n        let categorical_columns = this.get_categorical_columns(dataset, true)\r\n        const target = document.getElementById(\"target\").value;\r\n        let columns = [...new Set(numericColumns.concat(categorical_columns))];\r\n\r\n        const filterd_dataset = dataset.loc({ columns: columns })\r\n        filterd_dataset.dropNa({ axis: 1, inplace: true })\r\n        numericColumns = numericColumns.filter(m => m !== target)\r\n        let is_classification = document.getElementById(target).value !== FeatureCategories.Numerical;\r\n        //draw kdes\r\n        let limit = 0\r\n        if (numericColumns.length > 0 && limit < 10) {\r\n            document.getElementById(\"container\").innerHTML = \"\";\r\n            numericColumns.forEach(col => {\r\n                if (col !== target) {\r\n                    this.chart_controller.draw_kde(filterd_dataset, col, target, \"nrd\", is_classification);\r\n                }\r\n            });\r\n            limit++;\r\n        }\r\n        limit = 0\r\n        //draw categories barplot\r\n        if (categorical_columns.length > 0 && limit < 10) {\r\n            document.getElementById(\"categories_barplots\").innerHTML = \"\";\r\n            categorical_columns.forEach(col => {\r\n                if (col !== target) {\r\n                    this.chart_controller.draw_categorical_barplot(filterd_dataset.loc({ columns: [col] }).values, target, col);\r\n                }\r\n            });\r\n            limit++;\r\n        }\r\n        if (is_classification) {\r\n            let labels = dataset.column(target).values;\r\n            let unique_labels = [...new Set(labels)];\r\n            let counts = [];\r\n            for (let i = 0; i < unique_labels.length; i++) {\r\n                counts.push(labels.filter(m => m === unique_labels[i]).length);\r\n            }\r\n            this.chart_controller.classification_target_chart(counts, unique_labels, file_name, \"target_chart\", target);\r\n        } else {\r\n            this.chart_controller.regression_target_chart(dataset.column(target).values, \"target_chart\", target);\r\n        }\r\n        let features = []\r\n\r\n        numericColumns = this.get_numeric_columns(dataset, true)\r\n        categorical_columns = this.get_categorical_columns(dataset, true)\r\n        // features = Object.values(numericColumns).concat(Object.values(categorical_columns))\r\n\r\n        dataset = this.data_parser.handle_missing_values(dataset)\r\n        // this.chart_controller.ScatterplotMatrix(dataset.loc({ columns: features }).values, features, dataset.column(target).values, categorical_columns.length,\r\n        //     is_classification, numericColumns, categorical_columns, dataset).then(() => {\r\n        //         document.getElementById('splom_update').addEventListener('click', async function (e) {\r\n        //             console.log('update');\r\n        //             Plotly.purge('scatterplot_mtx');\r\n        //             $('#scatterplot_mtx').empty()\r\n        //             await current_class.visualize(dataset);\r\n        //         });\r\n        //     })\r\n\r\n    }\r\n\r\n\r\n    // async createSampleDataTable(dataset) {\r\n    //     let cols = []\r\n    //     let column_names = dataset.columns\r\n    //     for (let i = 0; i < column_names.length; i++) {\r\n    //         cols.push({ title: column_names[i] })\r\n    //     }\r\n    //     new DataTable('#sample_data_table', {\r\n    //         responsive: true,\r\n    //         columns: cols,\r\n    //         data: dataset.head(5).values,\r\n    //         info: false,\r\n    //         search: false,\r\n    //         ordering: false,\r\n    //         dom: '<\"my-class\">',\r\n    //         initComplete: function (settings, json) {\r\n    //             $('.my-class').html('Sample Data');\r\n    //         },\r\n    //         searching: false,\r\n    //         paging: false,\r\n    //         bDestroy: true,\r\n    //     });\r\n\r\n    // }\r\n    toggle_loading_progress(show = false) {\r\n        let element = document.getElementById(\"progress\");\r\n        if (!show) {\r\n            element.style.display = \"block\";\r\n        } else {\r\n            element.style.display = \"none\";\r\n        }\r\n\r\n    }\r\n    // show_settings(settings, numeric_columns, categorical_columns, target, dataset_name, i) {\r\n    //     let columns = numeric_columns.concat(categorical_columns)\r\n    //     let column_types = [];\r\n    //     for (let i = 0; i < columns.length; i++) {\r\n    //         const column = columns[i];\r\n    //         column_types.push({ column: column, type: document.getElementById(column + '--normal') })\r\n    //     }\r\n    //     let columns_transformation = '';\r\n    //     for (let i = 0; i < columns.length; i++) {\r\n    //         const column_name = encode_name(columns[i]);\r\n    //         let normalization_type = document.getElementById(column_name + '--normal')?.value;\r\n    //         if (normalization_type && normalization_type !== \"0\") {\r\n    //             columns_transformation += columns[i] + ': ' + normalization_type + ' '\r\n    //         }\r\n    //     }\r\n\r\n    //     let content = `\r\n    //     <div class=\"column is-12\">\r\n    //     <div class=\"notification\">\r\n    //     <p class=\"title my-1 is-5\">${settings.name}</p>\r\n    //     <div class=\"columns is-multiline is-gapless\">`;\r\n    //     for (const key in settings) {\r\n    //         if (key !== 'name') {\r\n    //             if (Object.hasOwnProperty.call(settings, key)) {\r\n    //                 const element = settings[key];\r\n    //                 content += `<div class=\"column is-12 \"><p><strong>${key}</strong>: ${element}</p></div>`\r\n    //             }\r\n    //         }\r\n\r\n    //     }\r\n    //     content += `<div class=\"column is-12 \"><p><strong>Dataset name :</strong> ${dataset_name}</p></div>`\r\n    //     content += `<div class=\"column is-12 \"><p><strong>Target :</strong> ${target}</p></div>`\r\n    //     content += `<div class=\"column is-12 \"><p><strong>Continuous featues :</strong> ${numeric_columns}</p></div>`\r\n    //     content += `<div class=\"column is-12 \"><p><strong>Categorical featues :</strong> ${categorical_columns}</p></div>`\r\n    //     content += `<div class=\"column is-12 \"><p><strong>Transformations :</strong> ${columns_transformation}</p></div>`\r\n    //     content += `<div class=\"column is-12 \">\r\n    //     <button class=\"button is-danger\" id=\"remove_${i}\"> Remove results </button>\r\n    //     </div>`\r\n\r\n    //     content += `</div></div></div>`\r\n    //     $(\"#tabs_info li[data-index='\" + i + \"'] #results_\" + i + \"\").append(content);\r\n\r\n    //     document.getElementById(\"remove_\" + i).addEventListener('click', () => {\r\n    //         $('#' + 'tab_' + i).remove();\r\n    //         if (document.getElementById(target).value !== FeatureCategories.Numerical) {\r\n    //             Plotly.purge('pca_results_' + i)\r\n    //             $('#predictions_table_' + i).DataTable().destroy();\r\n    //             $('#' + 'info_' + i).remove();\r\n    //         } else {\r\n    //             Plotly.purge('regression_y_yhat_' + i)\r\n    //             $('#predictions_table_' + i).DataTable().destroy();\r\n    //             $('#' + 'info_' + i).remove();\r\n    //         }\r\n\r\n    //     });\r\n    // }\r\n    // create_model_result_tab(index) {\r\n    //     $(\"#tabs_content\").append(`\r\n    //     <li data-index=\"${index}\" id=\"tab_${index}\">\r\n    //        <a>${index}</a>\r\n    //     </li>`)\r\n    //     $(\"#tabs_info\").append(`\r\n    //     <li data-index=\"${index}\" id=\"info_${index}\"  class=\" tabs-li\">\r\n    //     <div id=\"results_${index}\" class=\"columns is-multiline\"></div>\r\n    //     </li>`)\r\n    //     $(\"#tabs_content li\").removeClass(\"is-active\");\r\n    //     $(\"#tabs_info li\").removeClass(\"is-active\");\r\n    //     $(\"#tabs_info li[data-index='\" + index + \"']\").addClass(\"is-active\");\r\n    //     $(\"#tabs_content li[data-index='\" + index + \"']\").addClass(\"is-active\");\r\n    // }\r\n\r\n    init_tooltips(tippy) {\r\n        tippy('#kde_help', {\r\n            interactive: true,\r\n            popperOptions: {\r\n                positionFixed: true,\r\n            },\r\n            content: 'Default bandwidth method :Silverman’s rule of thumb',\r\n        });\r\n        tippy('#normalization_help', {\r\n            interactive: true,\r\n            popperOptions: {\r\n                positionFixed: true,\r\n            },\r\n            content: '<p>not functional yet</p><p>standard scaler uses z = (x - u) / s</p><p>Transform features by scaling each feature to a given range</p>',\r\n            allowHTML: true,\r\n        });\r\n        tippy('#imputation_help', {\r\n            interactive: true,\r\n            popperOptions: {\r\n                positionFixed: true,\r\n            },\r\n            content: 'currently we are just deleting rows with missing values',\r\n            allowHTML: true,\r\n        });\r\n        tippy('#cv_help', {\r\n            interactive: true,\r\n            popperOptions: {\r\n                positionFixed: true,\r\n            },\r\n            content: 'option 1 and 2 are working',\r\n            allowHTML: true,\r\n        });\r\n    }\r\n\r\n    // init_tabs_events() {\r\n    //     $(\"#tabs_content\").on(\"click\", \"li\", function () {\r\n    //         var index = $(this).data(\"index\");\r\n    //         $(\"#tabs_content li\").not(this).removeClass(\"is-active\");\r\n    //         $(\"#tabs_info li\").removeClass(\"is-active\");\r\n    //         $(\"#tabs_info li[data-index='\" + index + \"']\").addClass(\"is-active\");\r\n    //         $(this).toggleClass(\"is-active \");\r\n    //     });\r\n    //     $(\".tabs ul li\").click(function () {\r\n    //         window.dispatchEvent(new Event('resize'));\r\n    //     });\r\n    // }\r\n    predictions_table_regression(x, y, predictions, tab_index) {\r\n        let table_columns = [];\r\n        x.addColumn(\"residuals: \", y.map((item, i) => item - predictions[i]), { inplace: true });\r\n        x.addColumn(\"predictions: \", predictions, { inplace: true });\r\n        x.addColumn(\"y\", y, { inplace: true });\r\n\r\n\r\n        x.columns.forEach(element => {\r\n            table_columns.push({ title: element });\r\n        });\r\n        let columns = x.columns.slice().reverse();\r\n        new DataTable('#predictions_table_' + tab_index, {\r\n            pageLength: 5,\r\n            responsive: false,\r\n            paging: true,\r\n            columnDefs: [\r\n                {\r\n                    render: function (data, type, row) {\r\n                        return data.toFixed(2);\r\n                    },\r\n                    targets: \"_all\",\r\n                }\r\n            ],\r\n            bPaginate: true,\r\n            columns: table_columns.reverse(),\r\n            data: x.loc({ columns: columns }).values,\r\n            bDestroy: true,\r\n        });\r\n    }\r\n    removeTable(tableId) {\r\n        $(tableId).DataTable().destroy()\r\n\r\n    }\r\n    predictions_table(x, y, predictions, probs = null, tab_index = 0) {\r\n        let table_columns = [];\r\n        if (probs !== null) {\r\n            x.addColumn(\"probs\", probs, { inplace: true });\r\n        }\r\n        x.addColumn(\"y\", y, { inplace: true });\r\n        x.addColumn(\"predictions\", predictions, { inplace: true });\r\n        x.columns.forEach(element => {\r\n            table_columns.push({ title: element });\r\n        });\r\n        let columns = x.columns.slice().reverse();\r\n        new DataTable('#predictions_table_' + tab_index, {\r\n            pageLength: 10,\r\n            responsive: false,\r\n            paging: true,\r\n            \"bPaginate\": true,\r\n            columns: table_columns.reverse(),\r\n            data: x.loc({ columns: columns }).values,\r\n            bDestroy: true,\r\n            columnDefs: [\r\n                {\r\n                    // render: function (data, type, row) {\r\n                    //     for (let i = 0; i < data.length; i++) {\r\n                    //         data[i] = data[i].toFixed(2);\r\n                    //     }\r\n                    //     return data\r\n                    // },\r\n                    // targets: [-3]\r\n                },\r\n                {\r\n                    render: function (data, type, row) {\r\n                        return data.toFixed(2);\r\n                    },\r\n                    targets: [...Array(table_columns.length).keys()].filter(m => m >= 2)\r\n                }\r\n            ],\r\n            rowCallback: function (row, data, index) {\r\n                var prediction = data[0];\r\n                var y = data[1];\r\n                if (prediction !== y) {\r\n                    $(row).addClass('is-danger');\r\n                }\r\n            }\r\n        });\r\n    }\r\n    yhat_plot(y_test, predictions, container, title = '') {\r\n        Plotly.newPlot(container, [{\r\n            x: y_test,\r\n            y: predictions,\r\n            type: 'scatter',\r\n            name: \"y\",\r\n            mode: 'markers',\r\n            marker: {\r\n                color: 'black',\r\n                size: 2\r\n            },\r\n        }, {\r\n            x: y_test,\r\n            y: y_test,\r\n            mode: 'lines',\r\n            type: 'scatter',\r\n            line: { color: 'red', dash: 'dash' },\r\n            name: 'y = x line'\r\n        }], {\r\n            height: 300,\r\n            width: 300,\r\n            title: {\r\n                text: title,\r\n                font: {\r\n                    size: 10\r\n                },\r\n                xref: 'paper',\r\n                x: 0.05,\r\n            },\r\n            showlegend: false,\r\n            xaxis: {\r\n                linecolor: 'black',\r\n                linewidth: 1,\r\n                mirror: true,\r\n                title: {\r\n                    text: 'y',\r\n                    font: {\r\n                        size: 14,\r\n                    }\r\n                },\r\n            },\r\n            yaxis: {\r\n                linecolor: 'black',\r\n                linewidth: 1,\r\n                mirror: true,\r\n                title: {\r\n                    text: 'predictions',\r\n                    font: {\r\n                        size: 14,\r\n                    }\r\n                }\r\n            },\r\n            margin: {\r\n                l: 40,\r\n                r: 10,\r\n                b: 40,\r\n                t: 20,\r\n                pad: 0\r\n            }\r\n        }, {\r\n            responsive: true, staticPlot: true,\r\n        });\r\n    }\r\n    residual_plot(y, residuals, container, title = '') {\r\n        Plotly.newPlot(container, [{\r\n            x: y,\r\n            y: residuals,\r\n            type: 'scatter',\r\n            name: \"y\",\r\n            mode: 'markers',\r\n            marker: {\r\n                color: 'black',\r\n                size: 2\r\n            },\r\n        }], {\r\n            title: {\r\n                text: title,\r\n                font: {\r\n                    size: 10\r\n                },\r\n                xref: 'paper',\r\n                x: 0.05,\r\n            },\r\n            showlegend: false,\r\n            xaxis: {\r\n                linecolor: 'black',\r\n                linewidth: 1,\r\n                mirror: true,\r\n                title: {\r\n                    text: 'y',\r\n                    font: {\r\n                        size: 14,\r\n                    }\r\n                },\r\n            },\r\n            yaxis: {\r\n                linecolor: 'black',\r\n                linewidth: 1,\r\n                mirror: true,\r\n                title: {\r\n                    text: 'residuals',\r\n                    font: {\r\n                        size: 14,\r\n                    }\r\n                }\r\n            },\r\n            margin: {\r\n                l: 40,\r\n                r: 10,\r\n                b: 40,\r\n                t: 20,\r\n                pad: 0\r\n            }\r\n        }, { responsive: true, staticPlot: true, });\r\n    }\r\n}","\r\nimport ChartController from '@/helpers/charts';\r\nimport { tensorflow } from 'danfojs/dist/danfojs-base';\r\nimport UI from '@/helpers/ui';\r\n// eslint-disable-next-line no-unused-vars\r\nimport { evaluate_classification } from '@/helpers/utils';\r\nimport { metrics } from './utils.js';\r\n\r\nexport class ClassificationModel {\r\n\r\n    constructor() {\r\n        this.chartController = new ChartController();\r\n        this.ui = new UI(null, null)\r\n        this.task = null;\r\n        this.predictions = [];\r\n        this.hasProbability = false;\r\n        this.plots = [];\r\n        this.tables = [];\r\n        this.seed = 1;\r\n        this.hasExplaination = true;\r\n        this.id = null;\r\n        this.helpSectionId = 'help';\r\n\r\n    }\r\n    async train(x, y, x_test, y_test) {\r\n        throw new Error('Not implemented', x, y, x_test, y_test)\r\n    }\r\n    async evaluateModel(y, predictions, uniqueClasses) {\r\n        return await metrics(y, predictions, uniqueClasses);\r\n    }\r\n    generatePythonCode(model_import, model_fit) {\r\n        return `\r\nfrom sklearn.datasets import load_iris\r\n${model_import}\r\nfrom sklearn.inspection import partial_dependence, PartialDependenceDisplay, permutation_importance\r\nfrom sklearn.model_selection import train_test_split\r\nfrom sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\r\nfrom sklearn.decomposition import PCA\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\nimport pandas as pd\r\n\r\n# Load the Iris dataset\r\niris = load_iris()\r\nX, y = iris.data, iris.target\r\nfeature_names = iris.feature_names\r\nclass_names = iris.target_names\r\n\r\n# Split the data into train and test sets\r\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\r\n\r\n# Fit the model\r\n${model_fit}\r\nmodel.fit(X_train,y_train)\r\n# Confusion Matrix\r\ny_pred = model.predict(X_test)\r\nconf_matrix = confusion_matrix(y_test, y_pred, labels=np.unique(y))\r\ndisp = ConfusionMatrixDisplay(confusion_matrix=conf_matrix, display_labels=class_names)\r\ndisp.plot(cmap=plt.cm.Blues, values_format=\"d\")\r\nplt.title(\"Confusion Matrix\")\r\nplt.show()\r\n\r\n# PCA of Results\r\npca = PCA(n_components=2)\r\nX_test_pca = pca.fit_transform(X_test)\r\n\r\n# Plot PCA results with true labels and predicted labels\r\nplt.figure(figsize=(12, 6))\r\n\r\n# Subplot 1: PCA with True Labels\r\nplt.subplot(1, 2, 1)\r\nscatter = plt.scatter(X_test_pca[:, 0], X_test_pca[:, 1], c=y_test, cmap='viridis', s=50)\r\nplt.colorbar(scatter, ticks=np.arange(len(class_names)), label=\"True Labels\")\r\nplt.title(\"PCA of Test Set (True Labels)\")\r\nplt.xlabel(\"Principal Component 1\")\r\nplt.ylabel(\"Principal Component 2\")\r\n\r\n\r\nplt.tight_layout()\r\nplt.show()\r\n# Compute and plot Partial Dependence Plot (PDP)\r\nfig, ax = plt.subplots(figsize=(12, 8))\r\nPartialDependenceDisplay.from_estimator(\r\n    model, X_train, [0, 1,2,3], feature_names=feature_names, ax=ax,target=0\r\n)\r\nplt.show()\r\n\r\n# Compute and plot Permutation Feature Importance (PFI)\r\npfi = permutation_importance(model, X_test, y_test, n_repeats=10, random_state=42)\r\n# Convert PFI results to a DataFrame for easier manipulation\r\npfi_df = pd.DataFrame({\r\n    \"Feature\": np.repeat(feature_names, repeats=pfi.importances.shape[1]),\r\n    \"Importance\": pfi.importances.ravel()\r\n})\r\n\r\n# Create boxplots for Permutation Feature Importance\r\nplt.figure(figsize=(10, 6))\r\npfi_df.boxplot(by=\"Feature\", column=\"Importance\", grid=False, vert=False, showmeans=False)\r\nplt.xlabel(\"Permutation Importance\")\r\nplt.ylabel(\"Feature\")\r\nplt.title(\"Permutation Feature Importance (PFI)\")\r\nplt.suptitle(\"\")  # Remove automatic suptitle from boxplot\r\nplt.show()\r\n        `.trim()\r\n    }\r\n    async visualize(x_test, y_test, uniqueLabels, predictions, encoder) {\r\n        // const evaluation_result = evaluate_classification(predictions, y_test, encoder);\r\n        const classes = Object.keys(encoder.$labels);\r\n\r\n        await this.chartController.plotConfusionMatrix(tensorflow.tensor(predictions), tensorflow.tensor(y_test), classes, Object.values(encoder.$labels), this.id);\r\n        // await this.chartController.classificationPCA(x_test.values, encoder.inverseTransform(y_test), evaluation_result, uniqueLabels, this.id, 2);\r\n        this.ui.predictions_table(x_test, encoder.inverseTransform(y_test), encoder.inverseTransform(predictions), null, this.id);\r\n        this.plots.push('pca_results_' + this.id);\r\n        this.tables.push('#predictions_table_' + this.id);\r\n\r\n    }\r\n}","\r\n/* eslint-disable no-undef */\r\n/* eslint-disable no-unused-vars */\r\n\r\n\r\nimport Plotly from 'danfojs/node_modules/plotly.js-dist-min';\r\nimport { ClassificationModel } from '../model';\r\n\r\nexport default class LogisticRegression extends ClassificationModel {\r\n    constructor(options) {\r\n        super();\r\n        this.options = options;\r\n        this.model = null;\r\n        this.summary = null;\r\n        this.model_stats_matrix = null;\r\n\r\n    }\r\n\r\n    async train(x_train, y_train, x_test, y_test, labels, categorical_columns) {\r\n        this.context = {\r\n            X_train: x_train,\r\n            y_train: y_train,\r\n            y_test: y_test,\r\n            X_test: x_test,\r\n            seed: this.seed,\r\n            regularization_type: this.options.regularization.value === \"Lasso\" ? 1 : 0,\r\n            labels: labels\r\n        };\r\n\r\n        const webR = window.webr;\r\n        await webR.init();\r\n        await webR.installPackages(['jsonlite', 'ggplot2', 'plotly', 'nnet', 'purrr', 'dplyr', 'ggrepel', 'glmnet', 'modelsummary', 'broom'], { quiet: true });\r\n        await webR.objs.globalEnv.bind('xx', x_train);\r\n        await webR.objs.globalEnv.bind('random_seed', this.seed);\r\n        await webR.objs.globalEnv.bind('x_test', x_test);\r\n\r\n        await webR.objs.globalEnv.bind('y', y_train);\r\n        await webR.objs.globalEnv.bind('names', labels);\r\n        await webR.objs.globalEnv.bind('categorical_columns', categorical_columns?.length === 0 ? ['empty'] : categorical_columns);\r\n\r\n        await webR.objs.globalEnv.bind('is_lasso', this.context.regularization_type);\r\n\r\n\r\n        const plotlyData = await webR.evalR(`\r\n                    library(plotly)\r\n                    library(ggplot2)\r\n                    library(purrr)\r\n                    library(dplyr)\r\n                    library(ggrepel)\r\n                    library(modelsummary)\r\n                    library(jsonlite)\r\n                    library(glmnet)\r\n                    library(broom)\r\n                    set.seed(random_seed)\r\n                    # Select all columns except the first as predictors. \r\n                    x <- as.matrix(xx)  \r\n                    colnames(x) <- names\r\n                    scale_df <- as.data.frame(x)\r\n                    cols_to_scale <- setdiff(names, categorical_columns)\r\n                    scale_df[cols_to_scale] <- scale(scale_df[cols_to_scale])\r\n                    if(is_lasso){\r\n                        cvfit = cv.glmnet(as.matrix(scale_df), y, alpha = 1, family = \"multinomial\", type.measure = \"class\")\r\n                    }else{\r\n                       cvfit = cv.glmnet(as.matrix(scale_df), y, alpha = 0, family = \"multinomial\", type.measure = \"class\")\r\n                    }\r\n                    betas = as.matrix(cvfit$glmnet.fit$beta)\r\n                    lambdas = cvfit$lambda\r\n                    names(lambdas) = colnames(betas)\r\n                    \r\n                    df  <- data.frame(\r\n                        log_lambda = log(cvfit$lambda),       \r\n                        mean_cv_error = cvfit$cvm,                \r\n                        lower_error = cvfit$cvup,    \r\n                        upper_error = cvfit$cvlo    \r\n                        )\r\n                    lambda_min <- log(cvfit$lambda.min) \r\n                    lambda_1se <- log(cvfit$lambda.1se)  \r\n            \r\n                    p <-ggplot(df,aes(x=log_lambda,y=mean_cv_error)) + \r\n                    geom_point(col=\"#f05454\") + \r\n                    geom_errorbar(aes(ymin = lower_error,ymax=upper_error),col=\"#30475e\") + \r\n                    geom_vline(xintercept=c(lambda_1se,lambda_min),\r\n                                linetype=\"dashed\")+\r\n                    annotate(\"text\", x = lambda_min, y = max(df$mean_cv_error), \r\n                            label = \"Min\", color = \"black\", hjust = -0.1) +\r\n                    annotate(\"text\", x = lambda_1se, y = max(df$mean_cv_error) - 0.02, \r\n                            label = \"1-SE\", color = \"black\", hjust = -0.1) +\r\n                    xlab(\"log lambda\") +\r\n                    ylab(\"Error\")+\r\n                    theme_bw()\r\n\r\n\r\n                    colnames(x_test) <- names\r\n                    model <- nnet::multinom(y ~ . , data = as.data.frame(x))\r\n                    s <- summary(model)\r\n                    coefs <- s$coefficients\r\n                    stds <- s$standard.errors\r\n                    z_scores <- coefs / stds\r\n                    p_values <- 2 * (1 - pnorm(abs(z_scores)))\r\n                    preds <- predict(model,newdata=as.data.frame(x_test))\r\n                    preds_probs <- predict(model,type = 'probs',newdata=as.data.frame(x_test))\r\n                    # confidence interval\r\n                    z <- 1.96  \r\n                    conf_int <- list()\r\n\r\n                    for (class in rownames(coef(model))) {\r\n                    conf_int[[class]] <- cbind(\r\n                        class = class,\r\n                        Estimate = coefs[class, ],\r\n                        Lower = coefs[class, ] - z * stds[class, ],\r\n                        Upper = coefs[class, ] + z * stds[class, ]\r\n                    )\r\n                    }\r\n                    conf_int_df <- do.call(rbind, conf_int)\r\n                    best_model <- glmnet(x, y, alpha =is_lasso,family = \"multinomial\", type.measure = \"class\", lambda = cvfit$lambda.min)\r\n                    coefficients <- coef(best_model)\r\n\r\n                    non_zero_features <- list()\r\n                    for (class_name in names(coefficients)) {\r\n                    class_coefficients <- coefficients[[class_name]]\r\n                    dense_coefficients <- as.matrix(class_coefficients)\r\n                    non_zero_indices <- which(dense_coefficients != 0, arr.ind = TRUE)\r\n                    non_zero_features <- c(non_zero_features,rownames(dense_coefficients)[non_zero_indices[, 1]])\r\n                    }\r\n                    non_zero_features <- unique(non_zero_features)\r\n                    non_zero_features <- unlist(Filter(function(x) x != \"\", non_zero_features))\r\n                    x_filterd <- x[,unlist(non_zero_features)]\r\n                    x_test_filterd <- x_test[,unlist(non_zero_features)]\r\n\r\n\r\n                    model_lambda_min <- nnet::multinom(y ~ . , data = as.data.frame(x_filterd))\r\n                    s <- summary(model_lambda_min)\r\n                    coefs_lambda_min <- s$coefficients\r\n                    stds_lambda_min <- s$standard.errors\r\n                    z_scores_lambda_min <- coefs_lambda_min / stds_lambda_min\r\n                    p_values_lambda_min <- 2 * (1 - pnorm(abs(z_scores_lambda_min)))\r\n                    preds_lambda_min <- predict(model_lambda_min,newdata=as.data.frame(x_test_filterd))\r\n                    preds_probs_lambda_min <- predict(model_lambda_min,type = 'probs',newdata=as.data.frame(x_test_filterd))\r\n                    # confidence interval\r\n                    z <- 1.96  \r\n                    conf_int <- list()\r\n\r\n                    for (class in rownames(coef(model_lambda_min))) {\r\n                    conf_int[[class]] <- cbind(\r\n                        class = class,\r\n                        Estimate = coefs_lambda_min[class, ],\r\n                        Lower = coefs_lambda_min[class, ] - z * stds_lambda_min[class, ],\r\n                        Upper = coefs_lambda_min[class, ] + z * stds_lambda_min[class, ]\r\n                    )\r\n                    }\r\n\r\n\r\n                    \r\n                    conf_int_lambda_min_df <- do.call(rbind, conf_int)\r\n\r\n                    best_model <- glmnet(x, y, alpha =is_lasso,family = \"multinomial\", type.measure = \"class\", lambda = cvfit$lambda.1se)\r\n                    coefficients <- coef(best_model)\r\n                    print(\"got here\")\r\n                    non_zero_features <- list()\r\n                    for (class_name in names(coefficients)) {\r\n                    class_coefficients <- coefficients[[class_name]]\r\n                    dense_coefficients <- as.matrix(class_coefficients)\r\n                    non_zero_indices <- which(dense_coefficients != 0, arr.ind = TRUE)\r\n                    non_zero_features <- c(non_zero_features,rownames(dense_coefficients)[non_zero_indices[, 1]])\r\n                    }\r\n                    non_zero_features <- unique(non_zero_features)\r\n                    non_zero_features <- unlist(Filter(function(x) x != \"\", non_zero_features))\r\n\r\n                    x_filterd <- x[,unlist(non_zero_features)]\r\n                    x_test_filterd <- x_test[,unlist(non_zero_features)]\r\n                    model_lambda_1se <- nnet::multinom(y ~ . , data = as.data.frame(x_filterd))\r\n                    s <- summary(model_lambda_1se)\r\n                    coefs_lambda_1se <- s$coefficients\r\n                    stds_lambda_1se <- s$standard.errors\r\n                    z_scores_lambda_1se <- coefs_lambda_1se / stds_lambda_1se\r\n                    p_values_lambda_1se <- 2 * (1 - pnorm(abs(z_scores_lambda_1se)))\r\n                    preds_lambda_1se <- predict(model_lambda_1se,newdata=as.data.frame(x_test_filterd))\r\n                    preds_probs_lambda_1se <- predict(model_lambda_1se,type = 'probs',newdata=as.data.frame(x_test_filterd))\r\n                    # confidence interval\r\n                    z <- 1.96  \r\n                    conf_int <- list()\r\n\r\n                    for (class in rownames(coef(model_lambda_1se))) {\r\n                    conf_int[[class]] <- cbind(\r\n                        class = class,\r\n                        Estimate = coefs_lambda_1se[class, ],\r\n                        Lower = coefs_lambda_1se[class, ] - z * stds_lambda_1se[class, ],\r\n                        Upper = coefs_lambda_1se[class, ] + z * stds_lambda_1se[class, ]\r\n                    )\r\n                    }\r\n                    conf_int_lambda_1se_df <- do.call(rbind, conf_int)\r\n\r\n                    lambda_values <- cvfit$glmnet.fit$lambda\r\n\r\n                    coef_list <- coef(cvfit$glmnet.fit)\r\n\r\n                    cv_summary <- map_df(names(coef_list), function(class) {\r\n                    coef_matrix <- as.matrix(coef_list[[class]])[-1, ]  # Remove intercept\r\n                    data.frame(\r\n                        lambda = rep(lambda_values, each = nrow(coef_matrix)),\r\n                        predictor = rep(rownames(coef_matrix), length(lambda_values)),\r\n                        coefficient = as.vector(coef_matrix),\r\n                        class = class\r\n                    )\r\n                    })\r\n\r\n                    list(\r\n                    plotly_json(p, pretty = FALSE)\r\n                    ,rownames(coefs)\r\n                    ,toJSON(coefs,pretty = TRUE)\r\n                    ,toJSON(stds,pretty = TRUE)\r\n                    ,toJSON(z_scores,pretty = TRUE)\r\n                    ,toJSON(p_values,pretty = TRUE)\r\n                    ,preds_probs\r\n                    ,preds \r\n                    ,toJSON(conf_int_df)\r\n                    ,rownames(conf_int_df)\r\n\r\n                    ,rownames(conf_int_lambda_min_df)\r\n                    ,toJSON(coefs_lambda_min,pretty = TRUE)\r\n                    ,toJSON(stds_lambda_min,pretty = TRUE)\r\n                    ,toJSON(p_values_lambda_min,pretty = TRUE)\r\n\r\n                    ,rownames(conf_int_lambda_1se_df)\r\n                    ,toJSON(coefs_lambda_1se,pretty = TRUE)\r\n                    ,toJSON(stds_lambda_1se,pretty = TRUE)\r\n                    ,toJSON(p_values_lambda_1se,pretty = TRUE)\r\n                    ,model[[\"AIC\"]]\r\n                    ,model_lambda_min[[\"AIC\"]]\r\n                    ,model_lambda_1se[[\"AIC\"]]\r\n                    ,toJSON(cv_summary)\r\n                    ,toJSON(conf_int_lambda_min_df)\r\n                    ,toJSON(conf_int_lambda_1se_df)\r\n                    ,lambda_min\r\n                    ,lambda_1se\r\n                    )\r\n\r\n                    `);\r\n        let results = await plotlyData.toArray()\r\n\r\n        this.summary = {\r\n            regularization_plot: JSON.parse(await results[0].toString()),\r\n            classes: await results[1].toArray(),\r\n            coefs: JSON.parse(await results[2].toArray()),\r\n            stds: JSON.parse(await results[3].toArray()),\r\n            z_scores: JSON.parse(await results[4].toArray()),\r\n            p_values: JSON.parse(await results[5].toArray()),\r\n            probabities: await results[6].toArray(),\r\n            predictions: (await results[7].toArray()).map(pred => pred - 1),\r\n            confidence_intervals: JSON.parse(await results[8].toString()),\r\n            confidence_intervals_row_names: await results[9].toArray(),\r\n            aic: await results[18].toNumber(),\r\n            best_fit_min: {\r\n                names: await results[10].toArray(),\r\n                confidence_intervals: JSON.parse(await results[22].toString()),\r\n                coefs: JSON.parse(await results[11].toArray()),\r\n                stds: JSON.parse(await results[12].toArray()),\r\n                p_values: JSON.parse(await results[13].toArray()),\r\n                aic: await results[19].toNumber(),\r\n\r\n            },\r\n            best_fit_1se: {\r\n                names: await results[14].toArray(),\r\n                confidence_intervals: JSON.parse(await results[23].toString()),\r\n                coefs: JSON.parse(await results[15].toArray()),\r\n                stds: JSON.parse(await results[16].toArray()),\r\n                p_values: JSON.parse(await results[17].toArray()),\r\n                aic: await results[20].toNumber(),\r\n            },\r\n            fit: JSON.parse(await results[21].toArray()),\r\n            lambda_min: await results[24].toNumber(),\r\n            lambda_1se: await results[25].toNumber(),\r\n\r\n        };\r\n\r\n        this.model_stats_matrix = [];\r\n        let cols = [...labels]\r\n        cols.unshift(\"(Intercept)\")\r\n        let min_ols_columns = [...new Set(this.summary['best_fit_min'].names)].map(m => m.replace(/^`|`$/g, ''));\r\n        let se_ols_columns = [...new Set(this.summary['best_fit_1se'].names)].map(m => m.replace(/^`|`$/g, ''));\r\n\r\n\r\n\r\n        this.summary.regularization_plot.layout['showlegend'] = false;\r\n        this.summary.regularization_plot.layout['autosize'] = true;\r\n        this.summary.regularization_plot.layout.legend = {\r\n            font: {\r\n                size: 8,\r\n                color: '#000'\r\n            },\r\n        };\r\n\r\n\r\n        for (let j = 0; j < this.summary.classes.length; j++) {\r\n            for (let i = 0; i < cols.length; i++) {\r\n                let row = [];\r\n                row.push(cols[i])\r\n                row.push((isNaN(this.summary['coefs'][j][i]) ? ' ' : this.summary['coefs'][j][i].toFixed(2)))\r\n                row.push((isNaN(this.summary['stds'][j][i]) ? ' ' : this.summary['stds'][j][i].toFixed(2)))\r\n                row.push((isNaN(this.summary['p_values'][j][i]) ? ' ' : this.summary['p_values'][j][i].toFixed(2)))\r\n\r\n                let index = min_ols_columns.findIndex(m => m === cols[i])\r\n                if (index !== -1) {\r\n                    let coef = this.summary['best_fit_min']['coefs'][j][index]\r\n                    let std = this.summary['best_fit_min']['stds'][j][index]\r\n                    let pval = this.summary['best_fit_min']['p_values'][j][index]\r\n                    row.push(isNaN(coef) ? 0 : coef.toFixed(2))\r\n                    row.push(isNaN(std) ? 0 : std.toFixed(2))\r\n                    row.push(isNaN(pval) ? 0 : pval.toFixed(2))\r\n                } else {\r\n                    row.push(' ')\r\n                    row.push(' ')\r\n                    row.push(' ')\r\n                }\r\n                index = se_ols_columns.findIndex(m => m === cols[i])\r\n                if (index !== -1) {\r\n                    let coef = this.summary['best_fit_1se']['coefs'][j][index]\r\n                    let std = this.summary['best_fit_1se']['stds'][j][index]\r\n                    let pval = this.summary['best_fit_1se']['p_values'][j][index]\r\n                    row.push(isNaN(coef) ? 0 : coef.toFixed(2))\r\n                    row.push(isNaN(std) ? 0 : std.toFixed(2))\r\n                    row.push(isNaN(pval) ? 0 : pval.toFixed(2))\r\n                } else {\r\n                    row.push(' ')\r\n                    row.push(' ')\r\n                    row.push(' ')\r\n                }\r\n                this.model_stats_matrix.push(row)\r\n            }\r\n            if (j < this.summary.classes.length - 1) {\r\n                let placeholder_row = this.model_stats_matrix[0].map(m => '');\r\n                this.model_stats_matrix.push(placeholder_row)\r\n            }\r\n        }\r\n        return this.summary['predictions'];\r\n    }\r\n    async visualize(x_test, y_test, uniqueLabels, predictions, encoder, columns, categorical_columns) {\r\n        await super.visualize(x_test, y_test, uniqueLabels, predictions, encoder)\r\n        setTimeout(async () => {\r\n            let current = this;\r\n            new DataTable('#metrics_table_' + current.id, {\r\n                responsive: false,\r\n                \"footerCallback\": function (row, data, start, end, display) {\r\n                    var api = this.api();\r\n                    $(api.column(2).footer()).html(\r\n                        'AIC : ' + current.summary.aic.toFixed(2)\r\n                    );\r\n                    $(api.column(5).footer()).html(\r\n                        'AIC : ' + current.summary[\"best_fit_min\"].aic.toFixed(2)\r\n                    );\r\n                    $(api.column(8).footer()).html(\r\n                        'AIC : ' + current.summary[\"best_fit_1se\"].aic.toFixed(2)\r\n                    );\r\n                },\r\n                data: current.model_stats_matrix,\r\n                info: false,\r\n                search: false,\r\n                ordering: false,\r\n                searching: false,\r\n                paging: false,\r\n                bDestroy: true,\r\n            });\r\n            await Plotly.newPlot('regularization_' + current.id, current.summary.regularization_plot, { autosize: true });\r\n            let y_classes = this.summary.confidence_intervals_row_names\r\n                .map((item, i) => item + '_' + this.summary.confidence_intervals[i][0]).reverse()\r\n            let conf_intervals = this.summary.confidence_intervals.reverse()\r\n            let traces_params = []\r\n            let ols_y = y_classes.map((m, i) => i);\r\n            traces_params.push({\r\n                name: 'OLS',\r\n                x: conf_intervals.map(item => item[1]),\r\n                y: ols_y,\r\n                error_x: {\r\n                    type: 'data',\r\n                    array: conf_intervals.map(item => Math.abs(item[3] - item[1])),\r\n                },\r\n                type: 'scatter', mode: 'markers',\r\n                showlegend: true,  // Make sure the trace appears in the legend\r\n            })\r\n            let y_classes_min = this.summary.best_fit_min.names\r\n                .map((item, i) => item + '_' + this.summary.best_fit_min.confidence_intervals[i][0]).reverse()\r\n            let conf_intervals_min = this.summary.best_fit_min.confidence_intervals.reverse()\r\n            let lasso_y = y_classes_min.map((m, i) => i + 0.2);\r\n            traces_params.push({\r\n                name: 'lasso min',\r\n                x: conf_intervals_min.map(item => item[1]),\r\n                y: lasso_y,\r\n                error_x: {\r\n                    type: 'data',\r\n                    array: conf_intervals_min.map(item => Math.abs(item[3] - item[1])),\r\n                },\r\n                type: 'scatter', mode: 'markers',\r\n                showlegend: true,  // Make sure the trace appears in the legend\r\n            })\r\n            let _1se_y = y_classes_min.map((m, i) => i + 0.4);\r\n            let y_classes_1se = this.summary.best_fit_1se.names\r\n                .map((item, i) => item + '_' + this.summary.best_fit_1se.confidence_intervals[i][0]).reverse()\r\n            let conf_intervals_1se = this.summary.best_fit_1se.confidence_intervals.reverse()\r\n            traces_params.push({\r\n                name: 'lasso 1se',\r\n                x: conf_intervals_1se.map(item => item[1]),\r\n                y: _1se_y,\r\n                error_x: {\r\n                    type: 'data',\r\n                    array: conf_intervals_1se.map(item => Math.abs(item[3] - item[1])),\r\n                },\r\n                type: 'scatter', mode: 'markers',\r\n                showlegend: true,  // Make sure the trace appears in the legend\r\n            })\r\n            await Plotly.newPlot('parameters_plot_' + current.id, {\r\n                'data': traces_params,\r\n                'layout': {\r\n                    margin: {\r\n                        l: 80,\r\n                        r: 40,\r\n                        b: 40,\r\n                        t: 40,\r\n                        pad: 10\r\n                    },\r\n                    showlegend: true,\r\n                    legend: {\r\n                        xanchor: 'left',\r\n                        yanchor: 'top',\r\n                        x: 0.02,\r\n                        y: 0.98,\r\n                        font: {\r\n                            size: 8,  // Set font size for legend\r\n                            color: \"black\" // Change font color if needed\r\n                        },\r\n                        bgcolor: \"rgba(0,0,0,0)\"\r\n                    },\r\n                    xaxis: {\r\n                        linecolor: 'black',\r\n                        linewidth: 1,\r\n                        zeroline: true,\r\n                        mirror: true,\r\n                        title: 'Confidence interval',\r\n                    },\r\n                    yaxis: {\r\n                        linecolor: 'black',\r\n                        linewidth: 1,\r\n                        zeroline: false,\r\n                        mirror: true,\r\n                        tickvals: lasso_y,\r\n                        ticktext: y_classes_1se,\r\n                        tickfont: { size: 10 }\r\n                    },\r\n                }\r\n            });\r\n\r\n            this.summary.fit.sort((a, b) => a.lambda - b.lambda);\r\n            let subset = this.summary.fit.filter(m => m.class == '1')\r\n            let params = new Set(...[subset.filter(m => !!m.predictor).map(m => m.predictor)])\r\n            let traces = []\r\n            let annotations = []\r\n            params.forEach(param => {\r\n                let coefs = subset.filter(m => m.predictor == param).map(m => m.coefficient)\r\n                let lambdas = subset.filter(m => m.predictor == param).map(m => Math.log(m.lambda))\r\n                traces.push({\r\n                    name: param,\r\n                    y: coefs,\r\n                    x: lambdas,\r\n                    mode: 'lines',\r\n                });\r\n                annotations.push({\r\n                    xref: 'paper',\r\n                    x: .01,\r\n                    y: coefs[0],\r\n                    xanchor: 'left',\r\n                    yanchor: 'middle',\r\n                    text: param,\r\n                    font: {\r\n                        family: 'Arial',\r\n                        size: 8,\r\n                        color: 'black'\r\n                    },\r\n                    showarrow: false\r\n                });\r\n                annotations = annotations.concat([\r\n                    {\r\n                        x: this.summary.lambda_min,\r\n                        y: 0.5, // Center the text along the line\r\n                        xref: 'x',\r\n                        yref: 'paper',\r\n                        text: \"Lambda min\",\r\n                        showarrow: false,\r\n                        font: {\r\n                            size: 8,\r\n                            color: \"black\"\r\n                        },\r\n                        textangle: -90, // Rotate text to be vertical\r\n                        align: \"center\"\r\n                    },\r\n                    {\r\n                        x: this.summary.lambda_1se,\r\n                        y: 0.5, // Center the text along the line\r\n                        xref: 'x',\r\n                        yref: 'paper',\r\n                        text: \"Lambda 1se\",\r\n                        showarrow: false,\r\n                        font: {\r\n                            size: 8,\r\n                            color: \"black\"\r\n                        },\r\n                        textangle: -90, // Rotate text to be vertical\r\n                        align: \"center\"\r\n                    }\r\n                ])\r\n            });\r\n\r\n            await Plotly.newPlot('errors_' + current.id, {\r\n\r\n                'data': traces,\r\n                'layout': {\r\n                    shapes: [\r\n                        {\r\n                            type: 'line',\r\n                            x0: this.summary.lambda_min,\r\n                            x1: this.summary.lambda_min,\r\n                            y0: 0,\r\n                            y1: 1,\r\n                            xref: 'x',\r\n                            yref: 'paper',\r\n                            line: {\r\n                                color: 'black',\r\n                                dash: 'dashdot',\r\n                                width: 1\r\n                            }\r\n                        },\r\n                        {\r\n                            type: 'line',\r\n                            x0: this.summary.lambda_1se,\r\n                            x1: this.summary.lambda_1se,\r\n                            y0: 0,\r\n                            y1: 1,\r\n                            xref: 'x',\r\n                            yref: 'paper',\r\n                            line: {\r\n                                color: 'black',\r\n                                dash: 'dashdot',\r\n                                width: 1\r\n                            }\r\n                        },\r\n                    ],\r\n                    annotations: annotations,\r\n                    showlegend: false,\r\n                    margin: {\r\n                        l: 40,\r\n                        r: 40,\r\n                        b: 40,\r\n                        t: 40,\r\n                        pad: 10\r\n                    },\r\n                    autosize: true,\r\n                    xaxis: {\r\n                        linecolor: 'black',\r\n                        linewidth: 1,\r\n                        zeroline: false,\r\n                        mirror: true,\r\n                        title: 'log lambda'\r\n                    },\r\n                    yaxis: {\r\n                        linecolor: 'black',\r\n                        linewidth: 1,\r\n                        zeroline: false,\r\n                        mirror: true,\r\n                        title: 'coefficient'\r\n                    }\r\n                }\r\n            });\r\n            window.dispatchEvent(new Event('resize'));\r\n        }, 500);\r\n\r\n    }\r\n}","\r\nimport ChartController from '@/helpers/charts';\r\nimport UI from '@/helpers/ui';\r\nimport { calculateMSE, calculateRSquared } from './utils.js';\r\n\r\nexport class RegressionModel {\r\n\r\n    constructor() {\r\n        this.chartController = new ChartController();\r\n        this.ui = new UI(null, null)\r\n        this.task = null;\r\n        this.predictions = [];\r\n        this.id = null;\r\n        this.plots = [];\r\n        this.tables = [];\r\n        this.helpSectionId = 'help';\r\n        this.hasExplaination = true;\r\n        this.seed = 123;\r\n\r\n    }\r\n    async train(x, y, x_test, y_test) {\r\n        throw new Error('Not implemented', x, y, x_test, y_test)\r\n    }\r\n    async evaluateModel(y, predictions) {\r\n        return { mse: calculateMSE(y, predictions), rsquared: calculateRSquared(y, predictions) };\r\n    }\r\n    async visualize(x_test, y_test, _, predictions) {\r\n        let current = this;\r\n        return new Promise((resolve) => {\r\n            setTimeout(() => {\r\n                let y = y_test\r\n                let residuals = [];\r\n                predictions.forEach((element, i) => {\r\n                    residuals.push(y[i] - element)\r\n                });\r\n                current.ui.yhat_plot(y, predictions, 'regression_y_yhat_' + current.id, 'Predictions')\r\n                current.ui.residual_plot(predictions, residuals, 'errors_' + current.id, 'Residuals')\r\n                this.ui.predictions_table_regression(x_test, y_test, predictions, this.id);\r\n                this.plots.push('regression_y_yhat_' + current.id);\r\n                this.plots.push('errors_' + current.id);\r\n                this.tables.push('#predictions_table_' + this.id);\r\n                resolve('resolved');\r\n            }, 500);\r\n        });\r\n    }\r\n}","\r\n/* eslint-disable no-undef */\r\n/* eslint-disable no-unused-vars */\r\n\r\n\r\nimport Plotly from 'danfojs/node_modules/plotly.js-dist-min';\r\nimport { RegressionModel } from '../regression_model';\r\n\r\nexport default class LinearRegression extends RegressionModel {\r\n    constructor(options) {\r\n        super();\r\n        this.options = options;\r\n        this.model = null;\r\n        this.summary = null;\r\n        this.model_stats_matrix = null;\r\n        this.hasExplaination = false;\r\n\r\n    }\r\n\r\n    async train(x_train, y_train, x_test, y_test, labels, categorical_columns) {\r\n        this.context = {\r\n            X_train: x_train,\r\n            y_train: y_train,\r\n            y_test: y_test,\r\n            X_test: x_test,\r\n            regularization_type: this.options.regularization.value === \"Lasso\" ? 1 : 0,\r\n            labels: labels\r\n        };\r\n\r\n        const webR = window.webr;\r\n        await webR.init();\r\n        await webR.installPackages(['jsonlite', 'iml', 'ggplot2', 'plotly', 'tidyr', 'dplyr', 'ggrepel', 'glmnet', 'modelsummary'], { quiet: true });\r\n        await webR.objs.globalEnv.bind('xx', x_train);\r\n        await webR.objs.globalEnv.bind('x_test', x_test);\r\n        await webR.objs.globalEnv.bind('random_seed', this.seed);\r\n        await webR.objs.globalEnv.bind('y', y_train);\r\n        await webR.objs.globalEnv.bind('names', labels);\r\n        await webR.objs.globalEnv.bind('categorical_columns', categorical_columns?.length === 0 ? ['empty'] : categorical_columns);\r\n\r\n        await webR.objs.globalEnv.bind('is_lasso', this.context.regularization_type);\r\n\r\n\r\n        const plotlyData = await webR.evalR(`\r\n                    library(plotly)\r\n                    library(ggplot2)\r\n                    library(tidyr)\r\n                    library(iml)\r\n                    library(dplyr)\r\n                    library(ggrepel)\r\n                    library(modelsummary)\r\n                    library(glmnet)\r\n                    set.seed(random_seed)\r\n\r\n                    # Select all columns except the first as predictors. \r\n                    x <- as.matrix(xx)  \r\n                    colnames(x) <- names\r\n                    scale_df <- as.data.frame(x)\r\n\r\n                    cols_to_scale <- setdiff(names, categorical_columns)\r\n                    scale_df[cols_to_scale] <- scale(scale_df[cols_to_scale])\r\n                    scaled_y <- scale(y)\r\n                    base_model = cv.glmnet(as.matrix(scale_df), scaled_y)\r\n                    weights <- 1 / abs(coef(base_model)[-1])\r\n                    if(is_lasso){\r\n                        cvfit = cv.glmnet(as.matrix(scale_df), scaled_y, alpha = 1,penalty.factor = weights)\r\n                    }else{\r\n                       cvfit = cv.glmnet(as.matrix(scale_df), scaled_y, alpha = 0)\r\n                    }\r\n                    betas = as.matrix(cvfit$glmnet.fit$beta)\r\n                    lambdas = cvfit$lambda\r\n                    names(lambdas) = colnames(betas)\r\n                    \r\n                    \r\n                    p <- as.data.frame(betas) %>% \r\n                      tibble::rownames_to_column(\"variable\") %>% \r\n                      pivot_longer(-variable) %>% \r\n                      mutate(lambda=lambdas[name]) %>% \r\n                    ggplot(aes(x=lambda,y=value,col=variable)) + \r\n                      geom_line() + \r\n                      geom_label_repel(data=~subset(.x,lambda==min(lambda)),\r\n                                       aes(label=variable),nudge_x=-0.5) +\r\n                      geom_vline(xintercept=c(cvfit$lambda.1se,cvfit$lambda.min),\r\n                                linetype=\"dashed\")+\r\n                      scale_x_log10()+ labs(y = \"Coefficients\") + theme_bw()\r\n                    df = with(cvfit,\r\n                            data.frame(lambda = lambdas,MSE = cvm,MSEhi=cvup,MSElow=cvlo))\r\n\r\n                    p2<-ggplot(df,aes(x=lambda,y=MSE)) + \r\n                    geom_point(col=\"#f05454\") + \r\n                    scale_x_log10(\"lambda\") + \r\n                    geom_errorbar(aes(ymin = MSElow,ymax=MSEhi),col=\"#30475e\") + \r\n                    geom_vline(xintercept=c(cvfit$lambda.1se,cvfit$lambda.min),\r\n                                linetype=\"dashed\")+\r\n                    theme_bw()\r\n\r\n                    # Get lambda.min and lambda.1se\r\n                    lambda_min = cvfit$lambda.min\r\n                    lambda_1se = cvfit$lambda.1se\r\n\r\n                    # Get the coefficients at lambda.min and lambda.1se\r\n                    coef_lambda_min = coef(cvfit, s = \"lambda.min\")\r\n                    coef_lambda_1se = coef(cvfit, s = \"lambda.1se\")\r\n\r\n                    # Convert the sparse matrix to a regular matrix to make indexing easier\r\n                    coef_lambda_min_matrix = as.matrix(coef_lambda_min)\r\n                    coef_lambda_1se_matrix = as.matrix(coef_lambda_1se)\r\n                    coef_lambda_min_matrix = coef_lambda_min_matrix[-1, , drop = FALSE]\r\n                    coef_lambda_1se_matrix = coef_lambda_1se_matrix[-1, , drop = FALSE]\r\n                    # Find the non-zero features at lambda.min and lambda.1se\r\n                    non_zero_features_min = rownames(coef_lambda_min_matrix)[coef_lambda_min_matrix != 0]\r\n                    non_zero_features_1se = rownames(coef_lambda_1se_matrix)[coef_lambda_1se_matrix != 0]\r\n\r\n                    print(non_zero_features_min)\r\n                    print(non_zero_features_1se)\r\n\r\n                    model <- lm(y ~ ., data = as.data.frame(x))\r\n                    x <- as.matrix(x_test)  \r\n                    colnames(x) <- names\r\n                    predictions <- predict(model, newdata = as.data.frame(x))\r\n                    # Get coefficients, p-values, and standard errors\r\n                    coefs <- coef(model)\r\n                    pvals <- summary(model)$coefficients[,4]\r\n                    std_error <- summary(model)$coefficients[,2]\r\n                    aic_value <- AIC(model)\r\n                    bic_value <- BIC(model)\r\n                    rsquared <- summary(model)$r.squared\r\n                    residuals_ols <- resid(model)\r\n                    fitted_values_ols <- fitted(model)\r\n\r\n                    x <- as.matrix(xx)  \r\n                    colnames(x) <- names\r\n                    X_reduced <- x[, non_zero_features_min]\r\n                    linear_model_min_features <- non_zero_features_min\r\n\r\n                    # Fit a linear regression model using the non-zero features\r\n                    linear_model_min <- lm(y ~ ., data = as.data.frame(X_reduced))\r\n                    coefs_min <- coef(linear_model_min)\r\n                    pvals_min <- summary(linear_model_min)$coefficients[,4]\r\n                    std_error_min <- summary(linear_model_min)$coefficients[,2]\r\n                    aic_min <- AIC(linear_model_min)\r\n                    rsquared_min <- summary(linear_model_min)$r.squared\r\n                    best_lambda <- cvfit$lambda.1se\r\n                    best_model <- glmnet(x, y, alpha =is_lasso, lambda = best_lambda)\r\n                    coefficients <- as.matrix(coef(best_model))\r\n                    residuals_min <- resid(linear_model_min)\r\n                    fitted_values_min <- fitted(linear_model_min)\r\n\r\n\r\n                    x <- as.matrix(x_test)  \r\n                    colnames(x) <- names\r\n                    x <- x[, non_zero_features_min]\r\n                    predictions_min <- predict(linear_model_min, newdata = as.data.frame(x))\r\n\r\n\r\n\r\n                    x <- as.matrix(xx)  \r\n                    colnames(x) <- names\r\n\r\n                    X_reduced <- x[, non_zero_features_1se]\r\n                    linear_model_1se_features <- non_zero_features_1se\r\n                    linear_model_1se <- lm(y ~ ., data = as.data.frame(X_reduced))\r\n                    coefs_1se <- coef(linear_model_1se)\r\n                    print(coefs_1se)\r\n                    pvals_1se <- summary(linear_model_1se)$coefficients[,4]\r\n                    aic_1se<- AIC(linear_model_1se)\r\n                    rsquared_1se <- summary(linear_model_1se)$r.squared\r\n                    std_error_1se <- summary(linear_model_1se)$coefficients[,2]\r\n                    residuals_1se <- resid(linear_model_1se)\r\n                    fitted_values_1se <- fitted(linear_model_1se)\r\n                    \r\n                    x <- as.matrix(x_test)  \r\n                    colnames(x) <- names\r\n                    x <- x[, non_zero_features_1se]\r\n                    predictions_1se <- predict(linear_model_1se, newdata = as.data.frame(x))\r\n\r\n\r\n                    models <- list(\r\n                        \"OLS\" = model,\r\n                        \"Lasso Min \" = linear_model_min,\r\n                        \"Lasso 1se \" = linear_model_1se\r\n                        )\r\n                    z <- modelplot(models =models,coef_omit = 'Interc')\r\n                    qqplot_ols <-ggplot(data.frame(residuals = residuals_ols), aes(sample = residuals_ols)) +\r\n                        stat_qq() +\r\n                        stat_qq_line(col = \"red\") +\r\n                        labs(title = \"QQ Plot of Residuals\",\r\n                            x = \"Theoretical Quantiles\",\r\n                            y = \"Sample Quantiles\") +\r\n                        theme_bw()\r\n                    qqplot_1se <-ggplot(data.frame(residuals = residuals_1se), aes(sample = residuals_1se)) +\r\n                        stat_qq() +\r\n                        stat_qq_line(col = \"red\") +\r\n                        labs(title = \"QQ Plot of Residuals\",\r\n                            x = \"Theoretical Quantiles\",\r\n                            y = \"Sample Quantiles\") +\r\n                        theme_bw()\r\n                    qqplot_min <-ggplot(data.frame(residuals = residuals_min), aes(sample = residuals_min)) +\r\n                        stat_qq() +\r\n                        stat_qq_line(col = \"red\") +\r\n                        labs(title = \"QQ Plot of Residuals\",\r\n                            x = \"Theoretical Quantiles\",\r\n                            y = \"Sample Quantiles\") +\r\n                        theme_bw()\r\n                        \r\n\r\n\r\n\r\n                    list(plotly_json(p, pretty = FALSE),plotly_json(p2, pretty = FALSE),coefs,\r\n                    pvals,std_error,predictions,aic_value,bic_value,rsquared\r\n                    ,coefs_min,pvals_min,std_error_min\r\n                    ,coefs_1se,pvals_1se,std_error_1se,plotly_json(z, pretty = FALSE),linear_model_min_features,linear_model_1se_features\r\n                    ,residuals_ols,residuals_1se,residuals_min,predictions_1se,predictions_min,rsquared_1se,aic_1se,rsquared_min,aic_min\r\n                    ,plotly_json(qqplot_ols, pretty = FALSE)\r\n                    ,plotly_json(qqplot_1se, pretty = FALSE)\r\n                    ,plotly_json(qqplot_min, pretty = FALSE)\r\n                    \r\n                    )\r\n                    `);\r\n        let results = await plotlyData.toArray()\r\n\r\n        this.summary = {\r\n            params: await results[2].toArray(),\r\n            bse: await results[4].toArray(),\r\n            pvalues: await results[3].toArray(),\r\n            predictions: await results[5].toArray(),\r\n            predictions1se: await results[21].toArray(),\r\n            predictionsmin: await results[22].toArray(),\r\n            residuals_ols: await results[18].toArray(),\r\n            residuals_1se: await results[19].toArray(),\r\n            residuals_min: await results[20].toArray(),\r\n            aic: await results[6].toNumber(),\r\n            bic: await results[7].toNumber(),\r\n            r2: await results[8].toNumber(),\r\n            best_fit_min: {\r\n                r2: await results[25].toNumber(),\r\n                aic: await results[26].toNumber(),\r\n                names: await results[16].toArray(),\r\n                coefs: await results[9].toArray(),\r\n                bse: await results[11].toArray(),\r\n                pvalues: await results[10].toArray(),\r\n            },\r\n            best_fit_1se: {\r\n                r2: await results[23].toNumber(),\r\n                aic: await results[24].toNumber(),\r\n                names: await results[17].toArray(),\r\n                coefs: await results[12].toArray(),\r\n                bse: await results[14].toArray(),\r\n                pvalues: await results[13].toArray(),\r\n            },\r\n        };\r\n        this.model_stats_matrix = [];\r\n        let cols = [...labels]\r\n        cols.unshift(\"intercept\")\r\n        let min_ols_columns = this.summary['best_fit_min'].names;\r\n\r\n        min_ols_columns.unshift('intercept');\r\n        let se_ols_columns = this.summary['best_fit_1se'].names;\r\n        se_ols_columns.unshift('intercept');\r\n\r\n        for (let i = 0; i < cols.length; i++) {\r\n            let row = [];\r\n            row.push(cols[i])\r\n            row.push(this.summary['params'][i]?.toFixed(2) ?? ' ')\r\n            row.push(this.summary['bse'][i]?.toFixed(2) ?? ' ')\r\n            row.push(this.summary['pvalues'][i]?.toFixed(2) ?? ' ')\r\n            let index = min_ols_columns.findIndex(m => m === cols[i])\r\n            if (index !== -1) {\r\n                row.push(this.summary['best_fit_min']['coefs'][index]?.toFixed(2) ?? ' ')\r\n                row.push(this.summary['best_fit_min']['bse'][index]?.toFixed(2) ?? ' ')\r\n                row.push(this.summary['best_fit_min']['pvalues'][index]?.toFixed(2) ?? ' ')\r\n            } else {\r\n                row.push(' ')\r\n                row.push(' ')\r\n                row.push(' ')\r\n            }\r\n            index = se_ols_columns.findIndex(m => m === cols[i])\r\n            if (index !== -1) {\r\n                row.push(this.summary['best_fit_1se']['coefs'][index]?.toFixed(2) ?? ' ')\r\n                row.push(this.summary['best_fit_1se']['bse'][index]?.toFixed(2) ?? ' ')\r\n                row.push(this.summary['best_fit_1se']['pvalues'][index]?.toFixed(2) ?? ' ')\r\n            } else {\r\n                row.push(' ')\r\n                row.push(' ')\r\n                row.push(' ')\r\n            }\r\n            this.model_stats_matrix.push(row)\r\n        }\r\n        this.model_stats_matrix.reverse()\r\n        let reg_plot = JSON.parse(await results[0].toString())\r\n\r\n        reg_plot.layout['showlegend'] = false;\r\n        reg_plot.layout.legend = {\r\n            font: {\r\n\r\n                size: 8,\r\n                color: '#000'\r\n            },\r\n        };\r\n        let coefs_plot = JSON.parse(await results[15].toString())\r\n        coefs_plot.layout.legend = {\r\n            x: 0,\r\n            y: 1,\r\n            traceorder: 'normal',\r\n            font: {\r\n                size: 8,\r\n                color: '#000'\r\n            },\r\n            bgcolor: 'rgba(0,0,0,0)',\r\n        };\r\n        coefs_plot.layout.xaxis.title.font = {\r\n            size: 10\r\n        };\r\n\r\n        coefs_plot.layout.xaxis.linecolor = 'rgba(235, 235, 235, 1)';\r\n        coefs_plot.layout.xaxis.linewidth = 2;\r\n        coefs_plot.layout.xaxis.mirror = true;\r\n        coefs_plot.layout.xaxis.zeroline = true;\r\n\r\n        coefs_plot.layout.yaxis.linecolor = 'rgba(235, 235, 235, 1)';\r\n        coefs_plot.layout.yaxis.linewidth = 2;\r\n        coefs_plot.layout.yaxis.mirror = true;\r\n        coefs_plot.layout.yaxis.zeroline = true;\r\n\r\n        this.summary.coefs_plot = coefs_plot;\r\n\r\n        this.summary.regularization_plot = reg_plot;\r\n        this.summary.errors_plot = JSON.parse(await results[1].toString());\r\n        this.summary.qqplot_ols_plot = JSON.parse(await results[27].toString());\r\n        this.summary.qqplot_1se_plot = JSON.parse(await results[28].toString());\r\n        this.summary.qqplot_min_plot = JSON.parse(await results[29].toString());\r\n        this.summary.qqplot_ols_plot.layout.title.font = {\r\n\r\n            size: 10\r\n        };\r\n\r\n\r\n\r\n        this.summary.qqplot_ols_plot.data[0].marker.size = 2;\r\n        this.summary.qqplot_ols_plot.layout.height = 300\r\n        this.summary.qqplot_ols_plot.layout.width = 300\r\n\r\n        this.summary.qqplot_ols_plot.layout.xaxis.title.font = {\r\n\r\n            size: 10\r\n        };\r\n        this.summary.qqplot_ols_plot.layout.yaxis.title.font = {\r\n\r\n            size: 10\r\n        };\r\n\r\n        this.summary.qqplot_1se_plot.layout.height = 300\r\n        this.summary.qqplot_1se_plot.layout.width = 300\r\n        this.summary.qqplot_1se_plot.layout.title.font = {\r\n\r\n            size: 10\r\n        };\r\n        this.summary.qqplot_1se_plot.data[0].marker.size = 2;\r\n\r\n        this.summary.qqplot_1se_plot.layout.xaxis.title.font = {\r\n\r\n            size: 10\r\n        };\r\n        this.summary.qqplot_1se_plot.layout.yaxis.title.font = {\r\n\r\n            size: 10\r\n        };\r\n\r\n\r\n        this.summary.qqplot_min_plot.layout.height = 300\r\n        this.summary.qqplot_min_plot.layout.width = 300\r\n        this.summary.qqplot_min_plot.layout.title.font = {\r\n\r\n            size: 10\r\n        };\r\n        this.summary.qqplot_min_plot.layout.xaxis.title.font = {\r\n\r\n            size: 10\r\n        };\r\n        this.summary.qqplot_min_plot.layout.yaxis.title.font = {\r\n\r\n            size: 10\r\n        };\r\n\r\n\r\n        this.summary.qqplot_min_plot.data[0].marker.size = 2;\r\n        return this.summary['predictions'];\r\n    }\r\n    async visualize(x_test, y_test, uniqueLabels, predictions, encoder) {\r\n        await super.visualize(x_test, y_test, uniqueLabels, predictions)\r\n        let current = this;\r\n        new DataTable('#metrics_table_' + current.id, {\r\n            responsive: false,\r\n            \"footerCallback\": function (row, data, start, end, display) {\r\n                var api = this.api();\r\n                $(api.column(2).footer()).html(\r\n                    'R2 : ' + current.summary.r2.toFixed(2) + ' AIC: ' + current.summary.aic.toFixed(2)\r\n                );\r\n                $(api.column(5).footer()).html(\r\n                    'R2 : ' + current.summary['best_fit_min'].r2.toFixed(2) + ' AIC: ' + current.summary['best_fit_min'].aic.toFixed(2)\r\n                );\r\n                $(api.column(8).footer()).html(\r\n                    'R2 : ' + current.summary['best_fit_1se'].r2.toFixed(2) + ' AIC: ' + current.summary['best_fit_1se'].aic.toFixed(2)\r\n                );\r\n            },\r\n            data: current.model_stats_matrix,\r\n            info: false,\r\n            search: false,\r\n            ordering: false,\r\n            searching: false,\r\n            paging: false,\r\n            bDestroy: true,\r\n            columnDefs: [\r\n                {\r\n                    \"targets\": 3,\r\n                    \"createdCell\": function (td, cellData, rowData, row, col) {\r\n                        if (rowData[3] <= 0.05) {\r\n                            $(td).css('color', 'red')\r\n                            $(td).css('font-weight', '700')\r\n\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    \"targets\": 6,\r\n                    \"createdCell\": function (td, cellData, rowData, row, col) {\r\n                        if (rowData[6] <= 0.05) {\r\n                            $(td).css('color', 'red')\r\n                            $(td).css('font-weight', '700')\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    \"targets\": 9,\r\n                    \"createdCell\": function (td, cellData, rowData, row, col) {\r\n                        if (rowData[9] <= 0.05) {\r\n                            $(td).css('color', 'red')\r\n                            $(td).css('font-weight', '700')\r\n                        }\r\n                    }\r\n                }\r\n            ],\r\n        });\r\n\r\n        await Plotly.newPlot('parameters_plot_' + current.id, current.summary.coefs_plot, { autosize: true, responsive: true });\r\n        await Plotly.newPlot('regularization_' + current.id, current.summary.regularization_plot, { autosize: true, responsive: true });\r\n        await Plotly.newPlot('errors_' + current.id, current.summary.errors_plot, { autosize: true, responsive: true });\r\n        await Plotly.newPlot('qqplot_ols_' + current.id, current.summary.qqplot_ols_plot, { autosize: true, staticPlot: true, });\r\n        await Plotly.newPlot('qqplot_min_' + current.id, current.summary.qqplot_min_plot, { autosize: true, staticPlot: true, });\r\n        await Plotly.newPlot('qqplot_1se_' + current.id, current.summary.qqplot_1se_plot, { autosize: true, staticPlot: true, });\r\n        current.ui.yhat_plot(y_test, this.summary['predictions'], 'regression_y_yhat_' + current.id, 'OLS predictions')\r\n        current.ui.yhat_plot(y_test, this.summary['predictionsmin'], 'regression_y_yhat_min_' + current.id, 'lasso min predictions')\r\n        current.ui.yhat_plot(y_test, this.summary['predictions1se'], 'regression_y_yhat_1se_' + current.id, 'lasso 1se predictions')\r\n        current.ui.residual_plot(y_test, this.summary['residuals_ols'], 'regression_residual_' + current.id, 'OLS residuals')\r\n        current.ui.residual_plot(y_test, this.summary['residuals_min'], 'regression_residual_min_' + current.id, 'lasso min residuals')\r\n        current.ui.residual_plot(y_test, this.summary['residuals_1se'], 'regression_residual_1se_' + current.id, 'lasso 1se residuals')\r\n        this.ui.predictions_table_regression(x_test, y_test, predictions, this.id);\r\n        window.dispatchEvent(new Event('resize'));\r\n\r\n    }\r\n}","import { asyncRun } from \"@/helpers/py-worker\";\r\nimport { RegressionModel } from \"../regression_model\";\r\n\r\n\r\nexport default class BSplineRegression extends RegressionModel {\r\n    constructor(options) {\r\n        super();\r\n        this.options = options;\r\n        this.model = null;\r\n        this.hasExplaination = false;\r\n\r\n    }\r\n    async train(x_train, y_train, x_test, y_test, columns) {\r\n        this.context = {\r\n            X_train: x_train,\r\n            y_train: y_train,\r\n            X_test: x_test,\r\n            y_test: y_test,\r\n            knots: +this.options.knots.value,\r\n            explain: this.hasExplaination,\r\n            degree: +this.options.degree.value,\r\n            features: [...Array(columns.length).keys()]\r\n\r\n\r\n        };\r\n        const script = `\r\n        from sklearn.preprocessing import SplineTransformer\r\n        from sklearn.inspection import PartialDependenceDisplay\r\n        from sklearn.inspection import permutation_importance\r\n        from sklearn.ensemble import GradientBoostingRegressor\r\n        import pandas as pd\r\n        import matplotlib\r\n        matplotlib.use(\"AGG\")\r\n        from sklearn import linear_model\r\n        from sklearn.metrics import mean_squared_error\r\n        from sklearn.pipeline import make_pipeline\r\n        from js import X_train,y_train,X_test,knots,degree,y_test,features,explain\r\n\r\n\r\n        features_importance = []\r\n        partial_dependence_plot_grids = []\r\n        partial_dependence_plot_avgs = []\r\n        \r\n        model = make_pipeline(\r\n            SplineTransformer(n_knots=knots, degree=degree), \r\n            linear_model.LinearRegression()\r\n            )\r\n        model.fit(X_train, y_train)\r\n        pred_train = model.predict(X_train)\r\n        rmse_train = mean_squared_error(y_train, pred_train, squared=True)\r\n        y_pred = model.predict(X_test)\r\n        if explain:\r\n            pdp = PartialDependenceDisplay.from_estimator(model, X_train, features,method ='brute')\r\n            fi = permutation_importance(model,X_test,y_test,n_repeats=10)\r\n            partial_dependence_plot_avgs = list(map(lambda item:item['average'],pdp.pd_results))\r\n            grids = list(map(lambda item:item['grid_values'],pdp.pd_results))\r\n            features_importance = list(fi.importances)\r\n            partial_dependence_plot_grids = [item[0].tolist() for item in grids ]\r\n        y_pred,partial_dependence_plot_avgs,partial_dependence_plot_grids, features_importance\r\n\r\n        `;\r\n        try {\r\n            const { results, error } = await asyncRun(script, this.context);\r\n            if (results) {\r\n                this.predictions = Array.from(results[0]);\r\n                this.pdp_averages = Array.from(results[1]);\r\n                this.pdp_grid = Array.from(results[2]);\r\n                this.importances = Array.from(results[3]);\r\n                return Array.from(results[0]);\r\n            } else if (error) {\r\n                console.log(\"pyodideWorker error: \", error);\r\n            }\r\n        } catch (e) {\r\n            throw Error(`Error in pyodideWorker at ${e.filename}, Line: ${e.lineno}, ${e.message}`,)\r\n\r\n        }\r\n    }\r\n    async visualize(x_test, y_test, uniqueLabels, predictions, encoder, columns, categorical_columns) {\r\n        await super.visualize(x_test, y_test, uniqueLabels, predictions, encoder)\r\n        if (this.hasExplaination) {\r\n            this.chartController.PFIBoxplot(this.id, this.importances, columns);\r\n            this.chartController.plotPDPRegression(this.id, this.pdp_averages, this.pdp_grid, uniqueLabels, columns, categorical_columns);\r\n        }\r\n    }\r\n}","import { ClassificationModel } from \"../model\";\r\nimport { asyncRun } from \"@/helpers/py-worker\";\r\n\r\nexport default class SupportVectorMachine extends ClassificationModel {\r\n    constructor(opt) {\r\n        super();\r\n        // eslint-disable-next-line no-unused-vars\r\n        this.options = {\r\n            kernel: opt.kernel.value.toLowerCase(),\r\n            coef: opt.bias.value,\r\n            degree: opt.degree.value,\r\n            c: opt.c.value,\r\n            quiet: true\r\n        };\r\n        this.helpSectionId = 'svm_help';\r\n    }\r\n    // eslint-disable-next-line no-unused-vars\r\n    async train(x_train, y_train, x_test, y_test, columns, __, pdpIndex) {\r\n\r\n        this.context = {\r\n            X_train: x_train,\r\n            y_train: y_train,\r\n            X_test: x_test,\r\n            y_test: y_test,\r\n            pdpIndex: pdpIndex,\r\n            explain: this.hasExplaination,\r\n            kernel: this.options.kernel,\r\n            coef: this.options.coef,\r\n            c: +this.options.c,\r\n            degree: this.options.degree,\r\n            seed: this.seed,\r\n            features: [...Array(columns.length).keys()]\r\n\r\n        };\r\n        const script = `\r\n        from sklearn import svm\r\n        from js import X_train,y_train,X_test,y_test,kernel,coef,degree,features,seed,c\r\n        import matplotlib\r\n        matplotlib.use(\"AGG\")\r\n        from sklearn.inspection import PartialDependenceDisplay\r\n        from sklearn.inspection import permutation_importance\r\n        features_importance = []\r\n        partial_dependence_plot_grids = []\r\n        partial_dependence_plot_avgs = []\r\n\r\n        model = svm.SVC(kernel=kernel,random_state = seed,C=c,degree=degree)\r\n        model.fit(X_train, y_train)\r\n        y_pred = model.predict(X_test)\r\n\r\n        if explain:\r\n            pdp = PartialDependenceDisplay.from_estimator(model, X_train, features,target=0,method ='brute')\r\n            fi = permutation_importance(model,X_test,y_test,n_repeats=10)\r\n            partial_dependence_plot_avgs = list(map(lambda item:item['average'],pdp.pd_results))\r\n            grids = list(map(lambda item:item['grid_values'],pdp.pd_results))\r\n            features_importance = list(fi.importances)\r\n            partial_dependence_plot_grids = [item[0].tolist() for item in grids ]\r\n        y_pred,partial_dependence_plot_avgs,partial_dependence_plot_grids,features_importance\r\n    `;\r\n        try {\r\n            const { results, error } = await asyncRun(script, this.context);\r\n            if (results) {\r\n                this.predictions = Array.from(results[0]);\r\n                this.pdp_averages = Array.from(results[1]);\r\n                this.pdp_grid = Array.from(results[2]);\r\n                this.importances = Array.from(results[3]);\r\n                return Array.from(results[0]);\r\n            } else if (error) {\r\n                console.log(\"pyodideWorker error: \", error);\r\n            }\r\n        } catch (e) {\r\n            throw Error(`Error in pyodideWorker at ${e.filename}, Line: ${e.lineno}, ${e.message}`,)\r\n\r\n        }\r\n    }\r\n    generatePythonCode() {\r\n        let model_import = \"from sklearn import svm\"\r\n        let model_fit = `\r\nmodel = model = svm.SVC(kernel=\"${this.options.kernel}\",random_state = ${this.seed})`\r\n        return super.generatePythonCode(model_import, model_fit)\r\n    }\r\n    async visualize(x_test, y_test, uniqueLabels, predictions, encoder, columns, categorical_columns) {\r\n        await super.visualize(x_test, y_test, uniqueLabels, predictions, encoder)\r\n        if (this.hasExplaination) {\r\n            this.chartController.PFIBoxplot(this.id, this.importances, columns);\r\n            this.chartController.plotPDP(this.id, this.pdp_averages, this.pdp_grid, uniqueLabels, columns, categorical_columns);\r\n        }\r\n    }\r\n}","import { RegressionModel } from \"../regression_model\";\r\nimport { asyncRun } from \"@/helpers/py-worker\";\r\nexport default class SupportVectorMachineRegression extends RegressionModel {\r\n    constructor(opt, chartControler) {\r\n        super(chartControler);\r\n        let options = {\r\n            kernel: opt.kernel.value ?? \"linear\",\r\n            gamma: opt.gamma.value,\r\n            degree: opt.degree.value,\r\n        }\r\n        this.options = options;\r\n        this.helpSectionId = 'svm_help';\r\n\r\n    }\r\n    async train(x_train, y_train, x_test, y_test, columns) {\r\n\r\n        this.context = {\r\n            X_train: x_train,\r\n            y_train: y_train,\r\n            X_test: x_test,\r\n            y_test: y_test,\r\n            kernel: this.options.kernel,\r\n            gamma: this.options.gamma,\r\n            degree: this.options.degree,\r\n            explain: this.hasExplaination,\r\n            seed: this.seed,\r\n            features: [...Array(columns.length).keys()]\r\n        };\r\n        const script = `\r\n        from sklearn import svm\r\n        import matplotlib\r\n        matplotlib.use(\"AGG\")\r\n        from js import X_train,y_train,X_test,y_test,kernel,gamma,degree,seed,features,explain\r\n        from sklearn.inspection import PartialDependenceDisplay\r\n        from sklearn.inspection import permutation_importance\r\n\r\n        \r\n        features_importance = []\r\n        partial_dependence_plot_grids = []\r\n        partial_dependence_plot_avgs = []\r\n        model = svm.SVR(kernel=kernel)\r\n        model.fit(X_train, y_train)\r\n        y_pred = model.predict(X_test)\r\n\r\n        if explain:\r\n            pdp = PartialDependenceDisplay.from_estimator(model, X_train, features)\r\n            fi = permutation_importance(model,X_test,y_test,n_repeats=10)\r\n            partial_dependence_plot_avgs = list(map(lambda item:item['average'],pdp.pd_results))\r\n            grids = list(map(lambda item:item['grid_values'],pdp.pd_results))\r\n            features_importance = list(fi.importances)\r\n            partial_dependence_plot_grids = [item[0].tolist() for item in grids ]\r\n        y_pred,partial_dependence_plot_avgs,partial_dependence_plot_grids, features_importance\r\n    `;\r\n        try {\r\n            const { results, error } = await asyncRun(script, this.context);\r\n            if (results) {\r\n                this.predictions = Array.from(results[0]);\r\n                this.pdp_averages = Array.from(results[1]);\r\n                this.pdp_grid = Array.from(results[2]);\r\n                this.importances = Array.from(results[3]);\r\n                return Array.from(results[0]);\r\n            } else if (error) {\r\n                console.log(\"pyodideWorker error: \", error);\r\n            }\r\n        } catch (e) {\r\n            throw Error(`Error in pyodideWorker at ${e.filename}, Line: ${e.lineno}, ${e.message}`,)\r\n\r\n        }\r\n    }\r\n    async visualize(x_test, y_test, uniqueLabels, predictions, encoder, columns, categorical_columns) {\r\n        await super.visualize(x_test, y_test, uniqueLabels, predictions, encoder)\r\n        if (this.hasExplaination) {\r\n            this.chartController.PFIBoxplot(this.id, this.importances, columns);\r\n            this.chartController.plotPDPRegression(this.id, this.pdp_averages, this.pdp_grid, uniqueLabels, columns, categorical_columns);\r\n        }\r\n    }\r\n}","\r\nimport { ClassificationModel } from '../model';\r\nimport { asyncRun } from \"@/helpers/py-worker\";\r\n\r\nexport default class KNNModel extends ClassificationModel {\r\n    constructor(options) {\r\n        super();\r\n        this.options = options\r\n        this.model = null;\r\n        this.helpSectionId = 'knn_help';\r\n\r\n\r\n    }\r\n    // eslint-disable-next-line no-unused-vars\r\n    async train(x, y, x_test, y_test, columns, __, pdpIndex) {\r\n        this.context = {\r\n            X_train: x,\r\n            y_train: y,\r\n            X_test: x_test,\r\n            y_test: y_test,\r\n            min: +this.options.min.value,\r\n            max: +this.options.max.value,\r\n            explain: this.hasExplaination,\r\n            features: [...Array(columns.length).keys()]\r\n        };\r\n        const script = `\r\n        import matplotlib\r\n        matplotlib.use(\"AGG\")\r\n        from js import X_train,y_train,X_test,y_test,features,min,max,explain\r\n        from sklearn.inspection import PartialDependenceDisplay\r\n        from sklearn.inspection import permutation_importance\r\n        from sklearn.neighbors import KNeighborsClassifier\r\n        from sklearn.metrics import accuracy_score\r\n\r\n        features_importance = []\r\n        partial_dependence_plot_grids = []\r\n        partial_dependence_plot_avgs = []\r\n\r\n        k_neighbor_results=[]\r\n        best_model = None\r\n        best_accuracy = 0\r\n        best_preds = []\r\n        for i,metric in enumerate(['manhattan','euclidean']):\r\n            for n in range(min,max+1):\r\n                model = KNeighborsClassifier(n_neighbors=n,metric=metric)\r\n                model.fit(X_train, y_train)\r\n                preds = model.predict(X_test)\r\n                accuracy = accuracy_score(y_test,preds)\r\n                k_neighbor_results.append([metric,n,accuracy])\r\n                if accuracy > best_accuracy:\r\n                    best_accuracy = accuracy\r\n                    best_model = model\r\n                    best_n = n\r\n                    best_preds = preds\r\n        if explain:\r\n            pdp = PartialDependenceDisplay.from_estimator(best_model, X_train, features,target=0,method ='brute')\r\n            fi = permutation_importance(best_model,X_test,y_test,n_repeats=10)\r\n            partial_dependence_plot_avgs = list(map(lambda item:item['average'],pdp.pd_results))\r\n            grids = list(map(lambda item:item['grid_values'],pdp.pd_results))\r\n            features_importance = list(fi.importances)\r\n            partial_dependence_plot_grids = [item[0].tolist() for item in grids ]\r\n        best_preds,partial_dependence_plot_avgs,partial_dependence_plot_grids, features_importance,k_neighbor_results,best_n\r\n    `;\r\n        try {\r\n            const { results, error } = await asyncRun(script, this.context);\r\n            if (results) {\r\n                this.predictions = Array.from(results[0]);\r\n                this.pdp_averages = Array.from(results[1]);\r\n                this.pdp_grid = Array.from(results[2]);\r\n                this.importances = Array.from(results[3]);\r\n                this.k_neighbor_results = Array.from(results[4]);\r\n                this.best_n = results[5];\r\n                return Array.from(results[0]);\r\n            } else if (error) {\r\n                console.log(\"pyodideWorker error: \", error);\r\n            }\r\n        } catch (e) {\r\n            throw Error(`Error in pyodideWorker at ${e.filename}, Line: ${e.lineno}, ${e.message}`,)\r\n\r\n        }\r\n    }\r\n    generatePythonCode() {\r\n        let model_import = `\r\nfrom sklearn.neighbors import KNeighborsClassifier\r\nfrom sklearn.metrics import accuracy_score`.trim();\r\n        let model_fit = `\r\nbest_model = None\r\nbest_accuracy = 0\r\nbest_preds = []\r\nfor i,metric in enumerate(['manhattan','euclidean']):\r\n    for n in range(${+this.options.min.value},${+this.options.max.value + 1}):\r\n        model = KNeighborsClassifier(n_neighbors=n,metric=metric)\r\n        model.fit(X_train, y_train)\r\n        preds = model.predict(X_test)\r\n        accuracy = accuracy_score(y_test,preds)\r\n        if accuracy > best_accuracy:\r\n            best_accuracy = accuracy\r\n            best_model = model\r\n            best_n = n\r\n            best_preds = preds\r\nmodel = best_model\r\n`.trim();\r\n        return super.generatePythonCode(model_import, model_fit)\r\n    }\r\n    async visualize(x_test, y_test, uniqueLabels, predictions, encoder, columns, categorical_columns) {\r\n        await super.visualize(x_test, y_test, uniqueLabels, predictions, encoder)\r\n        this.chartController.KNNPerformancePlot(this.k_neighbor_results, this.best_n, this.id);\r\n        this.plots.push('knn_table_' + this.id);\r\n        if (this.hasExplaination) {\r\n            this.chartController.PFIBoxplot(this.id, this.importances, columns);\r\n            this.chartController.plotPDP(this.id, this.pdp_averages, this.pdp_grid, uniqueLabels, columns, categorical_columns);\r\n        }\r\n\r\n    }\r\n\r\n}","\r\nimport { RegressionModel } from '../regression_model'\r\nimport { asyncRun } from \"@/helpers/py-worker\";\r\n\r\nexport default class KNNRegressor extends RegressionModel {\r\n    constructor(options) {\r\n        super();\r\n        this.options = options\r\n        this.model = null;\r\n        this.helpSectionId = 'knn_help';\r\n\r\n\r\n    }\r\n    // eslint-disable-next-line no-unused-vars\r\n    async train(x, y, x_test, y_test, columns, __, pdpIndex) {\r\n        this.context = {\r\n            X_train: x,\r\n            y_train: y,\r\n            X_test: x_test,\r\n            y_test: y_test,\r\n            min: +this.options.min.value,\r\n            max: +this.options.max.value,\r\n            explain: this.hasExplaination,\r\n            features: [...Array(columns.length).keys()]\r\n        };\r\n        const script = `\r\n        import matplotlib\r\n        matplotlib.use(\"AGG\")\r\n        from js import X_train,y_train,X_test,y_test,features,min,max,explain\r\n        from sklearn.inspection import PartialDependenceDisplay\r\n        from sklearn.inspection import permutation_importance\r\n        from sklearn.neighbors import KNeighborsRegressor\r\n\r\n        features_importance = []\r\n        partial_dependence_plot_grids = []\r\n        partial_dependence_plot_avgs = []\r\n        k_neighbor_results=[]\r\n        best_model = None\r\n        best_r2 = 0\r\n        best_preds = []\r\n\r\n        for i,metric in enumerate(['manhattan','euclidean']):\r\n            for n in range(min,max+1):\r\n                model = KNeighborsRegressor(n_neighbors=n,metric=metric)\r\n                model.fit(X_train, y_train)\r\n                preds = model.predict(X_test)\r\n                r2 = model.score(X_test,y_test)\r\n                k_neighbor_results.append([metric,n,r2])\r\n                if r2 > best_r2:\r\n                    best_r2 = r2\r\n                    best_model = model\r\n                    best_n = n\r\n                    best_preds = preds\r\n\r\n        if explain:\r\n            pdp = PartialDependenceDisplay.from_estimator(best_model, X_train, features)\r\n            fi = permutation_importance(best_model,X_test,y_test,n_repeats=10)\r\n            partial_dependence_plot_avgs = list(map(lambda item:item['average'],pdp.pd_results))\r\n            grids = list(map(lambda item:item['grid_values'],pdp.pd_results))\r\n            features_importance = list(fi.importances)\r\n            partial_dependence_plot_grids = [item[0].tolist() for item in grids ]\r\n        best_preds,partial_dependence_plot_avgs,partial_dependence_plot_grids, features_importance,k_neighbor_results,best_n\r\n    `;\r\n        try {\r\n            const { results, error } = await asyncRun(script, this.context);\r\n            if (results) {\r\n                this.predictions = Array.from(results[0]);\r\n                this.pdp_averages = Array.from(results[1]);\r\n                this.pdp_grid = Array.from(results[2]);\r\n                this.importances = Array.from(results[3]);\r\n                this.k_neighbor_results = Array.from(results[4]);\r\n                this.best_n = results[5];\r\n                return Array.from(results[0]);\r\n            } else if (error) {\r\n                console.log(\"pyodideWorker error: \", error);\r\n            }\r\n        } catch (e) {\r\n            throw Error(`Error in pyodideWorker at ${e.filename}, Line: ${e.lineno}, ${e.message}`,)\r\n\r\n        }\r\n    }\r\n    async visualize(x_test, y_test, uniqueLabels, predictions, encoder, columns, categorical_columns) {\r\n        await super.visualize(x_test, y_test, uniqueLabels, predictions, encoder)\r\n        this.chartController.KNNPerformancePlot(this.k_neighbor_results, this.best_n, this.id, \"MSE\");\r\n        this.plots.push('knn_table_' + this.id);\r\n        if (this.hasExplaination) {\r\n            this.chartController.PFIBoxplot(this.id, this.importances, columns);\r\n            this.chartController.plotPDPRegression(this.id, this.pdp_averages, this.pdp_grid, uniqueLabels, columns, categorical_columns);\r\n        }\r\n    }\r\n}","import { asyncRun } from \"@/helpers/py-worker\";\r\nimport { ClassificationModel } from \"../model\";\r\n\r\n\r\nexport default class RandomForest extends ClassificationModel {\r\n    constructor(options, chartController) {\r\n        super(chartController)\r\n        this.helpSectionId = 'cart_help';\r\n        this.options = options;\r\n        this.model = null;\r\n        this.predictions = [];\r\n        this.hasProbability = true;\r\n\r\n    }\r\n    // eslint-disable-next-line no-unused-vars\r\n    async train(x_train, y_train, x_test, y_test, columns, __, pdpIndex) {\r\n        this.context = {\r\n            X_train: x_train,\r\n            y_train: y_train,\r\n            X_test: x_test,\r\n            y_test: y_test,\r\n            pdpIndex: pdpIndex,\r\n            explain: this.hasExplaination,\r\n            rf_type: this.options.criteria.value,\r\n            max_features: this.options.features.value,\r\n            num_estimators: this.options.estimators.value <= 0 || !this.options.estimators.value ? 100 : +this.options.estimators.value,\r\n            max_depth: this.options.depth.value <= 0 ? 5 : +this.options.depth.value,\r\n            seed: this.seed,\r\n            features: [...Array(columns.length).keys()],\r\n            num_classes: [...new Set(y_train)].length,\r\n\r\n\r\n        };\r\n        const script = `\r\n            from sklearn.model_selection import train_test_split\r\n            from sklearn.ensemble import RandomForestClassifier\r\n            from sklearn.metrics import accuracy_score\r\n            import matplotlib\r\n            matplotlib.use(\"AGG\")\r\n            from sklearn.inspection import PartialDependenceDisplay\r\n            from sklearn.inspection import permutation_importance\r\n            from js import seed,X_train,y_train,X_test,y_test,rf_type,max_features,num_estimators,max_depth, features,explain,num_classes\r\n            from sklearn.metrics import roc_auc_score\r\n            from sklearn.metrics import roc_curve\r\n            from sklearn.preprocessing import LabelBinarizer\r\n\r\n\r\n            features_importance = []\r\n            partial_dependence_plot_grids = []\r\n            partial_dependence_plot_avgs = []\r\n            model = RandomForestClassifier(criterion=rf_type,max_features = max_features,n_estimators=num_estimators,max_depth = max_depth, random_state=seed)\r\n            model.fit(X_train, y_train)\r\n            y_pred = model.predict(X_test)\r\n            \r\n            probas = model.predict_proba(X_test)\r\n            tprs=[]\r\n            fprs=[]\r\n            aucs=[]\r\n            label_binrize = LabelBinarizer().fit(y_train)\r\n            y_test_one_hot = label_binrize.transform(y_test)\r\n            \r\n            try:\r\n                fpr,tpr,_  = roc_curve(y_test,probas[:,1])\r\n                fprs.append(fpr)\r\n                tprs.append(tpr)\r\n                auc = roc_auc_score(y_test,probas[:,1])\r\n                aucs.append(auc)\r\n            except Exception as e:\r\n                auc = roc_auc_score(y_test,probas,multi_class = 'ovr')\r\n                aucs.append(auc)\r\n                for i in range(num_classes):\r\n                    fpr,tpr,_ = roc_curve(y_test_one_hot[:,i],probas[:,i])\r\n                    fprs.append(fpr)\r\n                    tprs.append(tpr)\r\n\r\n            if explain:\r\n                pdp = PartialDependenceDisplay.from_estimator(model, X_train, features,target=0,method ='brute')\r\n                fi = permutation_importance(model,X_test,y_test,n_repeats=10)\r\n                partial_dependence_plot_avgs = list(map(lambda item:item['average'],pdp.pd_results))\r\n                grids = list(map(lambda item:item['grid_values'],pdp.pd_results))\r\n                features_importance = list(fi.importances)\r\n                partial_dependence_plot_grids = [item[0].tolist() for item in grids ]\r\n            y_pred,partial_dependence_plot_avgs,partial_dependence_plot_grids,features_importance,fprs,tprs,aucs,probas\r\n        `;\r\n        try {\r\n            const { results, error } = await asyncRun(script, this.context);\r\n            if (results) {\r\n                this.predictions = Array.from(results[0]);\r\n                this.pdp_averages = Array.from(results[1]);\r\n                this.pdp_grid = Array.from(results[2]);\r\n                this.importances = Array.from(results[3]);\r\n                this.fpr = Array.from(results[4]);\r\n                this.tpr = Array.from(results[5]);\r\n                this.auc = Array.from(results[6]);\r\n                this.probas = Array.from(results[7]);\r\n\r\n            } else if (error) {\r\n                throw Error(\"Faced errot fitting Random Forest\")\r\n            }\r\n        } catch (e) {\r\n            throw Error(`Error in pyodideWorker at ${e.filename}, Line: ${e.lineno}, ${e.message}`,)\r\n        }\r\n        return this.predictions\r\n    }\r\n    generatePythonCode() {\r\n        let model_import = \"from sklearn.ensemble import RandomForestClassifier\"\r\n        let model_fit = `\r\nmodel = RandomForestClassifier(criterion=\"${this.options.criteria.value}\",max_features = ${this.options.features.value},n_estimators=${this.options.estimators.value},max_depth = ${this.options.depth.value}, random_state=${this.seed})`\r\n        return super.generatePythonCode(model_import, model_fit)\r\n    }\r\n    async visualize(x_test, y_test, uniqueLabels, predictions, encoder, columns, categorical_columns) {\r\n        await super.visualize(x_test, y_test, uniqueLabels, predictions, encoder)\r\n        if (this.hasExplaination) {\r\n            this.chartController.PFIBoxplot(this.id, this.importances, columns);\r\n            this.chartController.plotPDP(this.id, this.pdp_averages, this.pdp_grid, uniqueLabels, columns, categorical_columns);\r\n        }\r\n        this.chartController.plotROC(this.id, this.fpr, this.tpr, uniqueLabels, this.auc);\r\n        this.chartController.probabilities_boxplot(this.probas, encoder.inverseTransform(predictions), uniqueLabels, this.id);\r\n    }\r\n    predict() {\r\n        return this.predictions;\r\n    }\r\n}","\r\n/* eslint-disable no-undef */\r\n/* eslint-disable no-unused-vars */\r\n\r\nimport { asyncRun } from \"@/helpers/py-worker\";\r\nimport { RegressionModel } from \"../regression_model\";\r\n\r\n\r\nexport default class RandomForestRegressor extends RegressionModel {\r\n    constructor(options) {\r\n        super();\r\n        this.options = options;\r\n        this.model = null;\r\n        this.helpSectionId = 'cart_help';\r\n\r\n    }\r\n    async train(x_train, y_train, x_test, y_test, columns, __, pdpIndex) {\r\n        this.context = {\r\n            X_train: x_train,\r\n            y_train: y_train,\r\n            X_test: x_test,\r\n            y_test: y_test,\r\n            rf_type: this.options.criteria.value,\r\n            max_features: this.options.features.value,\r\n            num_estimators: this.options.estimators.value <= 0 || !this.options.estimators.value ? 100 : +this.options.estimators.value,\r\n            max_depth: this.options.depth.value <= 0 ? 5 : +this.options.depth.value,\r\n            seed: this.seed,\r\n            explain: this.hasExplaination,\r\n            features: [...Array(columns.length).keys()]\r\n        };\r\n        const script = `\r\n            from sklearn.model_selection import train_test_split\r\n            from sklearn.ensemble import RandomForestRegressor\r\n            import matplotlib\r\n            matplotlib.use(\"AGG\")\r\n            from sklearn.metrics import accuracy_score\r\n            from js import X_train,y_train,X_test,y_test,rf_type,max_features,num_estimators,max_depth,seed,features,explain\r\n            from sklearn.inspection import PartialDependenceDisplay\r\n            from sklearn.inspection import permutation_importance\r\n\r\n            features_importance = []\r\n            partial_dependence_plot_grids = []\r\n            partial_dependence_plot_avgs = []\r\n            model = RandomForestRegressor(criterion=rf_type,max_features = max_features,n_estimators=num_estimators,max_depth = max_depth, random_state=seed)\r\n            model.fit(X_train, y_train)\r\n            y_pred = model.predict(X_test)\r\n\r\n            if explain:\r\n                pdp = PartialDependenceDisplay.from_estimator(model, X_train, features)\r\n                fi = permutation_importance(model,X_test,y_test,n_repeats=10)\r\n                partial_dependence_plot_avgs = list(map(lambda item:item['average'],pdp.pd_results))\r\n                grids = list(map(lambda item:item['grid_values'],pdp.pd_results))\r\n                features_importance = list(fi.importances)\r\n                partial_dependence_plot_grids = [item[0].tolist() for item in grids ]\r\n            y_pred,partial_dependence_plot_avgs,partial_dependence_plot_grids, features_importance           \r\n        `;\r\n        try {\r\n            const { results, error } = await asyncRun(script, this.context);\r\n            if (results) {\r\n                this.predictions = Array.from(results[0]);\r\n                this.pdp_averages = Array.from(results[1]);\r\n                this.pdp_grid = Array.from(results[2]);\r\n                this.importances = Array.from(results[3]);\r\n                return Array.from(results[0]);\r\n            } else if (error) {\r\n                console.log(\"pyodideWorker error: \", error);\r\n            }\r\n        } catch (e) {\r\n            throw Error(`Error in pyodideWorker at ${e.filename}, Line: ${e.lineno}, ${e.message}`,)\r\n\r\n        }\r\n\r\n    }\r\n\r\n    predict(x_test) {\r\n        const result = this.model.predict(x_test);\r\n        return result\r\n    }\r\n    async visualize(x_test, y_test, uniqueLabels, predictions, encoder, columns, categorical_columns) {\r\n        await super.visualize(x_test, y_test, uniqueLabels, predictions, encoder)\r\n        if (this.hasExplaination) {\r\n            this.chartController.PFIBoxplot(this.id, this.importances, columns);\r\n            this.chartController.plotPDPRegression(this.id, this.pdp_averages, this.pdp_grid, uniqueLabels, columns, categorical_columns);\r\n        }\r\n    }\r\n}","import { asyncRun } from \"@/helpers/py-worker\";\r\nimport { ClassificationModel } from '../model';\r\n\r\nexport default class NaiveBayes extends ClassificationModel {\r\n    constructor(options) {\r\n        super();\r\n        this.options = options\r\n        this.model = null;\r\n        this.helpSectionId = 'naive_bayes_help';\r\n        this.hasProbability = true;\r\n\r\n\r\n    }\r\n    // eslint-disable-next-line no-unused-vars\r\n    async train(x_train, y_train, x_test, y_test, columns, __, pdpIndex) {\r\n        // const priors = this.options.priors.value ? this.options.priors?.value.split(',').map((m) => parseFloat(m)) : undefined\r\n        this.context = {\r\n            nb_type: this.options.type.value === \"Multinomial\" ? 0 : this.options.type.value === \"Gaussian\" ? 1 : 2,\r\n            priors: this.options.priors.value,\r\n            smoothing: +this.options.laplace.value,\r\n            num_classes: [...new Set(y_train)].length,\r\n            X_train: x_train,\r\n            y_train: y_train,\r\n            y_test: y_test,\r\n            explain: this.hasExplaination,\r\n            X_test: x_test,\r\n\r\n            pdpIndex: pdpIndex,\r\n            features: [...Array(columns.length).keys()]\r\n\r\n        };\r\n        const script = `\r\n            from sklearn.naive_bayes import BernoulliNB\r\n            from sklearn.naive_bayes import MultinomialNB\r\n            import matplotlib\r\n            matplotlib.use(\"AGG\")\r\n            from js import X_train,y_train,X_test,nb_type,priors,smoothing,y_test,num_classes,features,explain\r\n            from sklearn.naive_bayes import GaussianNB\r\n            from sklearn.inspection import PartialDependenceDisplay\r\n            from sklearn.inspection import permutation_importance\r\n            from sklearn.metrics import roc_auc_score\r\n            from sklearn.metrics import roc_curve\r\n            from sklearn.preprocessing import LabelBinarizer\r\n\r\n            features_importance = []\r\n            partial_dependence_plot_grids = []\r\n            partial_dependence_plot_avgs = []\r\n            if priors is not None and priors.strip():\r\n                priors = [float(x) for x in priors.split(',')]\r\n            else:\r\n                priors = None\r\n            print(\"priors\",priors)\r\n            if nb_type == 0:\r\n                model = MultinomialNB(class_prior=priors , alpha = smoothing)\r\n            if nb_type == 1:\r\n                model = GaussianNB(priors=priors)\r\n            else:\r\n                model = BernoulliNB(class_prior=priors , alpha = smoothing)\r\n            model.fit(X_train, y_train)\r\n            y_pred = model.predict(X_test)\r\n            probas = model.predict_proba(X_test)\r\n            tprs=[]\r\n            fprs=[]\r\n            aucs = []\r\n\r\n            label_binrize = LabelBinarizer().fit(y_train)\r\n            y_test_one_hot = label_binrize.transform(y_test)\r\n            \r\n            try:\r\n                fpr,tpr,_  = roc_curve(y_test,probas[:,1])\r\n                auc = roc_auc_score(y_test,probas[:,1])\r\n                aucs.append(auc)\r\n                fprs.append(fpr)\r\n                tprs.append(tpr)\r\n\r\n            except Exception as e:\r\n                print(e)\r\n                auc = roc_auc_score(y_test,probas,multi_class = 'ovr')\r\n                aucs.append(auc)\r\n                for i in range(num_classes):\r\n                    fpr,tpr,_ = roc_curve(y_test_one_hot[:,i],probas[:,i])\r\n                    fprs.append(fpr)\r\n                    tprs.append(tpr)\r\n\r\n            if explain:\r\n                pdp = PartialDependenceDisplay.from_estimator(model, X_train, features,target=0,method ='brute')\r\n                fi = permutation_importance(model,X_test,y_test,n_repeats=10)\r\n                partial_dependence_plot_avgs = list(map(lambda item:item['average'],pdp.pd_results))\r\n                grids = list(map(lambda item:item['grid_values'],pdp.pd_results))\r\n                features_importance = list(fi.importances)\r\n                partial_dependence_plot_grids = [item[0].tolist() for item in grids ]\r\n            y_pred,partial_dependence_plot_avgs,partial_dependence_plot_grids, features_importance,fprs,tprs,aucs,probas\r\n        `;\r\n        try {\r\n            const { results, error } = await asyncRun(script, this.context);\r\n            if (results) {\r\n                this.predictions = Array.from(results[0]);\r\n                this.pdp_averages = Array.from(results[1]);\r\n                this.pdp_grid = Array.from(results[2]);\r\n                this.importances = Array.from(results[3]);\r\n                this.fpr = Array.from(results[4]);\r\n                this.tpr = Array.from(results[5]);\r\n                this.auc = Array.from(results[6]);\r\n                this.probas = Array.from(results[7]);\r\n            } else if (error) {\r\n                console.log(\"pyodideWorker error: \", error);\r\n            }\r\n        } catch (e) {\r\n            throw Error(`Error in pyodideWorker at ${e.filename}, Line: ${e.lineno}, ${e.message}`,)\r\n\r\n        }\r\n        return this.predictions;\r\n    }\r\n    async visualize(x_test, y_test, uniqueLabels, predictions, encoder, columns, categorical_columns) {\r\n        await super.visualize(x_test, y_test, uniqueLabels, predictions, encoder)\r\n        if (this.hasExplaination) {\r\n            this.chartController.PFIBoxplot(this.id, this.importances, columns);\r\n            this.chartController.plotPDP(this.id, this.pdp_averages, this.pdp_grid, uniqueLabels, columns, categorical_columns);\r\n        }\r\n        this.chartController.plotROC(this.id, this.fpr, this.tpr, uniqueLabels, this.auc);\r\n        this.chartController.probabilities_boxplot(this.probas, encoder.inverseTransform(predictions), uniqueLabels, this.id);\r\n    }\r\n}","import { asyncRun } from \"@/helpers/py-worker\";\r\nimport { ClassificationModel } from \"../model\";\r\nexport default class DiscriminantAnalysis extends ClassificationModel {\r\n    constructor(options) {\r\n        super();\r\n        this.options = options\r\n        this.hasProbability = true;\r\n        this.helpSectionId = 'discriminant_analysis_help';\r\n\r\n    }\r\n    async train(x, y, x_test, y_test, columns, __, pdpIndex) {\r\n        this.context = {\r\n            lda_type: this.options.type.value,\r\n            priors: this.options.priors.value,\r\n            X_train: x,\r\n            y_train: y,\r\n            X_test: x_test,\r\n            y_test: y_test,\r\n            pdpIndex: pdpIndex,\r\n            explain: this.hasExplaination,\r\n            features: [...Array(columns.length).keys()],\r\n            num_classes: [...new Set(y)].length,\r\n\r\n\r\n        };\r\n        const script = `\r\n        import matplotlib\r\n        matplotlib.use(\"AGG\")\r\n        from sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis\r\n        from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\r\n        from js import X_train,y_train,X_test,lda_type,priors,y_test,features,explain,num_classes\r\n        from sklearn.inspection import PartialDependenceDisplay\r\n        from sklearn.inspection import permutation_importance\r\n        from sklearn.metrics import roc_auc_score\r\n        from sklearn.metrics import roc_curve\r\n        from sklearn.preprocessing import LabelBinarizer\r\n\r\n\r\n        features_importance = []\r\n        partial_dependence_plot_grids = []\r\n        partial_dependence_plot_avgs = []\r\n        if priors is not None and priors.strip():\r\n            priors = [float(x) for x in priors.split(',')]\r\n        else:\r\n            priors = None\r\n        print(\"priors\",priors)\r\n        if lda_type == 0:\r\n            model = LinearDiscriminantAnalysis(priors=priors)\r\n        else:\r\n            model = QuadraticDiscriminantAnalysis(priors=priors)\r\n        model.fit(X_train, y_train)\r\n        y_pred = model.predict(X_test)\r\n        probas = model.predict_proba(X_test)\r\n        tprs=[]\r\n        fprs=[]\r\n        aucs = []\r\n        label_binrize = LabelBinarizer().fit(y_train)\r\n        y_test_one_hot = label_binrize.transform(y_test)\r\n        \r\n        try:\r\n            fpr,tpr,_  = roc_curve(y_test,probas[:,1])\r\n            auc = roc_auc_score(y_test,probas[:,1])\r\n            aucs.append(auc)\r\n            fprs.append(fpr)\r\n            tprs.append(tpr)\r\n\r\n        except Exception as e:\r\n            print(e)\r\n            auc = roc_auc_score(y_test,probas,multi_class = 'ovr')\r\n            aucs.append(auc)\r\n            for i in range(num_classes):\r\n                fpr,tpr,_ = roc_curve(y_test_one_hot[:,i],probas[:,i])\r\n                fprs.append(fpr)\r\n                tprs.append(tpr)\r\n\r\n        if explain:\r\n            pdp = PartialDependenceDisplay.from_estimator(model, X_train, features,target=0,method ='brute')\r\n            fi = permutation_importance(model,X_test,y_test,n_repeats=10)\r\n            partial_dependence_plot_avgs = list(map(lambda item:item['average'],pdp.pd_results))\r\n            grids = list(map(lambda item:item['grid_values'],pdp.pd_results))\r\n            features_importance = list(fi.importances)\r\n            partial_dependence_plot_grids = [item[0].tolist() for item in grids ]\r\n        y_pred,partial_dependence_plot_avgs,partial_dependence_plot_grids, features_importance,fprs,tprs,aucs,probas\r\n    `;\r\n        try {\r\n            const { results, error } = await asyncRun(script, this.context);\r\n            if (results) {\r\n                this.predictions = Array.from(results[0]);\r\n                this.pdp_averages = Array.from(results[1]);\r\n                this.pdp_grid = Array.from(results[2]);\r\n                this.importances = Array.from(results[3]);\r\n                this.fpr = Array.from(results[4]);\r\n                this.tpr = Array.from(results[5]);\r\n                this.auc = Array.from(results[6]);\r\n                this.probas = Array.from(results[7]);\r\n                return Array.from(results[0]);\r\n            } else if (error) {\r\n                console.log(\"pyodideWorker error: \", error);\r\n            }\r\n        } catch (e) {\r\n            throw Error(`Error in pyodideWorker at ${e.filename}, Line: ${e.lineno}, ${e.message}`,)\r\n\r\n        }\r\n    }\r\n\r\n    async visualize(x_test, y_test, uniqueLabels, predictions, encoder, columns, categorical_columns) {\r\n        await super.visualize(x_test, y_test, uniqueLabels, predictions, encoder)\r\n        if (this.hasExplaination) {\r\n            this.chartController.PFIBoxplot(this.id, this.importances, columns);\r\n            this.chartController.plotPDP(this.id, this.pdp_averages, this.pdp_grid, uniqueLabels, columns, categorical_columns);\r\n        }\r\n        this.chartController.plotROC(this.id, this.fpr, this.tpr, uniqueLabels, this.auc);\r\n        this.chartController.probabilities_boxplot(this.probas,  encoder.inverseTransform(predictions), uniqueLabels, this.id);\r\n    }\r\n\r\n}\r\n","\r\n/* eslint-disable no-undef */\r\n/* eslint-disable no-unused-vars */\r\n\r\n\r\nimport Plotly from 'danfojs/node_modules/plotly.js-dist-min';\r\nimport { RegressionModel } from '../regression_model';\r\n\r\nexport default class PolynomialRegression extends RegressionModel {\r\n    constructor(options) {\r\n        super();\r\n        this.options = options;\r\n        this.model = null;\r\n        this.hasExplaination = false\r\n        this.summary = null;\r\n        this.model_stats_matrix = null;\r\n\r\n    }\r\n\r\n    async train(x_train, y_train, x_test, y_test, labels, categorical_columns) {\r\n\r\n        let regularization_type = this.options?.regularization?.value === \"Lasso\" ? 1 : 0;\r\n        let degree = +this.options?.degree?.value;\r\n\r\n        const webR = window.webr;\r\n        await webR.init();\r\n        await webR.installPackages(['jsonlite', 'ggplot2', 'plotly', 'tidyr', 'broom', 'dplyr', 'ggrepel', 'glmnet', 'modelsummary'], { quiet: true });\r\n        await webR.objs.globalEnv.bind('xx', x_train);\r\n        await webR.objs.globalEnv.bind('x_test', x_test);\r\n        await webR.objs.globalEnv.bind('random_seed', this.seed);\r\n\r\n        await webR.objs.globalEnv.bind('y', y_train);\r\n        await webR.objs.globalEnv.bind('degree', degree);\r\n        await webR.objs.globalEnv.bind('names', labels);\r\n        await webR.objs.globalEnv.bind('categorical_columns', categorical_columns?.length === 0 ? ['empty'] : categorical_columns);\r\n\r\n        await webR.objs.globalEnv.bind('is_lasso', regularization_type);\r\n\r\n\r\n        const plotlyData = await webR.evalR(`\r\n                    library(plotly)\r\n                    library(ggplot2)\r\n                    library(tidyr)\r\n                    library(dplyr)\r\n                    library(broom)\r\n\r\n                    library(ggrepel)\r\n                    library(modelsummary)\r\n                    library(glmnet)\r\n                    set.seed(random_seed)\r\n\r\n                    # Select all columns except the first as predictors. \r\n                    add_powers <- function(df, degree,columns) {\r\n                            new_df <- df  # Copy the original data frame\r\n                            for (col in columns) {\r\n                                for (d in 2:degree){\r\n                                    new_col_name <- paste0(col, \"_\", d)\r\n                                    new_df[[new_col_name]] <- df[[col]]^d\r\n                                }\r\n                            }\r\n                            return(new_df)\r\n                        }\r\n                        \r\n                    x <- as.matrix(xx)  \r\n                    colnames(x) <- names\r\n                    cols_numerical <- setdiff(names, categorical_columns)\r\n                    df_main <- add_powers(as.data.frame(x), degree,cols_numerical)\r\n                    scale_df <- add_powers(as.data.frame(x), degree,cols_numerical)\r\n                    all_column_names <- colnames(scale_df)\r\n                    cols_to_scale <- setdiff(all_column_names, categorical_columns)\r\n                    scale_df[cols_to_scale] <- scale(scale_df[cols_to_scale])\r\n                    \r\n                    x <- as.matrix(x_test)  \r\n                    colnames(x) <- names\r\n                    df_test <- add_powers(as.data.frame(x), degree,cols_numerical)\r\n                    base_model = cv.glmnet(as.matrix(scale_df), y)\r\n                    weights <- 1 / abs(coef(base_model)[-1])\r\n\r\n                    if(is_lasso){\r\n                        cvfit = cv.glmnet(as.matrix(scale_df), y, alpha = 1)\r\n                    }else{\r\n                       cvfit = cv.glmnet(as.matrix(scale_df), y, alpha = 0)\r\n                    }\r\n                    betas = as.matrix(cvfit$glmnet.fit$beta)\r\n                    lambdas = cvfit$lambda\r\n                    names(lambdas) = colnames(betas)\r\n                    \r\n                    p <- as.data.frame(betas) %>% \r\n                      tibble::rownames_to_column(\"variable\") %>% \r\n                      pivot_longer(-variable) %>% \r\n                      mutate(lambda=lambdas[name]) %>% \r\n                      mutate(variable = factor(variable, levels = sort(unique(variable)))) %>%\r\n\r\n                    ggplot(aes(x=lambda,y=value,col=variable)) + \r\n                      geom_line() + \r\n                      geom_label_repel(data=~subset(.x,lambda==min(lambda)),\r\n                                       aes(label=variable),nudge_x=-0.5) +\r\n                      geom_vline(xintercept=c(cvfit$lambda.1se,cvfit$lambda.min),\r\n                                linetype=\"dashed\")+\r\n                      scale_x_log10() +\r\n                      labs(y = \"Coefficient\") +\r\n                    theme_bw()\r\n                    \r\n                    df = with(cvfit,\r\n                            data.frame(lambda = lambdas,MSE = cvm,MSEhi=cvup,MSElow=cvlo))\r\n\r\n                    p2<-ggplot(df,aes(x=lambda,y=MSE)) + \r\n                    geom_point(col=\"#f05454\") + \r\n                    scale_x_log10(\"lambda\") + \r\n                    geom_errorbar(aes(ymin = MSElow,ymax=MSEhi),col=\"#30475e\") + \r\n                    geom_vline(xintercept=c(cvfit$lambda.1se,cvfit$lambda.min),\r\n                                linetype=\"dashed\")+\r\n                    theme_bw()\r\n\r\n                     # Get lambda.min and lambda.1se\r\n                    lambda_min = cvfit$lambda.min\r\n                    lambda_1se = cvfit$lambda.1se\r\n\r\n                    # Get the coefficients at lambda.min and lambda.1se\r\n                    coef_lambda_min = coef(cvfit, s = \"lambda.min\")\r\n                    coef_lambda_1se = coef(cvfit, s = \"lambda.1se\")\r\n\r\n                    # Convert the sparse matrix to a regular matrix to make indexing easier\r\n                    coef_lambda_min_matrix = as.matrix(coef_lambda_min)\r\n                    coef_lambda_1se_matrix = as.matrix(coef_lambda_1se)\r\n                    coef_lambda_min_matrix = coef_lambda_min_matrix[-1, , drop = FALSE]\r\n                    coef_lambda_1se_matrix = coef_lambda_1se_matrix[-1, , drop = FALSE]\r\n                    # Find the non-zero features at lambda.min and lambda.1se\r\n                    non_zero_features_min = rownames(coef_lambda_min_matrix)[coef_lambda_min_matrix != 0]\r\n                    non_zero_features_1se = rownames(coef_lambda_1se_matrix)[coef_lambda_1se_matrix != 0]\r\n                    print(non_zero_features_min)\r\n                    print(non_zero_features_1se)\r\n                    x <- as.matrix(df_main)\r\n                    colnames(x) <- all_column_names\r\n\r\n                    model <- lm(y ~ ., data = as.data.frame(x))\r\n\r\n                    x <- as.matrix(df_test)  \r\n                    colnames(x) <- all_column_names\r\n\r\n                    predictions <- predict(model, newdata = as.data.frame(x))\r\n                    # Get coefficients, p-values, and standard errors\r\n                    coefs <- coef(model)\r\n                    pvals <- summary(model)$coefficients[,4]\r\n                    std_error <- summary(model)$coefficients[,2]\r\n                    aic_value <- AIC(model)\r\n                    bic_value <- BIC(model)\r\n                    rsquared <- summary(model)$r.squared\r\n                    residuals_ols <- resid(model)\r\n                    fitted_values_ols <- fitted(model)\r\n\r\n                    x <- as.matrix(df_main)  \r\n                    colnames(x) <- all_column_names\r\n                    X_reduced <- x[, non_zero_features_min]\r\n                    linear_model_min_features <- non_zero_features_min\r\n                    # Fit a linear regression model using the non-zero features\r\n                    print(colnames(X_reduced))\r\n                    linear_model_min <- lm(y ~ ., data = as.data.frame(X_reduced))\r\n                    coefs_min <- coef(linear_model_min)\r\n                    pvals_min <- summary(linear_model_min)$coefficients[,4]\r\n                    std_error_min <- summary(linear_model_min)$coefficients[,2]\r\n                    aic_min <- AIC(linear_model_min)\r\n                    rsquared_min <- summary(linear_model_min)$r.squared\r\n                    best_lambda <- cvfit$lambda.1se\r\n                    best_model <- glmnet(x, y, alpha =is_lasso, lambda = best_lambda)\r\n                    coefficients <- as.matrix(coef(best_model))\r\n                    residuals_min <- resid(linear_model_min)\r\n                    fitted_values_min <- fitted(linear_model_min)\r\n                    x <- as.matrix(df_test)  \r\n                    colnames(x) <- all_column_names\r\n                    predictions_min <- predict(linear_model_min, newdata = as.data.frame(x))\r\n\r\n\r\n\r\n\r\n\r\n                    x <- as.matrix(df_main)  \r\n                    colnames(x) <- all_column_names\r\n                    \r\n                    X_reduced <- x[, non_zero_features_1se]\r\n                    linear_model_1se_features <- non_zero_features_1se\r\n                    print(colnames(X_reduced))\r\n                    linear_model_1se <- lm(y ~ ., data = as.data.frame(X_reduced))\r\n                    coefs_1se <- coef(linear_model_1se)\r\n                    print(coefs_1se)\r\n                    pvals_1se <- summary(linear_model_1se)$coefficients[,4]\r\n                    aic_1se<- AIC(linear_model_1se)\r\n                    rsquared_1se <- summary(linear_model_1se)$r.squared\r\n                    std_error_1se <- summary(linear_model_1se)$coefficients[,2]\r\n                    residuals_1se <- resid(linear_model_1se)\r\n                    fitted_values_1se <- fitted(linear_model_1se)\r\n                    x <- as.matrix(df_test) \r\n                    colnames(x) <- all_column_names \r\n                    x <- x[, linear_model_1se_features]\r\n                    predictions_1se <- predict(linear_model_1se, newdata = as.data.frame(x))\r\n                    models <- list(\r\n                        \"OLS\" = model,\r\n                        \"Lasso Min \" = linear_model_min,\r\n                        \"Lasso 1se \" = linear_model_1se\r\n                        )\r\n\r\n                    z <- modelplot(models =models,coef_omit = 'Interc')\r\n                    qqplot_ols <-ggplot(data.frame(residuals = residuals_ols), aes(sample = residuals_ols)) +\r\n                        stat_qq() +\r\n                        stat_qq_line(col = \"red\") +\r\n                        labs(title = \"QQ Plot of Residuals\",\r\n                            x = \"Theoretical Quantiles\",\r\n                            y = \"Sample Quantiles\") +\r\n                        theme_bw()\r\n                    qqplot_1se <-ggplot(data.frame(residuals = residuals_1se), aes(sample = residuals_1se)) +\r\n                        stat_qq() +\r\n                        stat_qq_line(col = \"red\") +\r\n                        labs(title = \"QQ Plot of Residuals\",\r\n                            x = \"Theoretical Quantiles\",\r\n                            y = \"Sample Quantiles\") +\r\n                        theme_bw()\r\n                    qqplot_min <-ggplot(data.frame(residuals = residuals_min), aes(sample = residuals_min)) +\r\n                        stat_qq() +\r\n                        stat_qq_line(col = \"red\") +\r\n                        labs(title = \"QQ Plot of Residuals\",\r\n                            x = \"Theoretical Quantiles\",\r\n                            y = \"Sample Quantiles\") +\r\n                        theme_bw()\r\n                    list(plotly_json(p, pretty = FALSE),plotly_json(p2, pretty = FALSE),coefs,\r\n                    pvals,std_error,predictions,aic_value,bic_value,rsquared\r\n                    ,coefs_min,pvals_min,std_error_min\r\n                    ,coefs_1se,pvals_1se,std_error_1se,plotly_json(z, pretty = FALSE),linear_model_min_features,linear_model_1se_features\r\n                    ,residuals_ols,residuals_1se,residuals_min,predictions_1se,predictions_min,rsquared_1se,aic_1se,rsquared_min,aic_min\r\n                    ,plotly_json(qqplot_ols, pretty = FALSE)\r\n                    ,plotly_json(qqplot_1se, pretty = FALSE)\r\n                    ,plotly_json(qqplot_min, pretty = FALSE)\r\n                    ,all_column_names\r\n                    )\r\n                    `);\r\n        let results = await plotlyData.toArray()\r\n\r\n        this.summary = {\r\n            params: await results[2].toArray(),\r\n            bse: await results[4].toArray(),\r\n            pvalues: await results[3].toArray(),\r\n            predictions: await results[5].toArray(),\r\n            predictions1se: await results[21].toArray(),\r\n            predictionsmin: await results[22].toArray(),\r\n            residuals_ols: await results[18].toArray(),\r\n            residuals_1se: await results[19].toArray(),\r\n            residuals_min: await results[20].toArray(),\r\n            aic: await results[6].toNumber(),\r\n            bic: await results[7].toNumber(),\r\n            r2: await results[8].toNumber(),\r\n            best_fit_min: {\r\n                r2: await results[25].toNumber(),\r\n                aic: await results[26].toNumber(),\r\n                names: await results[16].toArray(),\r\n                coefs: await results[9].toArray(),\r\n                bse: await results[11].toArray(),\r\n                pvalues: await results[10].toArray(),\r\n            },\r\n            best_fit_1se: {\r\n                r2: await results[23].toNumber(),\r\n                aic: await results[24].toNumber(),\r\n                names: await results[17].toArray(),\r\n                coefs: await results[12].toArray(),\r\n                bse: await results[14].toArray(),\r\n                pvalues: await results[13].toArray(),\r\n            },\r\n            columnNames: await results[30].toArray()\r\n        };\r\n        this.model_stats_matrix = [];\r\n        let cols = this.summary.columnNames\r\n        cols.unshift(\"intercept\")\r\n        let min_ols_columns = this.summary['best_fit_min'].names;\r\n\r\n        min_ols_columns.unshift('intercept');\r\n        let se_ols_columns = this.summary['best_fit_1se'].names;\r\n        se_ols_columns.unshift('intercept');\r\n        function isNumeric(value) {\r\n            return /^-?\\d+$/.test(value);\r\n        }\r\n\r\n        for (let i = 0; i < cols.length; i++) {\r\n            let row = [];\r\n            row.push(cols[i])\r\n            row.push(this.summary['params'][i]?.toFixed(2) ?? ' ')\r\n            row.push(this.summary['bse'][i]?.toFixed(2) ?? ' ')\r\n            row.push(this.summary['pvalues'][i]?.toFixed(2) ?? ' ')\r\n            let index = min_ols_columns.findIndex(m => m === cols[i])\r\n            if (index !== -1) {\r\n                row.push(this.summary['best_fit_min']['coefs'][index]?.toFixed(2) ?? ' ')\r\n                row.push(this.summary['best_fit_min']['bse'][index]?.toFixed(2) ?? ' ')\r\n                row.push(this.summary['best_fit_min']['pvalues'][index]?.toFixed(2) ?? ' ')\r\n            } else {\r\n                row.push(' ')\r\n                row.push(' ')\r\n                row.push(' ')\r\n            }\r\n            index = se_ols_columns.findIndex(m => m === cols[i])\r\n            if (index !== -1) {\r\n                row.push(this.summary['best_fit_1se']['coefs'][index]?.toFixed(2) ?? ' ')\r\n                row.push(this.summary['best_fit_1se']['bse'][index]?.toFixed(2) ?? ' ')\r\n                row.push(this.summary['best_fit_1se']['pvalues'][index]?.toFixed(2) ?? ' ')\r\n            } else {\r\n                row.push(' ')\r\n                row.push(' ')\r\n                row.push(' ')\r\n            }\r\n            this.model_stats_matrix.push(row)\r\n        }\r\n        this.model_stats_matrix = this.model_stats_matrix.sort(function (a, b) {\r\n            if (a[0] > b[0]) {\r\n                return 1\r\n            }\r\n            if (a[0] < b[0]) {\r\n                return -1\r\n            }\r\n            return 0\r\n        })\r\n        this.model_stats_matrix.reverse()\r\n        let reg_plot = JSON.parse(await results[0].toString())\r\n        reg_plot.layout['showlegend'] = true;\r\n        reg_plot.layout['autosize'] = true;\r\n        reg_plot.layout['responsive'] = true;\r\n        reg_plot.layout.xaxis['side'] = 'top';\r\n        reg_plot.layout.legend = {\r\n            orientation: 'h',\r\n            font: {\r\n\r\n                size: 8,\r\n                color: '#000'\r\n            },\r\n        };\r\n        let coefs_plot = JSON.parse(await results[15].toString())\r\n        coefs_plot.layout.legend = {\r\n            x: 0,\r\n            y: 1,\r\n            traceorder: 'normal',\r\n            font: {\r\n\r\n                size: 8,\r\n                color: '#000'\r\n            },\r\n        };\r\n        this.summary.coefs_plot = coefs_plot;\r\n        this.summary.coefs_plot.layout['autosize'] = true;\r\n        this.summary.coefs_plot.layout['responsive'] = true;\r\n        this.summary.coefs_plot.layout.xaxis.title.font = {\r\n            size: 10\r\n        };\r\n        this.summary.regularization_plot = reg_plot;\r\n        this.summary.errors_plot = JSON.parse(await results[1].toString());\r\n        this.summary.qqplot_ols_plot = JSON.parse(await results[27].toString());\r\n        this.summary.qqplot_1se_plot = JSON.parse(await results[28].toString());\r\n        this.summary.qqplot_min_plot = JSON.parse(await results[29].toString());\r\n\r\n        this.summary.qqplot_ols_plot.layout.height = 300\r\n        this.summary.qqplot_ols_plot.layout.width = 300\r\n        this.summary.qqplot_ols_plot.layout.title.font = {\r\n\r\n            size: 10\r\n        };\r\n        this.summary.qqplot_ols_plot.data[0].marker.size = 2;\r\n        this.summary.qqplot_ols_plot.layout.xaxis.title.font = {\r\n\r\n            size: 10\r\n        };\r\n        this.summary.qqplot_ols_plot.layout.yaxis.title.font = {\r\n\r\n            size: 10\r\n        };\r\n\r\n        this.summary.qqplot_1se_plot.layout.height = 300\r\n        this.summary.qqplot_1se_plot.layout.width = 300\r\n        this.summary.qqplot_1se_plot.layout.title.font = {\r\n\r\n            size: 10\r\n        };\r\n        this.summary.qqplot_1se_plot.data[0].marker.size = 2;\r\n\r\n        this.summary.qqplot_1se_plot.layout.xaxis.title.font = {\r\n\r\n            size: 10\r\n        };\r\n        this.summary.qqplot_1se_plot.layout.yaxis.title.font = {\r\n\r\n            size: 10\r\n        };\r\n\r\n        this.summary.qqplot_min_plot.layout.height = 300\r\n        this.summary.qqplot_min_plot.layout.width = 300\r\n        this.summary.qqplot_min_plot.layout.title.font = {\r\n\r\n            size: 10\r\n        };\r\n        this.summary.qqplot_min_plot.layout.xaxis.title.font = {\r\n\r\n            size: 10\r\n        };\r\n        this.summary.qqplot_min_plot.layout.yaxis.title.font = {\r\n\r\n            size: 10\r\n        };\r\n        this.summary.qqplot_min_plot.data[0].marker.size = 2;\r\n        return this.summary['predictions'];\r\n    }\r\n    async visualize(x_test, y_test, uniqueLabels, predictions, encoder) {\r\n        await super.visualize(x_test, y_test, uniqueLabels, predictions)\r\n        let current = this;\r\n\r\n        new DataTable('#metrics_table_' + current.id, {\r\n            responsive: false,\r\n            \"footerCallback\": function (row, data, start, end, display) {\r\n                var api = this.api();\r\n                $(api.column(2).footer()).html(\r\n                    'R2 : ' + current.summary.r2.toFixed(2) + ' AIC: ' + current.summary.aic.toFixed(2)\r\n                );\r\n                $(api.column(5).footer()).html(\r\n                    'R2 : ' + current.summary['best_fit_min'].r2.toFixed(2) + ' AIC: ' + current.summary['best_fit_min'].aic.toFixed(2)\r\n                );\r\n                $(api.column(8).footer()).html(\r\n                    'R2 : ' + current.summary['best_fit_1se'].r2.toFixed(2) + ' AIC: ' + current.summary['best_fit_1se'].aic.toFixed(2)\r\n                );\r\n            },\r\n            data: current.model_stats_matrix,\r\n            info: false,\r\n            search: false,\r\n            ordering: false,\r\n            searching: false,\r\n            paging: false,\r\n            bDestroy: true,\r\n            columnDefs: [\r\n                {\r\n                    \"targets\": 3,\r\n                    \"createdCell\": function (td, cellData, rowData, row, col) {\r\n                        if (rowData[3] <= 0.05) {\r\n                            $(td).css('color', 'red')\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    \"targets\": 6,\r\n                    \"createdCell\": function (td, cellData, rowData, row, col) {\r\n                        if (rowData[6] <= 0.05) {\r\n                            $(td).css('color', 'red')\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    \"targets\": 9,\r\n                    \"createdCell\": function (td, cellData, rowData, row, col) {\r\n                        if (rowData[9] <= 0.05) {\r\n                            $(td).css('color', 'red')\r\n                        }\r\n                    }\r\n                }\r\n            ],\r\n        });\r\n\r\n        Plotly.newPlot('regularization_' + current.id, current.summary.regularization_plot, { autosize: true, responsive: true });\r\n        Plotly.newPlot('parameters_plot_' + current.id, current.summary.coefs_plot, { autosize: true, responsive: true });\r\n        Plotly.newPlot('errors_' + current.id, current.summary.errors_plot, { autosize: true, responsive: true });\r\n        Plotly.newPlot('qqplot_ols_' + current.id, current.summary.qqplot_ols_plot);\r\n        Plotly.newPlot('qqplot_min_' + current.id, current.summary.qqplot_min_plot);\r\n        Plotly.newPlot('qqplot_1se_' + current.id, current.summary.qqplot_1se_plot);\r\n        current.ui.yhat_plot(y_test, this.summary['predictions'], 'regression_y_yhat_' + + current.id, 'OLS predictions')\r\n        current.ui.yhat_plot(y_test, this.summary['predictionsmin'], 'regression_y_yhat_min_' + + current.id, 'lasso min predictions')\r\n        current.ui.yhat_plot(y_test, this.summary['predictions1se'], 'regression_y_yhat_1se_' + + current.id, 'lasso 1se predictions')\r\n        current.ui.residual_plot(y_test, this.summary['residuals_ols'], 'regression_residual_' + + current.id, 'OLS residuals')\r\n        current.ui.residual_plot(y_test, this.summary['residuals_min'], 'regression_residual_min_' + + current.id, 'lasso min residuals')\r\n        current.ui.residual_plot(y_test, this.summary['residuals_1se'], 'regression_residual_1se_' + + current.id, 'lasso 1se residuals')\r\n        this.ui.predictions_table_regression(x_test, y_test, predictions, this.id);\r\n    }\r\n\r\n}","import { asyncRun } from \"@/helpers/py-worker\";\r\n\r\n\r\nexport default class KernelRegression {\r\n    constructor(options) {\r\n        this.options = options;\r\n        this.model = null;\r\n        this.hasExplaination = false;\r\n\r\n    }\r\n    async train(x_train, y_train, x_test, _, labels) {\r\n        this.context = {\r\n            X_train: x_train,\r\n            y_train: y_train,\r\n            X_test: x_test,\r\n            types: this.options.types,\r\n            labels: labels\r\n        };\r\n        const script = `\r\n        import numpy as np\r\n        import statsmodels.api as sm\r\n        from js import X_train,y_train,X_test,labels,types\r\n        from statsmodels.nonparametric.kernel_regression import KernelReg\r\n        import pandas as pd\r\n\r\n        df_test = pd.DataFrame(X_test,columns=labels)\r\n        x_test = df_test.iloc[:,:]\r\n\r\n        df_train = pd.DataFrame(X_train,columns=labels)\r\n        x_train = df_train.iloc[:,:]\r\n\r\n        model = KernelReg(endog=np.array(y_train), exog=x_train, var_type=types)\r\n        \r\n        preds = model.fit(x_test)\r\n\r\n        \r\n        preds\r\n        `;\r\n        try {\r\n            const { results, error } = await asyncRun(script, this.context);\r\n            if (results) {\r\n                return results;\r\n            } else if (error) {\r\n                console.log(\"pyodideWorker error: \", error);\r\n            }\r\n        } catch (e) {\r\n            throw Error(`Error in pyodideWorker at ${e.filename}, Line: ${e.lineno}, ${e.message}`,)\r\n\r\n        }\r\n\r\n    }\r\n    predict(x_test) {\r\n        const result = this.model.predict(x_test);\r\n        return result\r\n    }\r\n}","import { asyncRun } from \"@/helpers/py-worker\";\r\nimport { ClassificationModel } from '../model';\r\nexport default class Boosting extends ClassificationModel {\r\n    constructor(opt, chartControler) {\r\n        super(chartControler);\r\n        let options = {\r\n            booster: opt.booster.value ?? \"gbtree\",\r\n            objective: \"multi:softmax\",\r\n            max_depth: +opt.depth.value,\r\n            eta: +opt.eta.value,\r\n            estimators: opt.estimators.value ?? 200\r\n        }\r\n        this.options = options;\r\n        this.helpSectionId = 'cart_help';\r\n\r\n    }\r\n    // eslint-disable-next-line no-unused-vars\r\n    async train(x, y, x_test, y_test, columns, __, pdpIndex) {\r\n        this.context = {\r\n            X_train: x,\r\n            y_train: y,\r\n            X_test: x_test,\r\n            y_test: y_test,\r\n            objective: this.options.objective,\r\n            max_depth: this.options.max_depth,\r\n            eta: this.options.eta,\r\n            estimators: this.options.estimators,\r\n            seed: this.seed,\r\n            pdpIndex: pdpIndex,\r\n            features: [...Array(columns.length).keys()],\r\n            explain: this.hasExplaination\r\n        };\r\n        const script = `\r\n        import matplotlib\r\n        matplotlib.use(\"AGG\")\r\n        from js import X_train,y_train,X_test,y_test,objective,max_depth,eta,estimators,seed,features,explain\r\n        from sklearn.inspection import PartialDependenceDisplay\r\n        from sklearn.inspection import permutation_importance\r\n        from sklearn.ensemble import GradientBoostingClassifier\r\n\r\n        features_importance = []\r\n        partial_dependence_plot_grids = []\r\n        partial_dependence_plot_avgs = []\r\n\r\n        model = GradientBoostingClassifier(learning_rate = eta,n_estimators = estimators,max_depth =max_depth,random_state = seed )\r\n        model.fit(X_train, y_train)\r\n        y_pred = model.predict(X_test)\r\n        if explain:\r\n            pdp = PartialDependenceDisplay.from_estimator(model, X_train, features,target=0,method ='brute')\r\n            fi = permutation_importance(model,X_test,y_test,n_repeats=10)\r\n            partial_dependence_plot_avgs = list(map(lambda item:item['average'],pdp.pd_results))\r\n            grids = list(map(lambda item:item['grid_values'],pdp.pd_results))\r\n            features_importance = list(fi.importances)\r\n            partial_dependence_plot_grids = [item[0].tolist() for item in grids ]\r\n        y_pred,partial_dependence_plot_avgs,partial_dependence_plot_grids, features_importance\r\n    `;\r\n        try {\r\n            const { results, error } = await asyncRun(script, this.context);\r\n            if (results) {\r\n                this.predictions = Array.from(results[0]);\r\n                this.pdp_averages = Array.from(results[1]);\r\n                this.pdp_grid = Array.from(results[2]);\r\n                this.importances = Array.from(results[3]);\r\n                return Array.from(results[0]);\r\n            } else if (error) {\r\n                console.log(\"pyodideWorker error: \", error);\r\n            }\r\n        } catch (e) {\r\n            throw Error(`Error in pyodideWorker at ${e.filename}, Line: ${e.lineno}, ${e.message}`,)\r\n\r\n        }\r\n    }\r\n    generatePythonCode() {\r\n        let model_import = \"from sklearn.ensemble import GradientBoostingClassifier\"\r\n        let model_fit =\r\n            `model = GradientBoostingClassifier(learning_rate = ${this.options.eta} ,n_estimators = ${this.options.estimators} ,max_depth =${this.options.max_depth} ,random_state = ${this.seed} )`;\r\n        return super.generatePythonCode(model_import, model_fit)\r\n    }\r\n    async visualize(x_test, y_test, uniqueLabels, predictions, encoder, columns, categorical_columns) {\r\n        await super.visualize(x_test, y_test, uniqueLabels, predictions, encoder)\r\n        if (this.hasExplaination) {\r\n            this.chartController.PFIBoxplot(this.id, this.importances, columns);\r\n            this.chartController.plotPDP(this.id, this.pdp_averages, this.pdp_grid, uniqueLabels, columns, categorical_columns);\r\n        }\r\n    }\r\n}\r\n","\r\nimport { RegressionModel } from '../regression_model';\r\nimport { asyncRun } from \"@/helpers/py-worker\";\r\n\r\n\r\nexport default class BoostingRegression extends RegressionModel {\r\n    constructor(opt, chartControler) {\r\n        super(chartControler);\r\n        let options = {\r\n            booster: opt.booster.value ?? \"gbtree\",\r\n            objective: \"multi:softmax\",\r\n            max_depth: +opt.depth.value,\r\n            eta: +opt.eta.value,\r\n            estimators: opt.estimators.value ?? 200\r\n        }\r\n        this.options = options;\r\n        this.helpSectionId = 'cart_help';\r\n\r\n    }\r\n    async train(x, y, x_test, y_test, columns) {\r\n        this.context = {\r\n            X_train: x,\r\n            y_train: y,\r\n            X_test: x_test,\r\n            y_test: y_test,\r\n            objective: this.options.objective,\r\n            max_depth: this.options.max_depth,\r\n            eta: this.options.eta,\r\n            estimators: this.options.estimators,\r\n            seed: this.seed,\r\n            explain: this.hasExplaination,\r\n            features: [...Array(columns.length).keys()]\r\n        };\r\n        const script = `\r\n\r\n        from js import X_train,y_train,X_test,y_test,objective,max_depth,eta,estimators,seed,features,explain\r\n        from sklearn.inspection import PartialDependenceDisplay\r\n        from sklearn.inspection import permutation_importance\r\n        from sklearn.ensemble import GradientBoostingRegressor\r\n        import pandas as pd\r\n        import matplotlib\r\n        matplotlib.use(\"AGG\")\r\n\r\n        features_importance = []\r\n        partial_dependence_plot_grids = []\r\n        partial_dependence_plot_avgs = []\r\n        model = GradientBoostingRegressor(learning_rate = eta,n_estimators = estimators,max_depth =max_depth,random_state = seed)\r\n        model.fit(X_train, y_train)\r\n        y_pred = model.predict(X_test)\r\n\r\n\r\n\r\n        if explain:\r\n            pdp = PartialDependenceDisplay.from_estimator(model, X_train, features,method ='brute')\r\n            fi = permutation_importance(model,X_test,y_test,n_repeats=10)\r\n            partial_dependence_plot_avgs = list(map(lambda item:item['average'],pdp.pd_results))\r\n            grids = list(map(lambda item:item['grid_values'],pdp.pd_results))\r\n            features_importance = list(fi.importances)\r\n            partial_dependence_plot_grids = [item[0].tolist() for item in grids ]\r\n        y_pred,partial_dependence_plot_avgs,partial_dependence_plot_grids, features_importance\r\n\r\n    `;\r\n        try {\r\n            const { results, error } = await asyncRun(script, this.context);\r\n            if (results) {\r\n                this.predictions = Array.from(results[0]);\r\n                this.pdp_averages = Array.from(results[1]);\r\n                this.pdp_grid = Array.from(results[2]);\r\n                this.importances = Array.from(results[3]);\r\n                return Array.from(results[0]);\r\n            } else if (error) {\r\n                console.log(\"pyodideWorker error: \", error);\r\n            }\r\n        } catch (e) {\r\n            throw Error(`Error in pyodideWorker at ${e.filename}, Line: ${e.lineno}, ${e.message}`,)\r\n\r\n        }\r\n    }\r\n    async visualize(x_test, y_test, uniqueLabels, predictions, encoder, columns, categorical_columns) {\r\n        await super.visualize(x_test, y_test, uniqueLabels, predictions, encoder)\r\n        if (this.hasExplaination) {\r\n            this.chartController.PFIBoxplot(this.id, this.importances, columns);\r\n            this.chartController.plotPDPRegression(this.id, this.pdp_averages, this.pdp_grid, uniqueLabels, columns, categorical_columns);\r\n        }\r\n\r\n    }\r\n\r\n}","import { Settings } from \"@/helpers/settings\";\r\nimport LogisticRegression from \"./classification/logistic_regression\";\r\nimport LinearRegression from \"./regression/linear_regression\";\r\nimport BSplineRegression from \"./regression/bspline_regression\";\r\nimport SupportVectorMachine from './classification/svm';\r\nimport SupportVectorMachineRegression from './regression/svm';\r\n\r\nimport KNNModel from './classification/knn';\r\nimport KNNRegressor from './regression/knn_regressor';\r\nimport RandomForest from \"./classification/random_forest\";\r\nimport RandomForestRegressor from \"./regression/random_forest\";\r\nimport NaiveBayes from \"./classification/NaiveBayes\";\r\nimport DiscriminantAnalysis from \"./classification/lda\";\r\nimport PolynomialRegression from \"./regression/polynomial_regression\";\r\nimport KernelRegression from \"./regression/kernel_regression\";\r\nimport Boosting from \"./classification/boosting\";\r\nimport BoostingRegression from \"./regression/boosting\";\r\n\r\n\r\n\r\nexport var ModelFactory = function () {\r\n    this.createModel = (modelName, options) => {\r\n        console.log(options);\r\n        switch (modelName) {\r\n            case Settings.classification.logistic_regression.value:\r\n                return new LogisticRegression(options);\r\n            case Settings.classification.k_nearest_neighbour.value:\r\n                return new KNNModel(options);\r\n            case Settings.classification.random_forest.value:\r\n                return new RandomForest(options);\r\n            case Settings.classification.support_vector_machine.value:\r\n                return new SupportVectorMachine(options);\r\n            case Settings.classification.boosting.value:\r\n                return new Boosting(options);\r\n            case Settings.regression.boosting.value:\r\n                return new BoostingRegression(options);\r\n            case Settings.classification.discriminant_analysis.value:\r\n                return new DiscriminantAnalysis(options);\r\n            case Settings.classification.naive_bayes.value:\r\n                return new NaiveBayes(options);\r\n            case Settings.regression.linear_regression.value:\r\n                return new LinearRegression(options);\r\n            case Settings.regression.k_nearest_neighbour.value:\r\n                return new KNNRegressor(options);\r\n            case Settings.regression.support_vector_machine.value:\r\n                return new SupportVectorMachineRegression(options);\r\n            case Settings.regression.random_forest.value:\r\n                return new RandomForestRegressor(options);\r\n            case Settings.regression.polynomial_regression.value:\r\n                return new PolynomialRegression(options);\r\n            case Settings.regression.kernel_regression.value:\r\n                return new KernelRegression(options);\r\n            case Settings.regression.bspline_regression.value:\r\n                return new BSplineRegression(options);\r\n            default:\r\n                throw new Error(\"Model not supported.\");\r\n        }\r\n    }\r\n}","<!-- eslint-disable no-unused-vars -->\r\n<template>\r\n    <div class=\"column is-2  has-background-info-light\t\" style=\"height: 100%;\">\r\n        <!-- <button @click=\"impute()\">Impute</button> -->\r\n        <figure class=\"image is-96x96\">\r\n            <img src=\"/logo.png\" />\r\n        </figure>\r\n        <section>\r\n            <upload-component @uploaded=\"generateTargetDropdown\"></upload-component>\r\n            <div class=\"column is-12\">\r\n                <b-field>\r\n                    <b-button @click=\"configureFeatures = true\" size=\"is-small\" type=\"is-primary is-light\"\r\n                        icon-pack=\"fas\" icon-left=\"cog\">Select Features {{featureSettings.filter(feature =>\r\n                            feature.selected).length}}</b-button>\r\n                </b-field>\r\n                <b-field label=\"Seed\" :label-position=\"'on-border'\">\r\n                    <b-input v-model=\"seed\" size=\"is-small\" placeholder=\"Seed\" type=\"number\" min=\"0\">\r\n                    </b-input>\r\n                </b-field>\r\n                <b-field label=\"Target\" :label-position=\"'on-border'\">\r\n                    <b-select :expanded=\"true\" v-model=\"modelTarget\" @input=\"checkmodelTask\" size=\"is-small\">\r\n                        <option v-for=\"option in columns\" :value=\"option\" :key=\"option\">\r\n                            {{ option }}\r\n                        </option>\r\n                    </b-select>\r\n                </b-field>\r\n                <b-field label=\"Imputation\" :label-position=\"'on-border'\">\r\n                    <b-select :expanded=\"true\" v-model=\"imputationOption\" size=\"is-small\">\r\n                        <option v-for=\"option in imputationOptions\" :value=\"option.id\" :key=\"option.id\">\r\n                            {{ option.label }}\r\n                        </option>\r\n                    </b-select>\r\n                </b-field>\r\n                <b-field label=\"Cross Validation\" :label-position=\"'on-border'\">\r\n                    <b-select :expanded=\"true\" v-model=\"crossValidationOption\" size=\"is-small\">\r\n                        <option v-for=\"option in crossValidationOptions\" :value=\"option.id\" :key=\"option.id\">\r\n                            {{ option.label }}\r\n                        </option>\r\n                    </b-select>\r\n                </b-field>\r\n                <b-field label=\"Model\" :label-position=\"'on-border'\">\r\n                    <b-select :disabled=\"tuneModel\" :expanded=\"true\" v-model=\"modelOption\" size=\"is-small\">\r\n                        <option v-for=\"option in modelOptions\" :value=\"option.id\" :key=\"option.id\">\r\n                            {{ option.label }}\r\n                        </option>\r\n                    </b-select>\r\n                    <b-button @click=\"configureModel\" size=\"is-small\" icon-pack=\"fas\"\r\n                        :icon-left=\"!this.tuneModel ? 'cog' : 'arrow-left'\"></b-button>\r\n                </b-field>\r\n                <section v-if=\"tuneModel\" class=\"mx-1\">\r\n                    <b-field v-for=\"(option, i) in modelConfigurations\" :key=\"i\" :label=\"option.label\"\r\n                        :label-position=\"'on-border'\">\r\n                        <b-select v-model=\"option.value\" :expanded=\"true\" size=\"is-small\"\r\n                            v-if=\"option.type === 'select'\">\r\n                            <option v-for=\"(item, index) in option.values\" :value=\"item.value\" :key=\"index\">\r\n                                {{ item.label }}\r\n                            </option>\r\n                        </b-select>\r\n                        <b-input size=\"is-small\" v-model=\"option.value\" type=\"number\"\r\n                            v-else-if=\"option.type === 'number'\"></b-input>\r\n                        <b-input size=\"is-small\" v-model=\"option.value\" type=\"text\"\r\n                            v-else-if=\"option.type === 'text'\"></b-input>\r\n                    </b-field>\r\n                </section>\r\n                <b-field>\r\n                    <b-checkbox v-model=\"dataScalingBehavior\" size=\"is-small\">Standardize by default</b-checkbox>\r\n                </b-field>\r\n                <b-field>\r\n                    <b-checkbox v-model=\"explainModel\" size=\"is-small\">Explain the model</b-checkbox>\r\n                </b-field>\r\n                <b-field>\r\n                    <b-checkbox v-model=\"usePCAs\" size=\"is-small\">Use PC components</b-checkbox>\r\n                </b-field>\r\n                <b-field v-if=\"usePCAs\" label=\"Number of Components\" :label-position=\"'on-border'\">\r\n                    <b-input size=\"is-small\" v-model=\"numberOfComponents\" type=\"number\"></b-input>\r\n                </b-field>\r\n                <b-field>\r\n                    <b-button @click=\"train\" size=\"is-small\" icon-pack=\"fas\" icon-left=\"play\" :loading=\"training\"\r\n                        :disabled=\"!dataframe || modelOption == null\">\r\n                        train</b-button>\r\n                </b-field>\r\n                <b-loading :is-full-page=\"false\" v-model=\"training\"></b-loading>\r\n            </div>\r\n        </section>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n/* eslint-disable no-unused-vars */\r\n\r\nimport UploadComponent from \"./upload-component.vue\";\r\nimport { Settings, FeatureCategories, CV_OPTIONS } from '../helpers/settings'\r\nimport PCA from '@/helpers/dimensionality-reduction/pca';\r\n\r\nimport { ModelFactory } from \"@/helpers/model_factory\";\r\nimport { settingStore } from '@/stores/settings'\r\nimport { applyDataTransformation, handle_missing_values, encode_dataset, evaluate_classification } from '@/helpers/utils';\r\nimport { LabelEncoder, tensorflow, concat } from 'danfojs/dist/danfojs-base';\r\nimport { toJSON, DataFrame } from 'danfojs';\r\nimport axios from \"axios\";\r\n\r\nexport default {\r\n    name: 'SidebarComponent',\r\n    setup() {\r\n        const settings = settingStore()\r\n\r\n        return { settings }\r\n    },\r\n    components: {\r\n        UploadComponent\r\n    },\r\n    props: {\r\n        msg: String\r\n    },\r\n\r\n    data() {\r\n        return {\r\n            dataScalingBehavior: false,\r\n            explainModel: true,\r\n            training: false,\r\n            tuneModel: false,\r\n            numberOfComponents: 0,\r\n            usePCAs: false,\r\n            seed: 123,\r\n            dataframe: null,\r\n            configureFeatures: false,\r\n            modelOptions: Settings.classification,\r\n            imputationOption: 1,\r\n            modelOption: 1,\r\n            featureTypeOptions: FeatureCategories,\r\n            crossValidationOption: 1,\r\n            columns: [],\r\n            modelTarget: null,\r\n            modelConfigurations: null,\r\n            imputationOptions: [{\r\n                id: 1,\r\n                label: 'Delete rows'\r\n            },\r\n            {\r\n                id: 2,\r\n                label: 'Mean and Mode'\r\n            }, {\r\n                id: 3,\r\n                label: 'Linear regression'\r\n            }, {\r\n                id: 4,\r\n                label: 'random forest'\r\n            }],\r\n            crossValidationOptions: [{\r\n                id: CV_OPTIONS.SPLIT,\r\n                label: '70 % training - 30 % test'\r\n            },\r\n            {\r\n                id: CV_OPTIONS.NO,\r\n                label: 'No'\r\n            }, {\r\n                id: CV_OPTIONS.KFOLD,\r\n                label: 'k-fold'\r\n            }],\r\n            featureSettings: [],\r\n            modelSettings: [],\r\n            modelName: ''\r\n        }\r\n    },\r\n    methods: {\r\n        updateFeatures() {\r\n            this.configureFeatures = false;\r\n            this.$emit('updateFeatures', true)\r\n        },\r\n        toggleTraining() {\r\n            this.training = !this.training;\r\n            let message = this.training ? 'started training ' + this.modelName : 'Successully fitted ' + this.modelName;\r\n            this.$buefy.toast.open(\r\n                {\r\n                    duration: 5000,\r\n                    message: this.training ? 'started training ' + this.modelName : 'Successully fitted ' + this.modelName,\r\n                    type: this.training ? 'is-info' : 'is-success',\r\n                })\r\n            this.settings.addMessage({ message: message, type: 'info' });\r\n        },\r\n        getDefaultModelConfiguration() {\r\n            for (const key in this.modelOptions) {\r\n                const model = this.modelOptions[key];\r\n                if (model.id === this.modelOption) {\r\n                    for (const key in model.options) {\r\n                        model.options[key].value = model.options[key]?.default;\r\n                    }\r\n                    this.modelConfigurations = model.options;\r\n                    this.modelName = model.label\r\n                }\r\n            }\r\n        },\r\n        configureModel() {\r\n            this.tuneModel = !this.tuneModel;\r\n            this.getDefaultModelConfiguration()\r\n        },\r\n        generateTargetDropdown() {\r\n            this.dataframe = this.settings.getDataset;\r\n            this.columns = this.dataframe.columns;\r\n            this.featureSettings = this.columns.map((column, index) => {\r\n                return {\r\n                    name: column,\r\n                    selected: true,\r\n                    type: this.dataframe.dtypes[index] === 'string' ? FeatureCategories.Nominal.id : FeatureCategories.Numerical.id\r\n                }\r\n            })\r\n            this.modelTarget = this.dataframe.columns[this.dataframe.columns.length - 1];\r\n            this.settings.setTarget(this.modelTarget)\r\n            let selectedFeatures = this.featureSettings.filter(feature => feature.selected);\r\n            for (let i = 0; i < selectedFeatures.length; i++) {\r\n                this.settings.addFeature(selectedFeatures[i])\r\n            }\r\n            this.$emit('updateFeatures', true)\r\n\r\n        },\r\n        checkmodelTask() {\r\n            this.settings.setTarget(this.modelTarget)\r\n            let numericColumns = this.settings.items.filter(column => column.selected && column.type === 1);\r\n            let categorical_columns = this.settings.items.filter(column => column.selected && column.type !== 1);\r\n            let features = numericColumns.concat(categorical_columns);\r\n            let targetFeature = features.find(feature => feature.name == this.modelTarget);\r\n            this.settings.setmodelTask(targetFeature.type === FeatureCategories.Numerical.id ? false : true);\r\n            this.modelOptions = targetFeature.type === FeatureCategories.Numerical.id ? Settings.regression : Settings.classification;\r\n            // let selectedFeatures = this.featureSettings.filter(feature => feature.selected);\r\n            // for (let i = 0; i < selectedFeatures.length; i++) {\r\n            //     this.settings.addFeature(selectedFeatures[i])\r\n            // }\r\n        },\r\n        async train() {\r\n            try {\r\n                if (!this.modelConfigurations) {\r\n                    this.getDefaultModelConfiguration()\r\n                }\r\n                let seed = this.seed;\r\n                this.settings.setSeed(seed)\r\n                let categoricalFeatures = []\r\n                let dataset = null;\r\n                if (this.seed != this.settings.getSeed) {\r\n                    dataset = await this.dataframe.sample(this.dataframe.$data.length, { seed: seed });\r\n                } else {\r\n                    dataset = await this.dataframe\r\n                }\r\n                let numericColumns = this.settings.items.filter(m => m.selected && m.type === FeatureCategories.Numerical.id).map(m => m.name);\r\n                const target = this.settings.modelTarget;\r\n                dataset = handle_missing_values(dataset)\r\n                dataset = applyDataTransformation(dataset, numericColumns, this.settings.transformationsList);\r\n                if (this.dataScalingBehavior) {\r\n                    let transformations = []\r\n                    for (let i = 0; i < numericColumns.length; i++) {\r\n                        transformations.push({ name: numericColumns[i], scaler: '1' })\r\n                    }\r\n                    dataset = applyDataTransformation(dataset, numericColumns, transformations);\r\n                }\r\n                let selected_columns = this.settings.items.filter(m => m.selected).map(m => m.name)\r\n                const index = selected_columns.findIndex(m => m === target)\r\n                if (index === -1) {\r\n                    selected_columns.push(target)\r\n                }\r\n\r\n                let filterd_dataset = dataset.loc({ columns: selected_columns })\r\n                // add class transformation\r\n                if (this.settings.isClassification) {\r\n                    let selectedClasses = this.settings.mergedClasses\r\n                    if (selectedClasses?.length > 0) {\r\n                        let newClass = selectedClasses.map(m => m.class).join('');\r\n                        selectedClasses.forEach(cls => {\r\n                            filterd_dataset.replace(cls.class, newClass, { columns: [this.settings.modelTarget], inplace: true })\r\n                        });\r\n                    }\r\n                }\r\n\r\n\r\n                const targets = filterd_dataset.column(target)\r\n                filterd_dataset.drop({ columns: target, inplace: true })\r\n\r\n\r\n\r\n                const cross_validation_setting = this.crossValidationOption;\r\n\r\n                [filterd_dataset, categoricalFeatures] = encode_dataset(filterd_dataset, this.settings.items.filter(m => m.selected).filter(m => m.name !== this.settings.modelTarget).map(m => {\r\n                    return {\r\n                        name: m.name,\r\n                        type: m.type\r\n                    }\r\n                }))\r\n                let x_train, y_train, x_test, y_test;\r\n                if (cross_validation_setting === CV_OPTIONS.KFOLD &&\r\n                    (this.modelName != Settings.classification.logistic_regression.name || this.modelName != Settings.regression.linear_regression.name)) {\r\n                    let performances = [];\r\n                    for (let i = 1; i < 6; i++) {\r\n                        [x_train, y_train, x_test, y_test] = this.kfoldSplit(filterd_dataset, targets, i);\r\n                        let uniqueLabels = [...new Set(y_train.values)];\r\n                        let labelEncoder, encoded_y, encoded_y_test;\r\n                        if (this.settings.classificationTask) {\r\n                            [labelEncoder, encoded_y, encoded_y_test] = this.encodeTarget(y_train.values, y_test.values)\r\n                        } else {\r\n                            encoded_y = y_train.values;\r\n                            encoded_y_test = y_test.values;\r\n                        }\r\n                        let model_factory = new ModelFactory();\r\n                        let model = model_factory.createModel(this.modelOption, this.modelConfigurations)\r\n                        model.hasExplaination = false;\r\n                        model.id = this.settings.getCounter\r\n                        this.toggleTraining()\r\n                        let predictions = await model.train(x_train.values, encoded_y, x_test.values, encoded_y_test, x_train.columns, categoricalFeatures, 0);\r\n                        let metrics = await model.evaluateModel(encoded_y_test, predictions, uniqueLabels)\r\n                        if (this.settings.classificationTask) {\r\n                            metrics = metrics[4]\r\n                        } else {\r\n                            metrics = metrics[0]\r\n                        }\r\n                        this.training = false;\r\n                        performances.push(metrics)\r\n                    }\r\n                } else {\r\n                    [x_train, y_train, x_test, y_test] = this.splitData(cross_validation_setting, filterd_dataset, targets);\r\n                }\r\n\r\n\r\n                let uniqueLabels = [...new Set(y_train.values)];\r\n                let labelEncoder, encoded_y, encoded_y_test;\r\n                if (this.settings.classificationTask) {\r\n                    [labelEncoder, encoded_y, encoded_y_test] = this.encodeTarget(y_train.values, y_test.values)\r\n                } else {\r\n                    encoded_y = y_train.values;\r\n                    encoded_y_test = y_test.values;\r\n                }\r\n                let model_factory = new ModelFactory();\r\n                let model = model_factory.createModel(this.modelOption, this.modelConfigurations)\r\n                model.seed = seed;\r\n                model.id = this.settings.getCounter\r\n                this.toggleTraining()\r\n                model.hasExplaination = this.explainModel;\r\n                if (this.usePCAs) {\r\n                    const pca = new PCA();\r\n                    let numericColumns = this.settings.items.filter(column => column.selected && column.type === 1).map(column => column.name);\r\n                    let [pca_train, _, __, ___, ____, pca_test] = await pca.predict(x_train.loc({ columns: numericColumns }).values,\r\n                        this.numberOfComponents, x_test.loc({ columns: numericColumns }).values)\r\n                    pca_train = pca_train.map(m => [].slice.call(m))\r\n                    pca_test = pca_test.map(m => [].slice.call(m))\r\n                    let cols = pca_train[0].map((_, i) => 'PC_' + (i + 1))\r\n                    x_train = new DataFrame(pca_train, { columns: cols })\r\n                    x_test = new DataFrame(pca_test, { columns: cols })\r\n                }\r\n\r\n                let predictions = await model.train(x_train.values, encoded_y, x_test.values, encoded_y_test, x_train.columns, categoricalFeatures, 0);\r\n                let metrics = await model.evaluateModel(encoded_y_test, predictions, uniqueLabels)\r\n                if (predictions?.length > 0) {\r\n\r\n                    this.settings.addResult({\r\n                        id: model.id,\r\n                        showProbas: model.hasProbability,\r\n                        helpSectionId: model.helpSectionId,\r\n                        hasExplaination: model.hasExplaination,\r\n                        snapshot: {\r\n                            x: x_train.values,\r\n                            y: encoded_y,\r\n                            xt: x_test.values,\r\n                            yt: encoded_y_test,\r\n                            xFeatures: x_train.columns,\r\n                            categoricals: categoricalFeatures,\r\n                            id: this.modelOption,\r\n                            labels: uniqueLabels\r\n                        },\r\n                        name: this.modelName,\r\n                        datasetName: this.settings.getDatasetName,\r\n                        modelTask: this.settings.classificationTask,\r\n                        metrics: metrics,\r\n                        options: JSON.parse(JSON.stringify(this.modelConfigurations)),\r\n                        target: target,\r\n                        categoricalFeatures: this.settings.items.filter(m => m.selected && m.type !== FeatureCategories.Numerical.id).map(m => m.name),\r\n                        numericColumns: numericColumns,\r\n                        transformations: [...this.settings.transformationsList.filter(feature => feature.type != 0)],\r\n                        tables: model.tables,\r\n                        plots: model.plots,\r\n\r\n                    });\r\n                    this.settings.setActiveTab(2);\r\n                    setTimeout(async () => {\r\n                        4\r\n                        this.settings.setResultActiveTab(model.id + 1);\r\n                        window.dispatchEvent(new Event('resize'));\r\n                    }, 100);\r\n\r\n                    await model.visualize(x_test, encoded_y_test, uniqueLabels, predictions, labelEncoder, x_train.columns, categoricalFeatures)\r\n                    this.settings.increaseCounter();\r\n                    this.toggleTraining();\r\n                }\r\n            } catch (error) {\r\n                this.training = false;\r\n                let message = 'Failed to fit the ' + this.modelName\r\n                this.$buefy.toast.open(\r\n                    {\r\n                        duration: 3000,\r\n                        message: message,\r\n                        type: 'is-warning',\r\n                    })\r\n                this.settings.addMessage({ message: message, type: 'warning' });\r\n                throw error;\r\n            }\r\n        },\r\n        impute() {\r\n            this.training = true;\r\n            axios.post('http://127.0.0.1:5000/missforest', {\r\n                data: toJSON(this.dataframe),\r\n                categoricalFeatures: this.settings.items.filter(m => m.selected && m.type !== FeatureCategories.Numerical.id).map(m => m.name)\r\n            }).then(res => {\r\n                let df = new DataFrame(res.data);\r\n                this.dataframe = df\r\n                this.settings.setDataframe(df);\r\n                this.training = false;\r\n            })\r\n        }\r\n    },\r\n    created: function () {\r\n        this.splitData = function (cross_validation_setting, filterd_dataset, targets, stepSize = 0.7) {\r\n            let x_train, y_train, x_test, y_test;\r\n            let len = filterd_dataset.$data.length\r\n            if (cross_validation_setting === CV_OPTIONS.SPLIT) {\r\n                const limit = Math.ceil(len * stepSize)\r\n                const train_bound = `0:${limit}`\r\n                const test_bound = `${limit}:${len}`\r\n                x_train = filterd_dataset.iloc({ rows: [train_bound] })\r\n                y_train = targets.iloc([train_bound])\r\n                x_test = filterd_dataset.iloc({ rows: [test_bound] });\r\n                y_test = targets.iloc([test_bound]);\r\n            } else if (cross_validation_setting === CV_OPTIONS.NO) {\r\n                x_train = filterd_dataset\r\n                y_train = targets\r\n                x_test = filterd_dataset\r\n                y_test = targets\r\n            }\r\n            return [x_train, y_train, x_test, y_test]\r\n        }\r\n        this.kfoldSplit = function (filterd_dataset, targets, fold = 1) {\r\n            let x_train, y_train, x_test, y_test;\r\n            let len = filterd_dataset.$data.length\r\n            const lowerLimit = Math.ceil(len * ((fold - 1) * 0.2))\r\n            const upperLimit = Math.ceil(len * (fold * 0.2))\r\n            const train_bound_lower = lowerLimit != 0 ? `:${lowerLimit}` : null\r\n            const train_bound_upper = upperLimit != len ? `${upperLimit}:` : null\r\n            const test_bound = `${lowerLimit}:${upperLimit}`\r\n\r\n\r\n            let x_train_upper = train_bound_upper != null ? filterd_dataset.iloc({ rows: [train_bound_upper] }) : null\r\n            let y_train_upper = train_bound_upper != null ? targets.iloc([train_bound_upper]) : null\r\n            x_test = filterd_dataset.iloc({ rows: [test_bound] });\r\n            y_test = targets.iloc([test_bound]);\r\n            let x_train_lower = train_bound_lower != null ? filterd_dataset.iloc({ rows: [train_bound_lower] }) : null\r\n            let y_train_lower = train_bound_lower != null ? targets.iloc([train_bound_lower]) : null\r\n            if (x_train_lower && x_train_upper) {\r\n                x_train = concat({ dfList: [x_train_lower, x_train_upper], axis: 0 })\r\n                y_train = concat({ dfList: [y_train_lower, y_train_upper], axis: 0 })\r\n            } else {\r\n                x_train = x_train_lower == null ? x_train_upper : x_train_lower\r\n                y_train = x_train_lower == null ? y_train_upper : y_train_lower\r\n            }\r\n\r\n\r\n            return [x_train, y_train, x_test, y_test]\r\n\r\n        }\r\n        this.encodeTarget = function (y_train, y_test) {\r\n            let labelEncoder = new LabelEncoder()\r\n            labelEncoder.fit(y_train)\r\n            labelEncoder.transform(y_train)\r\n            let encoded_y = labelEncoder.transform(y_train)\r\n            let encoded_y_test = labelEncoder.transform(y_test)\r\n            return [labelEncoder, encoded_y, encoded_y_test]\r\n        }\r\n    },\r\n    watch: {\r\n        modelOption: function () {\r\n            this.modelConfigurations = null\r\n        },\r\n\r\n\r\n    }\r\n}\r\n</script>\r\n\r\n<style>\r\n.is-danger {\r\n    color: red !important;\r\n}\r\n</style>","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./sidebar-component.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./sidebar-component.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./sidebar-component.vue?vue&type=template&id=74975172\"\nimport script from \"./sidebar-component.vue?vue&type=script&lang=js\"\nexport * from \"./sidebar-component.vue?vue&type=script&lang=js\"\nimport style0 from \"./sidebar-component.vue?vue&type=style&index=0&id=74975172&prod&lang=css\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"column is-10\"},[_c('section',[_c('b-tabs',{attrs:{\"position\":'is-centered',\"animated\":false,\"type\":\"success\"},on:{\"input\":function($event){return _vm.resize()}},model:{value:(_vm.settings.activeTab),callback:function ($$v) {_vm.$set(_vm.settings, \"activeTab\", $$v)},expression:\"settings.activeTab\"}},[_c('b-tab-item',{attrs:{\"label\":\"Data Analysis\",\"icon\":\"search\",\"icon-pack\":\"fas\"}},[(this.settings.datasetShape?.count > 0)?_c('section',[(_vm.isActive)?_c('div',{staticClass:\"message is-info\",attrs:{\"closable\":false}},[_c('div',{staticClass:\"message-header\"},[_vm._v(\"Data summary\")]),_c('div',{staticClass:\"message-body\"},[_c('div',{staticClass:\"columns is-multiline\"},[_c('div',{staticClass:\"column is-12 has-text-left\"},[_c('p',{staticClass:\"title is-7\"},[_vm._v(\" Data Shape : (\"+_vm._s(this.settings.datasetShape.count)+\",\"+_vm._s(this.settings.datasetShape.columns)+\")\")])]),_c('div',{staticClass:\"column is-6\"},[_c('h5',{staticClass:\"title is-7 has-text-left\"},[_vm._v(\"Continuous Features: \"),_c('button',{staticClass:\"button is-small\",on:{\"click\":function($event){return _vm.applyChanges()}}},[_vm._v(\"apply\")])]),_c('table',{staticClass:\"table is-size-7\"},[_c('thead',[_c('tr',[_c('th'),_c('th',[_vm._v(\"name\")]),_c('th',[_vm._v(\"Min\")]),_c('th',[_vm._v(\"Max\")]),_c('th',[_vm._v(\"Mean\")]),_c('th',[_vm._v(\"Median\")]),_c('th',[_vm._v(\"std\")]),_c('th',[_vm._v(\"#NAs\")]),_c('th',[_vm._v(\"TYPE\")])])]),_c('tbody',_vm._l((_vm.continuousFeaturesStats),function(feature){return _c('tr',{key:feature.name},[_c('td',[_c('b-checkbox',{model:{value:(feature.selected),callback:function ($$v) {_vm.$set(feature, \"selected\", $$v)},expression:\"feature.selected\"}})],1),_c('td',[_vm._v(_vm._s(feature.name))]),_c('td',[_vm._v(_vm._s(feature.min))]),_c('td',[_vm._v(_vm._s(feature.max))]),_c('td',[_vm._v(_vm._s(feature.median))]),_c('td',[_vm._v(_vm._s(feature.mean))]),_c('td',[_vm._v(_vm._s(feature.std))]),_c('td',[_vm._v(_vm._s(feature.missingValuesCount))]),_c('td',[_c('b-select',{attrs:{\"expanded\":true,\"size\":\"is-small\"},model:{value:(feature.type),callback:function ($$v) {_vm.$set(feature, \"type\", $$v)},expression:\"feature.type\"}},_vm._l((_vm.featureTypeOptions),function(option){return _c('option',{key:option.id,domProps:{\"value\":option.id}},[_vm._v(\" \"+_vm._s(option.name)+\" \")])}),0)],1)])}),0)])]),_c('div',{staticClass:\"column is-6\"},[_c('h5',{staticClass:\"title is-7 has-text-left\"},[_vm._v(\"Categorical Features :\")]),_c('table',{staticClass:\"table is-size-7\"},[_c('thead',[_c('tr',[_c('th'),_c('th',[_vm._v(\"Name\")]),_c('th',[_vm._v(\"Shape\")]),_c('th',[_vm._v(\"Mode\")]),_c('th',[_vm._v(\"Mode percentage\")]),_c('th',[_vm._v(\"#NAs\")]),_c('th',[_vm._v(\"TYPE\")])])]),_c('tbody',_vm._l((_vm.categoricalFeaturesStats),function(feature){return _c('tr',{key:feature.name},[_c('td',[_c('b-checkbox',{model:{value:(feature.selected),callback:function ($$v) {_vm.$set(feature, \"selected\", $$v)},expression:\"feature.selected\"}})],1),_c('td',[_vm._v(_vm._s(feature.name))]),_c('td',[_vm._v(_vm._s(feature.shape))]),_c('td',[_vm._v(_vm._s(feature.mode))]),_c('td',[_vm._v(_vm._s(feature.percentage))]),_c('td',[_vm._v(_vm._s(feature.missingValuesCount))]),_c('td',[_c('b-select',{attrs:{\"expanded\":true,\"size\":\"is-small\"},model:{value:(feature.type),callback:function ($$v) {_vm.$set(feature, \"type\", $$v)},expression:\"feature.type\"}},_vm._l((_vm.featureTypeOptions),function(option){return _c('option',{key:option.id,domProps:{\"value\":option.id}},[_vm._v(\" \"+_vm._s(option.name)+\" \")])}),0)],1)])}),0)])]),_c('div',{staticClass:\"column is-6\"},[_c('h5',{staticClass:\"title is-7 has-text-left\"},[_vm._v(\"Sample Data :\")]),_c('b-table',{staticClass:\"is-size-7\",attrs:{\"data\":_vm.sampleData,\"columns\":_vm.datasetColumns,\"narrowed\":true,\"bordered\":true,\"striped\":true,\"hoverable\":true}})],1)])])]):_vm._e(),_c('section',[_c('scatterplot-matrix-component',{ref:\"splom\"})],1),_c('section',[_c('article',{staticClass:\"message is-info mt-2\"},[_c('div',{staticClass:\"message-header\"},[_vm._v(\"correlation matrix and Dendrogram \"),_c('b-tooltip',{attrs:{\"append-to-body\":\"\",\"label\":\"Ward method requires euclidean distance\",\"multilined\":\"\"}},[_c('b-button',{attrs:{\"icon-left\":\"info\",\"icon-pack\":\"fas\",\"size\":\"is-small\",\"type\":\"is-dark\"}})],1)],1),_c('div',{staticClass:\"message-body\"},[_c('b-field',{attrs:{\"label\":\"Linkage method, Distance Metric\"}},[_c('b-select',{attrs:{\"placeholder\":\"Method\"},model:{value:(_vm.method),callback:function ($$v) {_vm.method=$$v},expression:\"method\"}},[_c('option',{attrs:{\"value\":\"single\"}},[_vm._v(\"single\")]),_c('option',{attrs:{\"value\":\"complete\"}},[_vm._v(\"complete\")]),_c('option',{attrs:{\"value\":\"average\"}},[_vm._v(\"average\")]),_c('option',{attrs:{\"value\":\"weighted\"}},[_vm._v(\"weighted\")]),_c('option',{attrs:{\"value\":\"centroid\"}},[_vm._v(\"centroid\")]),_c('option',{attrs:{\"value\":\"median\"}},[_vm._v(\"median\")]),_c('option',{attrs:{\"value\":\"ward\"}},[_vm._v(\"ward\")])]),_c('b-select',{attrs:{\"placeholder\":\"Metric\"},model:{value:(_vm.metric),callback:function ($$v) {_vm.metric=$$v},expression:\"metric\"}},[_c('option',{attrs:{\"value\":\"euclidean\"}},[_vm._v(\"euclidean\")]),_c('option',{attrs:{\"value\":\"correlation\"}},[_vm._v(\"correlation\")]),_c('option',{attrs:{\"value\":\"mahalanobis\"}},[_vm._v(\"mahalanobis\")]),_c('option',{attrs:{\"value\":\"cosine\"}},[_vm._v(\"cosine\")])]),_c('p',{staticClass:\"control\"},[_c('b-button',{staticClass:\"is-success\",attrs:{\"disabled\":_vm.loading,\"loading\":_vm.loading},on:{\"click\":_vm.correlationMatrix}},[_vm._v(\"Correlation Cluster Diagram\")])],1)],1),_c('div',{staticClass:\"columns is-multiline is-centered mb-2\"},[_c('div',{staticClass:\"column is-5\",staticStyle:{\"height\":\"400px\"},attrs:{\"id\":\"correlation_matrix\"}}),_c('div',{staticClass:\"column is-5\",staticStyle:{\"height\":\"400px\"},attrs:{\"id\":\"correlation_matrix_ordered\"}})])],1)])])]):_c('section',[_c('b-message',{attrs:{\"type\":\"is-danger\",\"has-icon\":\"\",\"icon-pack\":\"fas\"}},[_vm._v(\" Upload a dataset or select a sample from sidebar. \")])],1)]),_c('b-tab-item',{attrs:{\"label\":\"Dimensionality Reduction\",\"icon\":\"compress-arrows-alt\",\"icon-pack\":\"fas\"}},[_c('dmensionality-reduction-component',{attrs:{\"dataframe\":this.settings.df,\"columns\":_vm.selectedFeatures}})],1),_c('b-tab-item',{attrs:{\"label\":\"Results Analysis\",\"icon\":\"chart-pie\",\"icon-pack\":\"fas\"}},[_c('results-component',{ref:\"results\"})],1),_c('b-tab-item',{attrs:{\"label\":\"Methods Details\",\"icon\":\"list\",\"icon-pack\":\"fas\"}},[_c('methods-tab-component')],1),_c('b-tab-item',{attrs:{\"label\":\"Help\",\"icon\":\"question\",\"icon-pack\":\"fas\"}},[_c('div',{staticClass:\"content has-text-left\"},[_c('h4',[_vm._v(\"1. Dataset Selection\")]),_c('p',[_vm._v(\" To begin, you can either select a sample dataset provided by the system or upload your own dataset. The supported file formats for datasets include .xlsx (Excel files), .csv (Comma Separated Values files), and .txt (plain text files). Ensure that your file is in one of these formats to avoid any issues during the upload process. \")]),_c('figure',[_c('img',{attrs:{\"src\":\"/upload.png\"}}),_c('figcaption',[_vm._v(\"Figure 1: Dataset Selection\")])]),_c('h4',[_vm._v(\"2. Data Analysis\")]),_c('figure',[_c('img',{attrs:{\"src\":\"/stats_categorical.jpg\"}}),_c('figcaption',[_vm._v(\"Figure 2: Categorical features stats\")])]),_c('p',[_vm._v(\" After uploading the dataset an overview of the dataset would be shhown in the Data Analysis tab. In the first window we provide you witth statistical metrics of the dataset. for canotinious features we show the mean, std, min, max, and etc. In case of categorical features information such as shape, mode and percentages of smaples with modes option, and number of missing values. \")]),_c('figure',[_c('img',{attrs:{\"src\":\"/stats_continious.jpg\"}}),_c('figcaption',[_vm._v(\"Figure 3: Categorical features stats\")])]),_c('p',[_vm._v(\" In case of categorical features information such as shape, mode and percentages of smaples with modes option, and number of missing values. \")]),_c('h4',[_vm._v(\"3. Feature selection\")]),_c('p',[_vm._v(\" After uploading the dataset, you can customize the data by selecting specific features based on your requirements. To do this, click on the 'Select Features' button, which will open a new menu. This menu allows you to choose the features that will be used in the training process. If there is an issue with the automatic detection of feature data types, you can manually adjust the data types to ensure they are correctly categorized as ordinal, categorical, or continuous. \")]),_c('h4',[_vm._v(\"3. Model Selection\")]),_c('figure',[_c('img',{attrs:{\"src\":\"/model_selection.jpg\"}}),_c('figcaption',[_vm._v(\"Figure 4: Model selection and setting for knn\")])]),_c('p',[_vm._v(\" Once you have selected all the required features and resolved any issues with feature data types, you can proceed to the model selection step. Use the 'Model' dropdown to choose the model for training. The options in this dropdown will be dynamically populated based on the type of data in your features: regression models will be available for continuous data, while classification models will be shown for categorical data. Additionally, you can further customize the selected model by clicking the gear icon, which allows you to adjust common settings and parameters specific to each model. \")])])]),_c('b-tab-item',{attrs:{\"label\":\"Messages Log\",\"icon\":\"history\",\"icon-pack\":\"fas\"}},_vm._l((this.settings.getMessages),function(m,i){return _c('b-notification',{key:i,attrs:{\"aria-close-label\":\"Close notification\",\"icon-pack\":\"fas\",\"type\":m.type == 'warning' ? 'is-warning' : m.type == 'danger' ? 'is-danger' : 'is-info',\"has-icon\":\"\",\"closable\":false}},[_vm._v(\" \"+_vm._s(m.message?.toLowerCase())+\" \"),_c('br'),_vm._v(\" \"+_vm._s(m.date)+\" \")])}),1)],1)],1)])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function render(){var _vm=this,_c=_vm._self._c;return (this.settings?.items.length > 2)?_c('section',[_c('b-message',{attrs:{\"title\":\"Principle Component Analysis\",\"type\":'is-info',\"closable\":false}},[_c('b-field',[_c('p',{staticClass:\"control\"},[_c('b-button',{attrs:{\"disabled\":_vm.numberOfComponents < 2 || _vm.numberOfComponents > this.settings.items.filter(column => column.selected && column.type === 1)?.length,\"size\":\"is-small\",\"type\":\"is-info\",\"loading\":_vm.loadingPCA,\"label\":\"Fit PCA\"},on:{\"click\":function($event){return _vm.drawPCA()}}})],1)]),_c('div',{staticClass:\"columns is-multiline\",attrs:{\"id\":\"pca_container\"}},[_c('div',{staticClass:\"column is-6\"},[_c('div',{staticStyle:{\"height\":\"300px\"},attrs:{\"id\":\"scree_plot\"}})]),_c('div',{staticClass:\"column is-6\"},[_c('div',{staticStyle:{\"height\":\"300px\"},attrs:{\"id\":\"correlation_circle\"}})]),(_vm.hasPCA)?_c('div',{staticClass:\"column is-12\"},[_c('b-field',{attrs:{\"label\":\"Number of Components\"}},[_c('b-input',{attrs:{\"size\":\"is-small\",\"type\":\"number\",\"min\":\"2\",\"placeholder\":\"Number of Components\"},model:{value:(_vm.numberOfComponents),callback:function ($$v) {_vm.numberOfComponents=$$v},expression:\"numberOfComponents\"}}),_c('p',{staticClass:\"control\"},[_c('b-button',{attrs:{\"disabled\":_vm.numberOfComponents < 2 || _vm.x == _vm.y || _vm.numberOfComponents > this.settings.items.filter(column => column.selected && column.type === 1)?.length,\"size\":\"is-small\",\"type\":\"is-info\",\"loading\":_vm.loadingPCA,\"label\":\"Draw PCA\"},on:{\"click\":function($event){return _vm.findPCA()}}})],1)],1)],1):_vm._e(),_vm._l((this.pcaContainers),function(item,index){return _c('div',{key:index,staticClass:\"column is-4\"},[_c('div',{staticStyle:{\"height\":\"300px\"},attrs:{\"id\":'pca_' + index}})])})],2)],1),_c('b-message',{attrs:{\"title\":\"t-distributed stochastic neighbor embedding\",\"type\":'is-info',\"closable\":false}},[_c('b-field',{attrs:{\"label\":\"Iterations\"}},[_c('b-input',{attrs:{\"size\":\"is-small\",\"type\":\"number\",\"placeholder\":\"number of iterations\"},model:{value:(_vm.iterationsTSNE),callback:function ($$v) {_vm.iterationsTSNE=$$v},expression:\"iterationsTSNE\"}}),_c('p',{staticClass:\"control\"},[_c('b-button',{attrs:{\"size\":\"is-small\",\"type\":\"is-info\",\"loading\":_vm.loadingTSNE,\"label\":\"Fit t-SNE\"},on:{\"click\":_vm.findTSNE}})],1)],1),_c('div',{staticClass:\"column is-6\",attrs:{\"id\":\"dimensionality_reduction_panel_tsne\"}},[_c('div',{attrs:{\"id\":\"tsne\"}})])],1),_c('b-message',{attrs:{\"title\":\"Autoencoder\",\"closable\":false,\"type\":'is-info'}},[_c('b-field',{attrs:{\"grouped\":\"\"}},[_c('b-field',{attrs:{\"expanded\":\"\"}},[_c('b-field',{attrs:{\"label\":\"Hidden layers size\",\"custom-class\":\"is-small\"}},[_c('b-input',{attrs:{\"size\":\"is-small\",\"type\":\"number\",\"placeholder\":\"Hidden layer size\"},model:{value:(_vm.hiddenLayerSize),callback:function ($$v) {_vm.hiddenLayerSize=$$v},expression:\"hiddenLayerSize\"}})],1),_c('b-field',{attrs:{\"label\":\"x axis\",\"custom-class\":\"is-small\"}},[_c('b-input',{attrs:{\"size\":\"is-small\",\"type\":\"number\",\"placeholder\":\"x axis\"},model:{value:(_vm.autoEncoderX),callback:function ($$v) {_vm.autoEncoderX=$$v},expression:\"autoEncoderX\"}})],1),_c('b-field',{attrs:{\"label\":\"y axis\",\"custom-class\":\"is-small\"}},[_c('b-input',{attrs:{\"size\":\"is-small\",\"type\":\"number\",\"placeholder\":\"y axis\"},model:{value:(_vm.autoEncoderY),callback:function ($$v) {_vm.autoEncoderY=$$v},expression:\"autoEncoderY\"}})],1),_c('b-field',{attrs:{\"label\":\"iterations\",\"custom-class\":\"is-small\"}},[_c('b-input',{attrs:{\"size\":\"is-small\",\"type\":\"number\",\"placeholder\":\"iterations\"},model:{value:(_vm.iterations),callback:function ($$v) {_vm.iterations=$$v},expression:\"iterations\"}})],1),_c('b-field',{attrs:{\"label\":\"encoder\",\"custom-class\":\"is-small\"}},[_c('b-select',{attrs:{\"size\":\"is-small\",\"placeholder\":\"Encoder Activation Function\"},model:{value:(_vm.encoderActivationFunction),callback:function ($$v) {_vm.encoderActivationFunction=$$v},expression:\"encoderActivationFunction\"}},[_c('option',{attrs:{\"value\":\"linear\",\"id\":\"linear\"}},[_vm._v(\" linear \")]),_c('option',{attrs:{\"value\":\"sigmoid\",\"id\":\"sigmoid\"}},[_vm._v(\" sigmoid \")]),_c('option',{attrs:{\"value\":\"relu\",\"id\":\"relu\"}},[_vm._v(\" RELU \")])])],1),_c('b-field',{attrs:{\"label\":\"decoder\",\"custom-class\":\"is-small\"}},[_c('b-select',{attrs:{\"size\":\"is-small\",\"placeholder\":\"Decoder Activation Function\"},model:{value:(_vm.decoderActivationFunction),callback:function ($$v) {_vm.decoderActivationFunction=$$v},expression:\"decoderActivationFunction\"}},[_c('option',{attrs:{\"value\":\"linear\",\"id\":\"linear\"}},[_vm._v(\" linear \")]),_c('option',{attrs:{\"value\":\"sigmoid\",\"id\":\"sigmoid\"}},[_vm._v(\" sigmoid \")]),_c('option',{attrs:{\"value\":\"relu\",\"id\":\"relu\"}},[_vm._v(\" RELU \")])])],1),_c('b-field',{attrs:{\"custom-class\":\"is-small\"}},[_c('p',{staticClass:\"control\"},[_c('b-button',{attrs:{\"size\":\"is-small\",\"type\":\"is-info\",\"loading\":_vm.loadingAutoEncoder,\"label\":\"Fit Autoencoder\"},on:{\"click\":_vm.autoEncoder}})],1)])],1)],1),_c('div',{staticClass:\"column is-6\",attrs:{\"id\":\"dimensionality_reduction_panel_tsne\"}},[_c('div',{staticStyle:{\"height\":\"300px\"},attrs:{\"id\":\"autoencoder\"}})])],1)],1):_c('section',[_c('b-message',{attrs:{\"type\":\"is-danger\",\"has-icon\":\"\",\"icon-pack\":\"fas\"}},[_vm._v(\" There is no data to show. \")])],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n    <section v-if=\"this.settings?.items.length > 2\">\r\n        <b-message title=\"Principle Component Analysis\" :type=\"'is-info'\" :closable=\"false\">\r\n            <b-field>\r\n                <p class=\"control\">\r\n                    <b-button\r\n                        :disabled=\"numberOfComponents < 2 || numberOfComponents > this.settings.items.filter(column => column.selected && column.type === 1)?.length\"\r\n                        size=\"is-small\" @click=\"drawPCA()\" type=\"is-info\" :loading=\"loadingPCA\" label=\"Fit PCA\" />\r\n                </p>\r\n            </b-field>\r\n            <div class=\"columns is-multiline\" id=\"pca_container\">\r\n                <div class=\"column is-6\">\r\n                    <div id=\"scree_plot\" style=\"height: 300px;\"></div>\r\n                </div>\r\n                <div class=\"column is-6\">\r\n                    <div id=\"correlation_circle\" style=\"height: 300px;\"></div>\r\n                </div>\r\n                <div class=\"column is-12\" v-if=\"hasPCA\">\r\n                    <b-field label=\"Number of Components\">\r\n                        <b-input v-model=\"numberOfComponents\" size=\"is-small\" type=\"number\" min=\"2\"\r\n                            placeholder=\"Number of Components\"></b-input>\r\n                        <p class=\"control\">\r\n                            <b-button\r\n                                :disabled=\"numberOfComponents < 2 || x == y || numberOfComponents > this.settings.items.filter(column => column.selected && column.type === 1)?.length\"\r\n                                size=\"is-small\" @click=\"findPCA()\" type=\"is-info\" :loading=\"loadingPCA\"\r\n                                label=\"Draw PCA\" />\r\n                        </p>\r\n                    </b-field>\r\n                </div>\r\n                <div class=\"column is-4\" v-for=\"(item, index) in this.pcaContainers\" :key=\"index\">\r\n                    <div :id=\"'pca_' + index\" style=\"height: 300px;\"></div>\r\n                </div>\r\n            </div>\r\n\r\n        </b-message>\r\n        <b-message title=\"t-distributed stochastic neighbor embedding\" :type=\"'is-info'\" :closable=\"false\">\r\n\r\n            <b-field label=\"Iterations\">\r\n                <b-input v-model=\"iterationsTSNE\" size=\"is-small\" type=\"number\"\r\n                    placeholder=\"number of iterations\"></b-input>\r\n                <p class=\"control\">\r\n                    <b-button @click=\"findTSNE\" size=\"is-small\" type=\"is-info\" :loading=\"loadingTSNE\"\r\n                        label=\"Fit t-SNE\" />\r\n                </p>\r\n            </b-field>\r\n            <div class=\"column is-6\" id=\"dimensionality_reduction_panel_tsne\">\r\n                <div id=\"tsne\">\r\n                </div>\r\n            </div>\r\n        </b-message>\r\n        <b-message title=\"Autoencoder\" :closable=\"false\" :type=\"'is-info'\">\r\n            <b-field grouped>\r\n                <b-field expanded>\r\n\r\n                    <b-field label=\"Hidden layers size\" custom-class=\"is-small\">\r\n                        <b-input v-model=\"hiddenLayerSize\" size=\"is-small\" type=\"number\"\r\n                            placeholder=\"Hidden layer size\"></b-input>\r\n                    </b-field>\r\n                    <b-field label=\"x axis\" custom-class=\"is-small\">\r\n                        <b-input v-model=\"autoEncoderX\" size=\"is-small\" type=\"number\" placeholder=\"x axis\"></b-input>\r\n                    </b-field>\r\n                    <b-field label=\"y axis\" custom-class=\"is-small\">\r\n                        <b-input v-model=\"autoEncoderY\" size=\"is-small\" type=\"number\" placeholder=\"y axis\"></b-input>\r\n                    </b-field>\r\n                    <b-field label=\"iterations\" custom-class=\"is-small\">\r\n                        <b-input v-model=\"iterations\" size=\"is-small\" type=\"number\" placeholder=\"iterations\"></b-input>\r\n                    </b-field>\r\n                    <b-field label=\"encoder\" custom-class=\"is-small\">\r\n                        <b-select v-model=\"encoderActivationFunction\" size=\"is-small\"\r\n                            placeholder=\"Encoder Activation Function\">\r\n                            <option value=\"linear\" id=\"linear\">\r\n                                linear\r\n                            </option>\r\n                            <option value=\"sigmoid\" id=\"sigmoid\">\r\n                                sigmoid\r\n                            </option>\r\n                            <option value=\"relu\" id=\"relu\">\r\n                                RELU\r\n                            </option>\r\n                        </b-select>\r\n                    </b-field>\r\n                    <b-field label=\"decoder\" custom-class=\"is-small\">\r\n                        <b-select size=\"is-small\" v-model=\"decoderActivationFunction\"\r\n                            placeholder=\"Decoder Activation Function\">\r\n                            <option value=\"linear\" id=\"linear\">\r\n                                linear\r\n                            </option>\r\n                            <option value=\"sigmoid\" id=\"sigmoid\">\r\n                                sigmoid\r\n                            </option>\r\n                            <option value=\"relu\" id=\"relu\">\r\n                                RELU\r\n                            </option>\r\n                        </b-select>\r\n                    </b-field>\r\n\r\n                    <b-field custom-class=\"is-small\">\r\n                        <p class=\"control\">\r\n                            <b-button size=\"is-small\" @click=\"autoEncoder\" type=\"is-info\" :loading=\"loadingAutoEncoder\"\r\n                                label=\"Fit Autoencoder\" />\r\n                        </p>\r\n                    </b-field>\r\n                </b-field>\r\n            </b-field>\r\n\r\n\r\n            <div class=\"column is-6\" id=\"dimensionality_reduction_panel_tsne\">\r\n                <div id=\"autoencoder\" style=\"height: 300px;\">\r\n                </div>\r\n            </div>\r\n\r\n        </b-message>\r\n    </section>\r\n    <section v-else>\r\n        <b-message type=\"is-danger\" has-icon icon-pack=\"fas\">\r\n            There is no data to show.\r\n        </b-message>\r\n    </section>\r\n</template>\r\n\r\n<script>\r\nimport ChartController from '@/helpers/charts';\r\nimport { settingStore } from '@/stores/settings'\r\nimport { tensorflow } from 'danfojs/dist/danfojs-base';\r\nimport { FeatureCategories } from '@/helpers/settings'\r\nimport { DataFrame } from 'danfojs/dist/danfojs-base';\r\n\r\n// eslint-disable-next-line no-unused-vars\r\nlet chartController = new ChartController();\r\nexport default {\r\n    name: 'dmensionality-reduction-component',\r\n    setup() {\r\n        const settings = settingStore()\r\n\r\n        return { settings }\r\n    },\r\n    props: {\r\n        msg: String,\r\n        dataframe: Object,\r\n        columns: []\r\n    },\r\n    data() {\r\n        return {\r\n            numberOfComponents: 2,\r\n            loadingPCA: false,\r\n            loadingTSNE: false,\r\n            x: 1, y: 2,\r\n            loadingAutoEncoder: false,\r\n            hiddenLayerSize: 2,\r\n            iterationsTSNE: 200,\r\n            iterations: 200,\r\n            encoderActivationFunction: 'linear',\r\n            decoderActivationFunction: 'linear',\r\n            autoEncoderX: 1,\r\n            autoEncoderY: 2,\r\n            hasPCA: false,\r\n            pcaContainers: [],\r\n            df: null,\r\n        }\r\n    },\r\n    methods: {\r\n        prepareData() {\r\n            this.df = new DataFrame(this.settings.rawData);\r\n            this.df.dropNa({ axis: 1, inplace: true })\r\n            if (this.settings.isClassification && this.settings.mergedClasses?.length > 0) {\r\n                let newClass = this.settings.mergedClasses.map(m => m.class).join('-');\r\n                this.settings.mergedClasses.forEach(cls => {\r\n                    this.df.replace(cls.class, newClass, { columns: [this.settings.modelTarget], inplace: true })\r\n                });\r\n            }\r\n        },\r\n        async drawPCA() {\r\n            try {\r\n                this.numberOfComponents = null\r\n                await this.findPCA(true);\r\n            } catch (error) {\r\n                this.loadingPCA = false;\r\n                throw error;\r\n            }\r\n\r\n        },\r\n        async findPCA(drawExplainedVariance = false) {\r\n            try {\r\n                this.prepareData()\r\n                this.loadingPCA = true;\r\n\r\n                for (let i = 0; i < this.pcaContainers.length; i++) {\r\n                    chartController.purge_charts('pca_' + i)\r\n                }\r\n                this.pcaContainers = []\r\n                // for (let i = 0; i < this.numberOfComponents; i++) {\r\n                //     for (let j = i + 1; j < this.numberOfComponents; j++) {\r\n                //         let index = this.pcaContainers?.findIndex(m => m[0] == i + 1 && m[1] == j + 1)\r\n                //         if (index != -1) {\r\n                //             this.pcaContainers.push([i + 1, j + 1]);\r\n                //         }\r\n                //     }\r\n                // }\r\n                let numericColumns = this.settings.items.filter(column => column.selected && column.type === 1).map(column => column.name);\r\n                if (drawExplainedVariance == false) {\r\n                    if (this.numberOfComponents == 2) {\r\n                        this.pcaContainers.push([1, 2])\r\n                    } else {\r\n                        if (this.numberOfComponents == 3) {\r\n                            this.pcaContainers.push([1, 2], [1, 3], [2, 3])\r\n                        } else if (this.numberOfComponents > 3) {\r\n                            this.pcaContainers.push([1, 2], [1, 3], [2, 3])\r\n                            for (let i = 4; i <= this.numberOfComponents; i++) {\r\n                                let j = 1;\r\n                                while (j <= i - 1) {\r\n                                    this.pcaContainers.push([j, i])\r\n                                    j++\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                } else {\r\n                    this.numberOfComponents = numericColumns.length\r\n                }\r\n\r\n                let x = this.df.loc({ columns: numericColumns }).values;\r\n                await chartController.draw_pca(\r\n                    x,\r\n                    this.settings.isClassification ? this.df.loc({ columns: [this.settings.modelTarget] }).values : [],\r\n                    this.df.loc({ columns: [this.settings.modelTarget] }).values,\r\n                    this.numberOfComponents,\r\n                    this.pcaContainers,\r\n                    numericColumns,\r\n                    drawExplainedVariance\r\n                )\r\n\r\n                this.hasPCA = true;\r\n                this.loadingPCA = false;\r\n\r\n            } catch (error) {\r\n                this.loadingPCA = false;\r\n                throw error;\r\n            }\r\n\r\n        },\r\n        async findTSNE() {\r\n            try {\r\n                this.prepareData()\r\n                this.loadingTSNE = true;\r\n                let numericColumns = this.settings.items.filter(column => column.selected && column.type === 1).map(column => column.name);\r\n                await chartController.plot_tsne(this.df.loc({ columns: numericColumns }).values,\r\n                    this.settings.isClassification ? this.df.loc({ columns: [this.settings.modelTarget] }).values : []\r\n                    , this.df.loc({ columns: [this.settings.modelTarget] }).values, this.iterationsTSNE);\r\n                this.loadingTSNE = false;\r\n            } catch (error) {\r\n                this.loadingTSNE = false;\r\n                throw error;\r\n            }\r\n\r\n        },\r\n        async autoEncoder() {\r\n            this.prepareData()\r\n            this.loadingAutoEncoder = true;\r\n            const model = tensorflow.sequential();\r\n            let numericColumns = this.settings.items.filter(m => m.type === FeatureCategories.Numerical.id).map(m => m.name);\r\n            let unitsLength = numericColumns.length;\r\n            let values = this.settings.df.loc({ columns: numericColumns }).values\r\n            const encoder = tensorflow.layers.dense({\r\n                units: +this.hiddenLayerSize,\r\n                batchInputShape: [null, unitsLength],\r\n                activation: this.encoderActivationFunction,\r\n                kernelInitializer: \"glorotNormal\",\r\n                biasInitializer: \"zeros\"\r\n            });\r\n            const decoder = tensorflow.layers.dense({ units: unitsLength, activation: this.decoderActivationFunction });\r\n            model.add(encoder);\r\n            model.add(decoder);\r\n            await model.compile({ optimizer: 'adam', loss: 'meanSquaredError' });\r\n            const xs = tensorflow.tensor2d(values);\r\n            // eslint-disable-next-line no-unused-vars\r\n            let h = await model.fit(xs, xs, { epochs: +this.iterations, batchSize: 64, shuffle: false, validationSplit: 0.1 });\r\n            xs.dispose();\r\n            const tidyWrapper = tensorflow.tidy(() => {\r\n                const predictor = tensorflow.sequential();\r\n                predictor.add(encoder);\r\n                let xs = tensorflow.tensor2d(values);\r\n                let ret = predictor.predict(xs);\r\n                xs.dispose();\r\n                return ret.arraySync();\r\n            });\r\n            // eslint-disable-next-line no-unused-vars\r\n            let data = await tidyWrapper;\r\n            chartController.drawAutoencoder(data, this.autoEncoderX - 1, this.autoEncoderY - 1,\r\n                this.df.loc({ columns: [this.settings.modelTarget] }).values\r\n                , this.settings.isClassification\r\n            )\r\n            this.loadingAutoEncoder = false;\r\n\r\n        }\r\n    },\r\n    errorCaptured() {\r\n\r\n    }\r\n}\r\n</script>\r\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./dmensionality-reduction-componenet.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./dmensionality-reduction-componenet.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./dmensionality-reduction-componenet.vue?vue&type=template&id=41a21f61\"\nimport script from \"./dmensionality-reduction-componenet.vue?vue&type=script&lang=js\"\nexport * from \"./dmensionality-reduction-componenet.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',[(this.settings.results?.length > 0)?_c('b-tabs',{on:{\"input\":_vm.resize},model:{value:(_vm.activeResult),callback:function ($$v) {_vm.activeResult=$$v},expression:\"activeResult\"}},[_c('b-tab-item',{attrs:{\"label\":\"compare\"},on:{\"click\":_vm.compareResults}},[_c('button',{staticClass:\"button is-info my-2\",on:{\"click\":_vm.compareResults}},[_vm._v(\" Compare models\")]),_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.compare),expression:\"compare\"}],staticClass:\"column is-12\",staticStyle:{\"height\":\"400px\"},attrs:{\"id\":\"comaprison_plot\"}})]),_vm._l((this.settings.results),function(result){return [_c('b-tab-item',{key:result.id,attrs:{\"label\":(result.id + 1) + '.' + result.name.toString()}},[(result.modelTask)?_c('classification-view-component',{attrs:{\"result\":result},on:{\"delete-result\":_vm.deleteResult}}):_c('regression-view-component',{attrs:{\"result\":result},on:{\"delete-result\":_vm.deleteResult}}),_c('div',{staticClass:\"column is-12\"},[_c('div',{staticClass:\"table-container\"},[_c('table',{staticClass:\"table is-bordered is-hoverable is-narrow display is-size-7\",attrs:{\"id\":'predictions_table_' + result.id,\"width\":\"100%\"}})])])],1)]})],2):_c('b-message',{attrs:{\"type\":\"is-danger\",\"has-icon\":\"\",\"icon-pack\":\"fas\"}},[_vm._v(\" No result to show. \")])],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('article',{staticClass:\"columns is-multiline\"},[_c('div',{staticClass:\"column is-12 mb-1\"},[_c('b-message',{staticClass:\"has-text-left\",attrs:{\"type\":\"is-info \",\"has-icon\":\"\",\"icon-pack\":\"fas\"}},[_c('p',{staticClass:\"my-1 is-size-7\"},[_c('span',[_vm._v(\"Dataset Name : \"+_vm._s(_vm.result.datasetName)+\" , \")]),_c('span',[_vm._v(\" Target variable : \"+_vm._s(_vm.result.target))])]),_c('p',{staticClass:\"subtitle is-6 my-1 is-size-7\"},[_vm._v(\"Features :\")]),_c('p',{staticClass:\"ml-2 my-1 subtitle is-6 is-size-7\"},[_vm._v(\"Categorical Features : \"),_vm._l((_vm.result.categoricalFeatures),function(feature){return _c('span',{key:feature},[_vm._v(\" \"+_vm._s(feature + ', ')+\" \")])})],2),_c('p',{staticClass:\"ml-2 my-1 subtitle is-6 is-size-7\"},[_vm._v(\"Numerical Features : \"),_vm._l((_vm.result.numericColumns),function(feature){return _c('span',{key:feature},[_vm._v(\" \"+_vm._s(feature + ', ')+\" \")])})],2),_c('p',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.result.transformations?.length > 0),expression:\"result.transformations?.length > 0\"}],staticClass:\"ml-2 my-1 subtitle is-6 is-size-7\"},[_vm._v(\"Transformations : \"),_vm._l((_vm.result.transformations),function(transformation){return _c('span',{key:transformation.name},[_vm._v(\" \"+_vm._s(transformation.name + ': ' + transformation.scalerLabel + ',')+\" \")])})],2),_vm._l((_vm.result.options),function(value,key){return _c('p',{key:key,staticClass:\"is-size-7\"},[_vm._v(\" \"+_vm._s(key)+\": \"+_vm._s(value['value'])+\" \")])}),_c('p',{staticClass:\"subtitle my-1 is-size-7\"},[_vm._v(\"Goodness of Fit :\")]),_c('p',{staticClass:\"ml-2 my-1 subtitle is-size-7\"},[_vm._v(\"Accuracy : \"+_vm._s(_vm.result.metrics.accuracy.toFixed(2)))]),_c('p',{staticClass:\"ml-2 my-1 subtitle is-size-7\"},[_vm._v(\"f1 micro : \"+_vm._s(_vm.result.metrics.f1_micro.toFixed(2)))]),_c('p',{staticClass:\"ml-2 my-1 subtitle is-size-7\"},[_vm._v(\" f1 macro :\"+_vm._s(_vm.result.metrics.f1_macro.toFixed(2)))]),_c('button',{staticClass:\"button is-danger has-text-white is-small\",staticStyle:{\"color\":\"#fff !important\"},on:{\"click\":function($event){return _vm.deleteTab()}}},[_vm._v(\"Delete \")]),_c('button',{staticClass:\"button is-success is-small\",on:{\"click\":function($event){return _vm.toggleHelp(_vm.result.helpSectionId)}}},[_vm._v(\"Method description \")]),_c('button',{staticClass:\"button is-info is-small\",on:{\"click\":function($event){return _vm.downloadPythonCode()}}},[_vm._v(\"Download the code\")])],2)],1),_c('div',{staticClass:\"column is-12\"},[_c('article',{staticClass:\"message is-info\"},[_c('div',{staticClass:\"message-header\"},[_vm._v(\" Confusion Matrix and PCA of predictions\")]),_c('div',{staticClass:\"message-body mx-1\"},[_c('div',{staticClass:\"columns is-multiline\"},[_c('div',{staticClass:\"column is-6 my-1\",staticStyle:{\"height\":\"400px\"},attrs:{\"id\":'confusion_matrix_' + _vm.result.id}}),_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.result.showProbas),expression:\"result.showProbas\"}],staticClass:\"column is-6 my-1\",staticStyle:{\"height\":\"400px\"},attrs:{\"id\":'proba_plot_' + _vm.result.id}}),_c('br'),_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.result.showProbas),expression:\"result.showProbas\"}],staticClass:\"column is-6 my-1\",staticStyle:{\"height\":\"400px\"},attrs:{\"id\":'roc_plot_' + _vm.result.id}}),_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.result.hasExplaination && _vm.result.name !== 'Logistic Regression'),expression:\"result.hasExplaination && result.name !== 'Logistic Regression'\"}],staticClass:\"column is-6 my-1\",staticStyle:{\"height\":\"400px\"},attrs:{\"id\":'pfi_boxplot_' + _vm.result.id}})])])])]),_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.result.name === 'Logistic Regression'),expression:\"result.name === 'Logistic Regression'\"}],staticClass:\"column is-12\"},[_c('div',{staticClass:\"columns is-multiline\"},[_c('div',{staticClass:\"column is-7\"},[_c('div',{staticClass:\"table-container\"},[_c('table',{staticClass:\"table has-text-centered nowrap is-striped is-bordered is-narrow is-hoverable is-size-7\",attrs:{\"id\":'metrics_table_' + _vm.result.id}},[_vm._m(0),_vm._m(1)])])]),_c('div',{staticClass:\"column is-5\",attrs:{\"id\":'parameters_plot_' + _vm.result.id}}),_c('div',{staticClass:\"column is-6\",staticStyle:{\"height\":\"250px\"},attrs:{\"id\":'errors_' + _vm.result.id}}),_c('div',{staticClass:\"column is-6\",staticStyle:{\"height\":\"250px\"},attrs:{\"id\":'regularization_' + _vm.result.id}})])]),_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.result.hasExplaination && _vm.result.name !== 'Logistic Regression'),expression:\"result.hasExplaination && result.name !== 'Logistic Regression'\"}],staticClass:\"column is-12\"},[_c('article',{staticClass:\"message is-info\"},[_c('div',{staticClass:\"message-header\"},[_vm._v(\" Partial Dependence Plot\")]),_c('div',{staticClass:\"message-body mx-1\"},[_c('div',{staticClass:\"columns is-multiline\"},[(_vm.result.name.toString().includes('neighbour'))?_c('div',{staticClass:\"column is-6\",staticStyle:{\"height\":\"400px\"},attrs:{\"id\":'knn_table_' + _vm.result.id}}):_vm._e(),_c('div',{attrs:{\"id\":'pdp_containers_' + _vm.result.id}})]),_c('br')])])])])\n}\nvar staticRenderFns = [function (){var _vm=this,_c=_vm._self._c;return _c('thead',[_c('tr',[_c('th',{attrs:{\"colspan\":\"1\"}}),_c('th',{staticClass:\"has-text-centered\",attrs:{\"colspan\":\"3\"}},[_vm._v(\"OLS\")]),_c('th',{staticClass:\"has-text-centered\",attrs:{\"colspan\":\"3\"}},[_vm._v(\"lambda min\")]),_c('th',{staticClass:\"has-text-centered\",attrs:{\"colspan\":\"3\"}},[_vm._v(\"lambda 1se\")])]),_c('tr',[_c('th',{staticClass:\"has-text-centered\"},[_vm._v(\"name\")]),_c('th',[_vm._v(\"coef\")]),_c('th',[_vm._v(\"st.d.\")]),_c('th',[_c('i',[_vm._v(\"p\")]),_vm._v(\"-value\")]),_c('th',[_vm._v(\"coef\")]),_c('th',[_vm._v(\"st.d.\")]),_c('th',[_c('i',[_vm._v(\"p\")]),_vm._v(\"-value\")]),_c('th',[_vm._v(\"coef\")]),_c('th',[_vm._v(\"st.d.\")]),_c('th',[_c('i',[_vm._v(\"p\")]),_vm._v(\"-value\")])])])\n},function (){var _vm=this,_c=_vm._self._c;return _c('tfoot',{staticClass:\"has-text-centered\",staticStyle:{\"font-weight\":\"normal\"}},[_c('tr',[_c('th'),_c('th',{staticClass:\"has-text-centered\",attrs:{\"colspan\":\"3\"}}),_c('th',{staticClass:\"has-text-centered\",attrs:{\"colspan\":\"3\"}}),_c('th',{staticClass:\"has-text-centered\",attrs:{\"colspan\":\"3\"}})])])\n}]\n\nexport { render, staticRenderFns }","<template>\r\n    <article class=\"columns is-multiline\">\r\n        <div class=\"column is-12 mb-1\">\r\n            <b-message type=\"is-info \" has-icon icon-pack=\"fas\" class=\"has-text-left\">\r\n                <p class=\"my-1 is-size-7\">\r\n                    <span>Dataset Name : {{ result.datasetName }} , </span>\r\n                    <span> Target variable : {{ result.target }}</span>\r\n                </p>\r\n\r\n                <p class=\"subtitle is-6 my-1 is-size-7\">Features :</p>\r\n                <p class=\"ml-2 my-1 subtitle is-6 is-size-7\">Categorical Features : <span\r\n                        v-for=\"feature in result.categoricalFeatures\" :key=\"feature\">\r\n                        {{ feature + ', ' }}\r\n                    </span>\r\n                </p>\r\n                <p class=\"ml-2 my-1 subtitle is-6 is-size-7\">Numerical Features : <span\r\n                        v-for=\"feature in result.numericColumns\" :key=\"feature\">\r\n                        {{ feature + ', ' }}\r\n                    </span></p>\r\n                <p class=\"ml-2 my-1 subtitle is-6 is-size-7\" v-show=\"result.transformations?.length > 0\">Transformations\r\n                    :\r\n                    <span v-for=\"transformation in result.transformations\" :key=\"transformation.name\">\r\n                        {{ transformation.name + ': ' + transformation.scalerLabel + ',' }}\r\n                    </span>\r\n                </p>\r\n                <p class=\"is-size-7\" v-for=\"(value, key) in result.options\" :key=\"key\">\r\n                    {{ key }}: {{ value['value'] }}\r\n                </p>\r\n                <p class=\"subtitle my-1 is-size-7\">Goodness of Fit :</p>\r\n                <p class=\"ml-2 my-1 subtitle is-size-7\">Accuracy : {{ result.metrics.accuracy.toFixed(2) }}</p>\r\n                <p class=\"ml-2 my-1 subtitle is-size-7\">f1 micro : {{ result.metrics.f1_micro.toFixed(2) }}</p>\r\n                <p class=\"ml-2 my-1 subtitle is-size-7\"> f1 macro :{{ result.metrics.f1_macro.toFixed(2) }}</p>\r\n                <button class=\"button is-danger has-text-white is-small\" style=\"color:#fff !important\"\r\n                    @click=\"deleteTab()\">Delete </button>\r\n                <button class=\"button is-success is-small\" @click=\"toggleHelp(result.helpSectionId)\">Method description\r\n                </button>\r\n                <button class=\"button is-info is-small\" @click=\"downloadPythonCode()\">Download the code</button>\r\n            </b-message>\r\n        </div>\r\n        <div class=\"column is-12\">\r\n            <article class=\"message is-info\">\r\n                <div class=\"message-header\"> Confusion Matrix and PCA of predictions</div>\r\n                <div class=\"message-body mx-1\">\r\n                    <div class=\"columns is-multiline\">\r\n                        <div class=\"column is-6 my-1\" style=\"height: 400px;\" :id=\"'confusion_matrix_' + result.id\">\r\n                        </div>\r\n                        <div v-show=\"result.showProbas\" class=\"column is-6 my-1\" style=\"height: 400px;\"\r\n                            :id=\"'proba_plot_' + result.id\">\r\n                        </div>\r\n                        <br>\r\n                        <div v-show=\"result.showProbas\" class=\"column is-6 my-1\" style=\"height: 400px;\"\r\n                            :id=\"'roc_plot_' + result.id\">\r\n                        </div>\r\n\r\n                        <div v-show=\"result.hasExplaination && result.name !== 'Logistic Regression'\"\r\n                            class=\"column is-6 my-1\" style=\"height: 400px;\" :id=\"'pfi_boxplot_' + result.id\">\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </article>\r\n        </div>\r\n        <div class=\"column is-12\" v-show=\"result.name === 'Logistic Regression'\">\r\n            <div class=\"columns is-multiline\">\r\n                <div class=\"column is-7\">\r\n                    <div class=\"table-container\">\r\n                        <table\r\n                            class=\"table has-text-centered nowrap is-striped is-bordered is-narrow is-hoverable is-size-7\"\r\n                            :id=\"'metrics_table_' + result.id\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th colspan=\"1\"></th>\r\n                                    <th colspan=\"3\" class=\"has-text-centered\">OLS</th>\r\n                                    <th colspan=\"3\" class=\"has-text-centered\">lambda min</th>\r\n                                    <th colspan=\"3\" class=\"has-text-centered\">lambda 1se</th>\r\n                                </tr>\r\n                                <tr>\r\n                                    <th class=\"has-text-centered\">name</th>\r\n                                    <th>coef</th>\r\n                                    <th>st.d.</th>\r\n                                    <th><i>p</i>-value</th>\r\n                                    <th>coef</th>\r\n                                    <th>st.d.</th>\r\n                                    <th><i>p</i>-value</th>\r\n                                    <th>coef</th>\r\n                                    <th>st.d.</th>\r\n                                    <th><i>p</i>-value</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tfoot class=\"has-text-centered\" style=\" font-weight: normal\">\r\n                                <tr>\r\n                                    <th></th>\r\n                                    <th colspan=\"3\" class=\"has-text-centered\"></th>\r\n                                    <th colspan=\"3\" class=\"has-text-centered\"></th>\r\n                                    <th colspan=\"3\" class=\"has-text-centered\"></th>\r\n\r\n                                </tr>\r\n                            </tfoot>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n                <div class=\"column is-5\" :id=\"'parameters_plot_' + result.id\">\r\n                </div>\r\n                <div class=\"column is-6\" :id=\"'errors_' + result.id\" style=\"height:250px\">\r\n                </div>\r\n                <div class=\"column is-6\" :id=\"'regularization_' + result.id\" style=\"height:250px\">\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"column is-12\" v-show=\"result.hasExplaination && result.name !== 'Logistic Regression'\">\r\n            <article class=\"message is-info\">\r\n                <div class=\"message-header\"> Partial Dependence Plot</div>\r\n                <div class=\"message-body mx-1\">\r\n                    <div class=\"columns is-multiline\">\r\n                        <div class=\"column is-6\" style=\"height: 400px;\" :id=\"'knn_table_' + result.id\"\r\n                            v-if=\"result.name.toString().includes('neighbour')\">\r\n                        </div>\r\n                        <div :id=\"'pdp_containers_' + result.id\"></div>\r\n                    </div>\r\n                    <br>\r\n                </div>\r\n            </article>\r\n        </div>\r\n    </article>\r\n\r\n</template>\r\n\r\n<script>\r\nimport { settingStore } from '@/stores/settings'\r\nimport { ModelFactory } from \"@/helpers/model_factory\";\r\n\r\nexport default {\r\n\r\n    setup() {\r\n        const settings = settingStore()\r\n        return { settings }\r\n    },\r\n    created() {\r\n        this.pdpFeature = this.settings.features[0].name\r\n    },\r\n    data() {\r\n        return {\r\n            pdpFeature: null,\r\n            showResult: true\r\n        }\r\n    },\r\n    name: 'ClassificationViewComponent',\r\n    methods: {\r\n        toggleHelp(id) {\r\n            this.settings.setActiveTab(3);\r\n            setTimeout(() => {\r\n                let el = document.getElementById(id);\r\n                el.scrollIntoView({ behavior: 'smooth' })\r\n            }, 500);\r\n        },\r\n        deleteTab() {\r\n            this.$emit(\"delete-result\", this.result.id)\r\n        },\r\n        downloadPythonCode() {\r\n            let model_factory = new ModelFactory();\r\n            let model = model_factory.createModel(this.result.snapshot.id, this.result.options);\r\n            let pyCode = model.generatePythonCode()\r\n            const blob = new Blob([pyCode], { type: 'text/plain' });\r\n            const url = URL.createObjectURL(blob);\r\n            const link = document.createElement('a');\r\n            link.href = url;\r\n            link.download = 'example.py';\r\n            document.body.appendChild(link);\r\n            link.click();\r\n            document.body.removeChild(link);\r\n            URL.revokeObjectURL(url);\r\n        },\r\n        async updatePartialDependencePlot() {\r\n            let model_factory = new ModelFactory();\r\n            let model = model_factory.createModel(this.result.snapshot.id, this.result.options);\r\n            await model.train(this.result.snapshot.x, this.result.snapshot.y,\r\n                this.result.snapshot.xt, this.result.snapshot.yt, this.result.snapshot.xFeatures, this.result.snapshot.categoricals, this.result.snapshot.xFeatures.findIndex(feature => feature == this.pdpFeature));\r\n            model.chartController.plotPDP(this.result.id, model.pdp_averages, model.pdp_grid, this.result.snapshot.labels, this.pdpFeature);\r\n\r\n        }\r\n    },\r\n    props: {\r\n        result: {}\r\n    },\r\n    errorCaptured(err, vm, info) {\r\n        console.log(`cat EC: ${err.toString()}\\ninfo: ${info}`);\r\n        return false;\r\n    }\r\n}\r\n</script>\r\n\r\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\r\n<style scoped></style>","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./classification-view-component.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./classification-view-component.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./classification-view-component.vue?vue&type=template&id=6d03b3fb&scoped=true\"\nimport script from \"./classification-view-component.vue?vue&type=script&lang=js\"\nexport * from \"./classification-view-component.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"6d03b3fb\",\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"columns is-multiline\"},[_c('div',{staticClass:\"column is-12\"},[_c('b-message',{staticClass:\"has-text-left\",attrs:{\"type\":\"is-info is-size-7\\t\",\"has-icon\":\"\",\"icon-pack\":\"fas\"}},[_c('p',{staticClass:\"my-1\"},[_c('span',[_vm._v(\"Dataset Name : \"+_vm._s(_vm.result.datasetName)+\" , \")]),_c('span',[_vm._v(\" Target variable : \"+_vm._s(_vm.result.target))])]),_c('p',{staticClass:\"subtitle is-size-7 my-1\"},[_vm._v(\"Features :\")]),_c('p',{staticClass:\"ml-2 my-1 subtitle is-size-7\"},[_vm._v(\"Categorical Features : \"),_vm._l((_vm.result.categoricalFeatures),function(feature){return _c('span',{key:feature},[_vm._v(\" \"+_vm._s(feature + ', ')+\" \")])})],2),_c('p',{staticClass:\"ml-2 my-1 subtitle is-size-7\"},[_vm._v(\"Numerical Features : \"),_vm._l((_vm.result.numericColumns),function(feature){return _c('span',{key:feature},[_vm._v(\" \"+_vm._s(feature + ', ')+\" \")])})],2),_c('p',{staticClass:\"ml-2 my-1 subtitle is-size-7\"},[_vm._v(\"Transformations : \"),_vm._l((_vm.result.transformations),function(transformation){return _c('span',{key:transformation.name},[_vm._v(\" \"+_vm._s(transformation.name + ': ' + transformation.scaler + ',')+\" \")])})],2),_vm._l((_vm.result.options),function(value,key){return _c('p',{key:key},[_vm._v(\" \"+_vm._s(key)+\": \"+_vm._s(value['value'])+\" \")])}),_c('p',{staticClass:\"subtitle is-size-7 my-1\"},[_vm._v(\"Goodness of Fit :\")]),_c('p',{staticClass:\"ml-2 my-1 subtitle is-size-7\"},[_vm._v(\"MSE : \"+_vm._s(_vm.result.metrics.mse.toFixed(2)))]),_c('p',{staticClass:\"ml-2 my-1 subtitle is-size-7\"},[_vm._v(\"R2 : \"+_vm._s(_vm.result.metrics.rsquared.toFixed(2)))]),_c('button',{staticClass:\"button is-danger has-text-white is-small\",on:{\"click\":function($event){return _vm.deleteTab()}}},[_vm._v(\"Delete \")]),_c('button',{staticClass:\"button is-success is-small\",on:{\"click\":function($event){return _vm.toggleHelp(_vm.result.helpSectionId)}}},[_vm._v(\"Help\")])],2)],1),(_vm.result.name === 'Linear Regression' || _vm.result.name === 'Polynomial Regression')?_c('div',{staticClass:\"column is-12\"},[_c('div',{staticClass:\"columns is-multiline\"},[_c('div',{staticClass:\"column is-7\"},[_c('div',{staticClass:\"table-container\"},[_c('table',{staticClass:\"table has-text-centered nowrap is-striped is-bordered is-narrow is-hoverable is-size-7\",attrs:{\"id\":'metrics_table_' + _vm.result.id}},[_vm._m(0),_vm._m(1)])])]),_c('div',{staticClass:\"column is-5\",attrs:{\"id\":'parameters_plot_' + _vm.result.id,\"width\":\"100%\"}}),_c('div',{staticClass:\"column is-6\",staticStyle:{\"height\":\"250px\"},attrs:{\"id\":'errors_' + _vm.result.id,\"width\":\"100%\"}}),_c('div',{staticClass:\"column is-6\",staticStyle:{\"height\":\"250px\"},attrs:{\"id\":'regularization_' + _vm.result.id,\"width\":\"100%\"}}),_c('div',{staticClass:\"column is-4\"},[_c('div',{staticStyle:{\"height\":\"300px\"},attrs:{\"id\":'regression_y_yhat_' + _vm.result.id,\"width\":\"100%\"}})]),_c('div',{staticClass:\"column is-4\"},[_c('div',{staticStyle:{\"height\":\"300px\"},attrs:{\"id\":'regression_y_yhat_min_' + _vm.result.id,\"width\":\"100%\"}})]),_c('div',{staticClass:\"column is-4\"},[_c('div',{staticStyle:{\"height\":\"300px\"},attrs:{\"id\":'regression_y_yhat_1se_' + _vm.result.id,\"width\":\"100%\"}})]),_c('div',{staticClass:\"column is-4\"},[_c('div',{staticStyle:{\"height\":\"300px\"},attrs:{\"id\":'regression_residual_' + _vm.result.id,\"width\":\"100%\"}})]),_c('div',{staticClass:\"column is-4\"},[_c('div',{staticStyle:{\"height\":\"300px\"},attrs:{\"id\":'regression_residual_min_' + _vm.result.id,\"width\":\"100%\"}})]),_c('div',{staticClass:\"column is-4\"},[_c('div',{staticStyle:{\"height\":\"300px\"},attrs:{\"id\":'regression_residual_1se_' + _vm.result.id,\"width\":\"100%\"}})]),_c('div',{staticClass:\"column is-4\"},[_c('div',{staticStyle:{\"height\":\"300px\"},attrs:{\"id\":'qqplot_ols_' + _vm.result.id,\"width\":\"100%\"}})]),_c('div',{staticClass:\"column is-4\"},[_c('div',{staticStyle:{\"height\":\"300px\"},attrs:{\"id\":'qqplot_min_' + _vm.result.id,\"width\":\"100%\"}})]),_c('div',{staticClass:\"column is-4\"},[_c('div',{staticStyle:{\"height\":\"300px\"},attrs:{\"id\":'qqplot_1se_' + _vm.result.id,\"width\":\"100%\"}})])])]):_c('div',{staticClass:\"column is-12\"},[_c('div',{staticClass:\"columns is-multiline\"},[_c('div',{staticClass:\"column is-6\"},[_c('div',{staticStyle:{\"height\":\"300px\"},attrs:{\"id\":'regression_y_yhat_' + _vm.result.id,\"width\":\"100%\"}})]),_c('div',{staticClass:\"column is-6\"},[_c('div',{staticStyle:{\"height\":\"300px\"},attrs:{\"id\":'errors_' + _vm.result.id,\"width\":\"100%\"}})]),(_vm.result.name.toString().includes('neighbour'))?_c('div',{staticClass:\"column is-6\",staticStyle:{\"height\":\"350px\"},attrs:{\"id\":'knn_table_' + _vm.result.id}}):_vm._e(),_c('div',{staticClass:\"column is-12\"},[_c('article',{staticClass:\"message is-info\"},[_c('div',{staticClass:\"message-header\"},[_vm._v(\" Partial Dependence Plot and Permutation Feature Importance\")]),_c('div',{staticClass:\"message-body\"},[_c('div',{staticClass:\"columns is-multiline\"},[_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.result.hasExplaination),expression:\"result.hasExplaination\"}],staticClass:\"column is-6\",staticStyle:{\"height\":\"400px\"},attrs:{\"id\":'pfi_boxplot_' + _vm.result.id}})])])])])])])])\n}\nvar staticRenderFns = [function (){var _vm=this,_c=_vm._self._c;return _c('thead',[_c('tr',[_c('th',{attrs:{\"colspan\":\"1\"}}),_c('th',{staticClass:\"has-text-centered\",attrs:{\"colspan\":\"3\"}},[_vm._v(\"OLS\")]),_c('th',{staticClass:\"has-text-centered\",attrs:{\"colspan\":\"3\"}},[_vm._v(\"lasso min\")]),_c('th',{staticClass:\"has-text-centered\",attrs:{\"colspan\":\"3\"}},[_vm._v(\"lasso 1se\")])]),_c('tr',[_c('th',{staticClass:\"has-text-centered\"},[_vm._v(\"names\")]),_c('th',[_vm._v(\"coef\")]),_c('th',[_vm._v(\"st.d.\")]),_c('th',[_c('i',[_vm._v(\"p\")]),_vm._v(\"-value\")]),_c('th',[_vm._v(\"coef\")]),_c('th',[_vm._v(\"st.d.\")]),_c('th',[_c('i',[_vm._v(\"p\")]),_vm._v(\"-value\")]),_c('th',[_vm._v(\"coef\")]),_c('th',[_vm._v(\"st.d.\")]),_c('th',[_c('i',[_vm._v(\"p\")]),_vm._v(\"-value\")])])])\n},function (){var _vm=this,_c=_vm._self._c;return _c('tfoot',{staticStyle:{\"font-weight\":\"normal\"}},[_c('tr',[_c('th'),_c('th',{staticClass:\"has-text-centered\",attrs:{\"colspan\":\"3\"}}),_c('th',{staticClass:\"has-text-centered\",attrs:{\"colspan\":\"3\"}}),_c('th',{staticClass:\"has-text-centered\",attrs:{\"colspan\":\"3\"}})])])\n}]\n\nexport { render, staticRenderFns }","<template>\r\n    <div class=\"columns is-multiline\">\r\n        <div class=\"column is-12\">\r\n            <b-message type=\"is-info is-size-7\t\" has-icon icon-pack=\"fas\" class=\"has-text-left\">\r\n                <p class=\"my-1\">\r\n                    <span>Dataset Name : {{ result.datasetName }} , </span>\r\n                    <span> Target variable : {{ result.target }}</span>\r\n                </p>\r\n\r\n                <p class=\"subtitle is-size-7 my-1\">Features :</p>\r\n                <p class=\"ml-2 my-1 subtitle is-size-7 \">Categorical Features : <span\r\n                        v-for=\"feature in result.categoricalFeatures\" :key=\"feature\">\r\n                        {{ feature + ', ' }}\r\n                    </span>\r\n                </p>\r\n                <p class=\"ml-2 my-1 subtitle is-size-7 \">Numerical Features : <span\r\n                        v-for=\"feature in result.numericColumns\" :key=\"feature\">\r\n                        {{ feature + ', ' }}\r\n                    </span></p>\r\n                <p class=\"ml-2 my-1 subtitle is-size-7 \">Transformations :\r\n                    <span v-for=\"transformation in result.transformations\" :key=\"transformation.name\">\r\n                        {{ transformation.name + ': ' + transformation.scaler + ',' }}\r\n                    </span>\r\n                </p>\r\n                <p v-for=\"(value, key) in result.options\" :key=\"key\">\r\n                    {{ key }}: {{ value['value'] }}\r\n                </p>\r\n                <p class=\"subtitle is-size-7 my-1\">Goodness of Fit :</p>\r\n                <p class=\"ml-2 my-1 subtitle is-size-7 \">MSE : {{ result.metrics.mse.toFixed(2) }}</p>\r\n                <p class=\"ml-2 my-1 subtitle is-size-7 \">R2 : {{ result.metrics.rsquared.toFixed(2) }}</p>\r\n                <button class=\"button is-danger has-text-white is-small\" @click=\"deleteTab()\">Delete </button>\r\n                <button class=\"button is-success is-small\" @click=\"toggleHelp(result.helpSectionId)\">Help</button>\r\n\r\n            </b-message>\r\n        </div>\r\n        <div class=\"column is-12\" v-if=\"result.name === 'Linear Regression' || result.name === 'Polynomial Regression'\">\r\n            <div class=\"columns is-multiline\">\r\n\r\n                <div class=\"column is-7\">\r\n                    <div class=\"table-container\">\r\n                        <table\r\n                            class=\"table has-text-centered nowrap is-striped is-bordered is-narrow is-hoverable is-size-7\"\r\n                            :id=\"'metrics_table_' + result.id\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th colspan=\"1\"></th>\r\n                                    <th colspan=\"3\" class=\"has-text-centered\">OLS</th>\r\n                                    <th colspan=\"3\" class=\"has-text-centered\">lasso min</th>\r\n                                    <th colspan=\"3\" class=\"has-text-centered\">lasso 1se</th>\r\n                                </tr>\r\n                                <tr>\r\n                                    <th class=\"has-text-centered\">names</th>\r\n                                    <th>coef</th>\r\n                                    <th>st.d.</th>\r\n                                    <th><i>p</i>-value</th>\r\n                                    <th>coef</th>\r\n                                    <th>st.d.</th>\r\n                                    <th><i>p</i>-value</th>\r\n                                    <th>coef</th>\r\n                                    <th>st.d.</th>\r\n                                    <th><i>p</i>-value</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tfoot style=\" font-weight: normal\">\r\n                                <tr>\r\n                                    <th></th>\r\n                                    <th colspan=\"3\" class=\"has-text-centered\"></th>\r\n                                    <th colspan=\"3\" class=\"has-text-centered\"></th>\r\n                                    <th colspan=\"3\" class=\"has-text-centered\"></th>\r\n\r\n                                </tr>\r\n                            </tfoot>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n                <div class=\"column is-5\" :id=\"'parameters_plot_' + result.id\" width=\"100%\">\r\n                </div>\r\n                <!-- <div class=\"column is-12\" :id=\"'metrics_' + result.id\">\r\n            </div> -->\r\n\r\n                <div class=\"column is-6\" :id=\"'errors_' + result.id\" width=\"100%\" style=\"height:250px\">\r\n                </div>\r\n                <div class=\"column is-6\" :id=\"'regularization_' + result.id\" width=\"100%\" style=\"height:250px\">\r\n                </div>\r\n                <div class=\"column is-4\">\r\n                    <div :id=\"'regression_y_yhat_' + result.id\" width=\"100%\" style=\"height:300px\">\r\n                    </div>\r\n                </div>\r\n                <div class=\"column is-4\">\r\n                    <div :id=\"'regression_y_yhat_min_' + result.id\" width=\"100%\" style=\"height:300px\">\r\n                    </div>\r\n                </div>\r\n                <div class=\"column is-4\">\r\n                    <div :id=\"'regression_y_yhat_1se_' + result.id\" width=\"100%\" style=\"height:300px\">\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"column is-4\">\r\n                    <div :id=\"'regression_residual_' + result.id\" width=\"100%\" style=\"height:300px\">\r\n                    </div>\r\n                </div>\r\n                <div class=\"column is-4\">\r\n                    <div :id=\"'regression_residual_min_' + result.id\" width=\"100%\" style=\"height:300px\">\r\n                    </div>\r\n                </div>\r\n                <div class=\"column is-4\">\r\n                    <div :id=\"'regression_residual_1se_' + result.id\" width=\"100%\" style=\"height:300px\">\r\n                    </div>\r\n                </div>\r\n                <div class=\"column is-4\">\r\n                    <div :id=\"'qqplot_ols_' + result.id\" width=\"100%\" style=\"height:300px\">\r\n                    </div>\r\n                </div>\r\n                <div class=\"column is-4\">\r\n                    <div :id=\"'qqplot_min_' + result.id\" width=\"100%\" style=\"height:300px\">\r\n                    </div>\r\n                </div>\r\n                <div class=\"column is-4\">\r\n                    <div :id=\"'qqplot_1se_' + result.id\" width=\"100%\" style=\"height:300px\">\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"column is-12\" v-else>\r\n            <div class=\"columns is-multiline\">\r\n                <div class=\"column is-6\">\r\n                    <div :id=\"'regression_y_yhat_' + result.id\" width=\"100%\" style=\"height:300px\">\r\n                    </div>\r\n                </div>\r\n                <div class=\"column is-6\">\r\n                    <div :id=\"'errors_' + result.id\" width=\"100%\" style=\"height:300px\"></div>\r\n                </div>\r\n                <div class=\"column is-6\" style=\"height: 350px;\" :id=\"'knn_table_' + result.id\"\r\n                    v-if=\"result.name.toString().includes('neighbour')\">\r\n                </div>\r\n                <div class=\"column is-12\">\r\n                    <article class=\"message is-info\">\r\n                        <div class=\"message-header\"> Partial Dependence Plot and Permutation Feature Importance</div>\r\n                        <div class=\"message-body\">\r\n                            <div class=\"columns is-multiline\">\r\n                                <div class=\"column is-6\" style=\"height: 400px;\" v-show=\"result.hasExplaination\"\r\n                                    :id=\"'pfi_boxplot_' + result.id\">\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </article>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { settingStore } from '@/stores/settings'\r\nimport { ModelFactory } from \"@/helpers/model_factory\";\r\n\r\nexport default {\r\n\r\n    setup() {\r\n        const settings = settingStore()\r\n        return { settings }\r\n    },\r\n    name: 'regression-view-component',\r\n    methods: {\r\n        toggleHelp(id) {\r\n            this.settings.setActiveTab(3);\r\n            setTimeout(() => {\r\n                let el = document.getElementById(id);\r\n                el.scrollIntoView({ behavior: 'smooth' })\r\n            }, 500);\r\n        },\r\n        deleteTab() {\r\n            this.$emit(\"delete-result\", this.result.id)\r\n        },\r\n        async updatePartialDependencePlot() {\r\n            let model_factory = new ModelFactory();\r\n            let model = model_factory.createModel(this.result.snapshot.id, this.result.options);\r\n            await model.train(this.result.snapshot.x, this.result.snapshot.y,\r\n                this.result.snapshot.xt, this.result.snapshot.yt, this.result.snapshot.xFeatures, this.result.snapshot.categoricals,\r\n                [0, 1, 2]);\r\n            model.chartController.plotPDPRegression(this.result.id, model.pdp_averages, model.pdp_grid, this.result.snapshot.labels, this.result.snapshot.xFeatures, this.result.snapshot.categoricals);\r\n\r\n        },\r\n    },\r\n    created() {\r\n        this.pdpFeature = this.settings.features.filter(feature => feature.name != this.settings.target)[0].name;\r\n\r\n    },\r\n\r\n    data() {\r\n        return {\r\n            pdpFeature: null,\r\n            showResult: true\r\n        }\r\n    },\r\n    props: {\r\n        result: {}\r\n    },\r\n}\r\n</script>\r\n\r\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\r\n<style scoped></style>","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./regression-view-component.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./regression-view-component.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./regression-view-component.vue?vue&type=template&id=b3fd8cfa&scoped=true\"\nimport script from \"./regression-view-component.vue?vue&type=script&lang=js\"\nexport * from \"./regression-view-component.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"b3fd8cfa\",\n  null\n  \n)\n\nexport default component.exports","<template>\r\n    <div>\r\n\r\n        <b-tabs v-model=\"activeResult\" v-if=\"this.settings.results?.length > 0\" @input=\"resize\">\r\n            <b-tab-item label=\"compare\" @click=\"compareResults\">\r\n                <button class=\"button is-info my-2\" @click=\"compareResults\">\r\n                    Compare\r\n                    models</button>\r\n\r\n                <div v-show=\"compare\" class=\"column is-12\" id=\"comaprison_plot\" style=\"height:400px;\"></div>\r\n            </b-tab-item>\r\n            <template v-for=\"result in this.settings.results\">\r\n                <b-tab-item :label=\"(result.id + 1) + '.' + result.name.toString()\" :key=\"result.id\">\r\n                    <classification-view-component @delete-result=\"deleteResult\" :result=\"result\"\r\n                        v-if=\"result.modelTask\"></classification-view-component>\r\n                    <regression-view-component @delete-result=\"deleteResult\" :result=\"result\" v-else>\r\n                    </regression-view-component>\r\n                    <div class=\"column is-12\">\r\n                        <div class=\"table-container\">\r\n                            <table :id=\"'predictions_table_' + result.id\"\r\n                                class=\"table is-bordered is-hoverable is-narrow display is-size-7\" width=\"100%\">\r\n                            </table>\r\n                        </div>\r\n                    </div>\r\n                </b-tab-item>\r\n            </template>\r\n        </b-tabs>\r\n        <b-message type=\"is-danger\" has-icon icon-pack=\"fas\" v-else>\r\n            No result to show.\r\n        </b-message>\r\n    </div>\r\n\r\n</template>\r\n\r\n<script>\r\nimport { settingStore } from '@/stores/settings'\r\nimport ClassificationViewComponent from './classification-view-component.vue'\r\nimport RegressionViewComponent from './regression-view-component.vue'\r\nimport { computed } from \"vue\";\r\n\r\nimport Plotly from 'danfojs/node_modules/plotly.js-dist-min';\r\nimport UI from '@/helpers/ui';\r\nlet ui = new UI(null, null)\r\n\r\n\r\nexport default {\r\n    components: {\r\n        'classification-view-component': ClassificationViewComponent,\r\n        'regression-view-component': RegressionViewComponent,\r\n\r\n    },\r\n    setup() {\r\n        const settings = settingStore()\r\n        const activeResult = computed({\r\n            get: () => settings.getResultTab,\r\n            set: (value) => settings.setResultActiveTab(value), // Mutate the state properly\r\n        });\r\n        return { settings, activeResult }\r\n    },\r\n\r\n    name: 'ResultsComponent',\r\n    props: {\r\n    },\r\n    data() {\r\n        return {\r\n            compare: false,\r\n            datasetName: '',\r\n            isClassication: -1,\r\n            comparisonMetric: '',\r\n            baseMetrics: [],\r\n            activeTab: null,\r\n            visitedTabs: [],\r\n        }\r\n    },\r\n    methods: {\r\n        fillMetrics() {\r\n            if (this.isClassication == 1) {\r\n                this.baseMetrics = [{ name: 'accuracy', id: 1 }, { name: 'f1 micro', id: 2 }, { 'name': 'f1 macro', id: 3 }]\r\n            } else if (this.isClassication == 0) {\r\n                this.baseMetrics = [{ name: 'R2', id: 1 }, { name: 'MSE', id: 0 }]\r\n            }\r\n\r\n        },\r\n        compareResults() {\r\n            try {\r\n                Plotly.purge('comaprison_plot');\r\n            } catch (error) {\r\n                console.log('no plot to remove');\r\n\r\n            }\r\n            let methodResults = this.settings.getMethodResults.filter(m => m.datasetName == this.settings.datasetName && this.settings.classificationTask == m.modelTask)\r\n            this.compare = true;\r\n            let x = [];\r\n            let y = {};\r\n            let traces = [];\r\n            methodResults.forEach(result => {\r\n                let metrics = result.metrics;\r\n                x.push(result.name + '.' + result.id)\r\n                for (const key in result.metrics) {\r\n                    if (key != 'precision' && key != 'recall') {\r\n                        const metric = metrics[key];\r\n                        if (key in y) {\r\n                            y[key].push(metric);\r\n                        } else {\r\n                            y[key] = [];\r\n                            y[key].push(metric);\r\n\r\n                        }\r\n\r\n                    }\r\n                }\r\n\r\n            });\r\n            let i = 1;\r\n            for (const key in y) {\r\n                let trace = {\r\n                    x: x,\r\n                    y: y[key],\r\n                    name: key,\r\n                    xaxis: 'x' + i,\r\n                    yaxis: 'y' + i,\r\n                    type: 'scatter',\r\n                    marker: {\r\n                        color: 'rgb(158,202,225)',\r\n                        opacity: 0.6,\r\n                        line: {\r\n                            color: 'rgb(8,48,107)',\r\n                            width: 0.2\r\n                        }\r\n                    }\r\n                };\r\n                traces.push(trace);\r\n                i++;\r\n            }\r\n\r\n\r\n\r\n\r\n            var layout = {\r\n                grid: { rows: 1, columns: Object.keys(y).length, pattern: 'independent' },\r\n\r\n                height: 300,\r\n                margin: {\r\n                    l: 40,\r\n                    r: 40,\r\n                    b: 80,\r\n                    t: 10,\r\n                    pad: 10\r\n                },\r\n            };\r\n\r\n            Plotly.newPlot('comaprison_plot', traces, layout, { responsive: true });\r\n        },\r\n        resize(v) {\r\n            if (v === 0) {\r\n                this.compareResults()\r\n            }\r\n\r\n            window.dispatchEvent(new Event('resize'));\r\n        },\r\n        deleteResult(id) {\r\n            // eslint-disable-next-line no-unused-vars\r\n            let [tables, plots] = this.settings.getResultVisualizations(id);\r\n            tables.forEach(table => {\r\n                ui.removeTable(table)\r\n            });\r\n            plots.forEach(plot => {\r\n                Plotly.purge(plot);\r\n            });\r\n            this.settings.removeResult(id);\r\n\r\n        },\r\n        showMethodDetails(id) {\r\n            alert(id)\r\n\r\n        },\r\n    },\r\n}\r\n</script>\r\n\r\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\r\n<style scoped></style>","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./results-component.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./results-component.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./results-component.vue?vue&type=template&id=12596309&scoped=true\"\nimport script from \"./results-component.vue?vue&type=script&lang=js\"\nexport * from \"./results-component.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"12596309\",\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('section',{staticStyle:{\"overflow-y\":\"auto\",\"overflow-x\":\"auto\"}},[_c('article',{staticClass:\"message is-info\"},[_c('div',{staticClass:\"message-header\"},[_vm._v(\"Scatterplot Matrix \"),_c('b-tooltip',{attrs:{\"append-to-body\":\"\",\"label\":\"nrd method and guassian kernel is used for kernel density estimation.\",\"multilined\":\"\"}},[_c('b-button',{attrs:{\"icon-left\":\"info\",\"icon-pack\":\"fas\",\"size\":\"is-small\",\"type\":\"is-dark\"}})],1)],1),_c('div',{staticClass:\"message-body\"},[_c('div',{attrs:{\"id\":\"scatterplot_mtx\"}}),_c('div',{staticClass:\"columns my-1 ml-5 mt-5 is-multiline\",style:({ width: _vm.features.length * 100 + 'px' })},[_vm._l((this.settings.items.filter(column => column.selected)),function(feature){return _c('div',{key:feature.id,style:({ width: _vm.column_width + '%' })},[(feature.type == 1)?_c('b-field',{staticClass:\"ml-1\",attrs:{\"label\":feature.name,\"label-position\":'on-border'}},[_c('b-select',{attrs:{\"size\":\"is-small\"},on:{\"input\":function($event){return _vm.scaleData()}},model:{value:(feature.scaler),callback:function ($$v) {_vm.$set(feature, \"scaler\", $$v)},expression:\"feature.scaler\"}},_vm._l((_vm.ScaleOptions),function(option){return _c('option',{key:option.id,domProps:{\"value\":option.id}},[_vm._v(\" \"+_vm._s(option.name)+\" \")])}),0)],1):_c('p',{staticClass:\"title is-size-7 mt-1\"},[_vm._v(_vm._s(feature.name))])],1)}),_c('br')],2),_c('div',{staticClass:\"column is-12\"},[_c('parallel-coordinate-plot-component',{ref:\"coordinate_plot\"})],1),(this.settings.isClassification && _vm.classesInfo?.length > 2)?_c('div',{staticClass:\"column is-12\"},[_c('h5',{staticClass:\"title is-7 has-text-left\"},[_vm._v(\"Merge classes \")]),_c('b-table',{staticClass:\"is-size-7\",attrs:{\"data\":_vm.classesInfo,\"columns\":_vm.classesInfoColumns,\"checkable\":\"\",\"row-class\":(row, index) => row.mode <= 0.10 && 'has-text-danger',\"narrowed\":true,\"checked-rows\":_vm.selectedClasses},on:{\"update:checkedRows\":function($event){_vm.selectedClasses=$event},\"update:checked-rows\":function($event){_vm.selectedClasses=$event}}}),_c('button',{staticClass:\"button mt-2 is-info is-small\",attrs:{\"disabled\":_vm.selectedClasses?.length >= _vm.classesInfo?.length},on:{\"click\":function($event){return _vm.scaleData()}}},[_vm._v(\"Merge Classes\")]),_c('button',{staticClass:\"button mt-2 mx-1 is-success is-small\",on:{\"click\":function($event){return _vm.scaleData(true)}}},[_vm._v(\"reset\")])],1):_vm._e(),_c('b-loading',{attrs:{\"is-full-page\":false},model:{value:(_vm.isLoading),callback:function ($$v) {_vm.isLoading=$$v},expression:\"isLoading\"}})],1)])])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function render(){var _vm=this,_c=_vm._self._c;return _vm._m(0)\n}\nvar staticRenderFns = [function (){var _vm=this,_c=_vm._self._c;return _c('section',{staticClass:\"my-1\"},[_c('article',{staticClass:\"message\"},[_c('div',{staticClass:\"message-header\"},[_vm._v(\"Parallel Coordinate Plot\")]),_c('div',{staticClass:\"message-body\"},[_c('div',{attrs:{\"id\":\"parallel_coordinate_plot\"}})])])])\n}]\n\nexport { render, staticRenderFns }","<template>\r\n    <section class=\"my-1\">\r\n        <article class=\"message\">\r\n            <div class=\"message-header\">Parallel Coordinate Plot</div>\r\n            <div class=\"message-body\">\r\n                <div id=\"parallel_coordinate_plot\"></div>\r\n            </div>\r\n        </article>\r\n    </section>\r\n</template>\r\n\r\n<script>\r\nimport { settingStore } from '@/stores/settings'\r\nimport { ScaleOptions } from '@/helpers/settings'\r\nimport ChartController from '@/helpers/charts';\r\nlet chartController = new ChartController();\r\nimport { DataFrame } from 'danfojs/dist/danfojs-base';\r\nimport { applyDataTransformation } from '@/helpers/utils';\r\nimport Plotly from 'danfojs/node_modules/plotly.js-dist-min';\r\n\r\nexport default {\r\n    setup() {\r\n        const settings = settingStore()\r\n        return { settings }\r\n    },\r\n    name: 'ParallelCoordinatePlotComponent',\r\n    props: {\r\n        msg: String,\r\n        update: {}\r\n    },\r\n    data() {\r\n        return {\r\n            isLoading: false,\r\n            ScaleOptions: ScaleOptions,\r\n            features: [],\r\n            df: null,\r\n            rawData: null,\r\n        }\r\n    },\r\n    methods: {\r\n        ParallelCoordinatePlot() {\r\n            this.isLoading = true;\r\n            const df = new DataFrame(this.settings.rawData);\r\n            if (this.settings.isClassification && this.settings.classTransformations.length > 0) {\r\n                let selectedClasses = this.settings.classTransformations.concat()\r\n                let newClass = selectedClasses.map(m => m.class).join('-');\r\n                selectedClasses.forEach(cls => {\r\n                    df.replace(cls.class, newClass, { columns: [this.settings.modelTarget], inplace: true })\r\n                });\r\n            }\r\n\r\n            let validTransformations = this.settings.items.filter(column => column.selected && column.type === 1)\r\n            Plotly.purge('parallel_coordinate_plot')\r\n            applyDataTransformation(df, validTransformations.map(transformation => transformation.name), validTransformations);\r\n            let numericColumns = this.settings.items.filter(column => column.selected && column.type === 1).map(column => column.name);\r\n            chartController.parallelCoordinatePlot(df.loc({ columns: numericColumns }).values,\r\n                df.column(this.settings.modelTarget).values, numericColumns, this.settings.isClassification)\r\n            this.isLoading = false;\r\n\r\n        }\r\n\r\n    },\r\n\r\n\r\n}\r\n</script>\r\n\r\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\r\n<style scoped></style>","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./parallel-coordinate-plot-component.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./parallel-coordinate-plot-component.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./parallel-coordinate-plot-component.vue?vue&type=template&id=cde8a846&scoped=true\"\nimport script from \"./parallel-coordinate-plot-component.vue?vue&type=script&lang=js\"\nexport * from \"./parallel-coordinate-plot-component.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"cde8a846\",\n  null\n  \n)\n\nexport default component.exports","<template>\r\n    <section style=\"overflow-y: auto;overflow-x: auto;\">\r\n        <article class=\"message is-info\">\r\n            <div class=\"message-header\">Scatterplot Matrix <b-tooltip append-to-body\r\n                    label=\"nrd method and guassian kernel is used for kernel density estimation.\" multilined>\r\n                    <b-button icon-left=\"info\" icon-pack=\"fas\" size=\"is-small\" type=\"is-dark\" />\r\n                </b-tooltip></div>\r\n            <div class=\"message-body\">\r\n                <div id=\"scatterplot_mtx\"></div>\r\n                <div class=\"columns my-1 ml-5 mt-5 is-multiline\" :style=\"{ width: features.length * 100 + 'px' }\">\r\n                    <div :style=\"{ width: column_width + '%' }\"\r\n                        v-for=\"feature in this.settings.items.filter(column => column.selected)\" :key=\"feature.id\">\r\n                        <b-field :label=\"feature.name\" :label-position=\"'on-border'\" v-if=\"feature.type == 1\"\r\n                            class=\"ml-1\">\r\n                            <b-select @input=\"scaleData()\" size=\"is-small\" v-model=\"feature.scaler\">\r\n                                <option v-for=\"option in ScaleOptions\" :value=\"option.id\" :key=\"option.id\">\r\n                                    {{ option.name }}\r\n                                </option>\r\n                            </b-select>\r\n                        </b-field>\r\n                        <p class=\"title is-size-7 mt-1\" v-else>{{ feature.name }}</p>\r\n                    </div>\r\n                    <br>\r\n                </div>\r\n                <div class=\"column is-12\">\r\n                    <parallel-coordinate-plot-component ref=\"coordinate_plot\">\r\n                    </parallel-coordinate-plot-component>\r\n                </div>\r\n                <div class=\"column is-12\" v-if=\"this.settings.isClassification && classesInfo?.length > 2\">\r\n                    <h5 class=\"title is-7 has-text-left\">Merge classes\r\n                    </h5>\r\n                    <b-table class=\"is-size-7\" :data=\"classesInfo\" :columns=\"classesInfoColumns\" checkable\r\n                        :row-class=\"(row, index) => row.mode <= 0.10 && 'has-text-danger'\" :narrowed=\"true\"\r\n                        :checked-rows.sync=\"selectedClasses\"></b-table>\r\n                    <button @click=\"scaleData()\" class=\"button mt-2 is-info is-small\"\r\n                        :disabled=\"selectedClasses?.length >= classesInfo?.length\">Merge\r\n                        Classes</button>\r\n                    <button @click=\"scaleData(true)\" class=\"button mt-2 mx-1 is-success is-small\">reset</button>\r\n\r\n                </div>\r\n\r\n                <b-loading :is-full-page=\"false\" v-model=\"isLoading\"></b-loading>\r\n            </div>\r\n        </article>\r\n    </section>\r\n</template>\r\n\r\n<script>\r\nimport ChartController from '@/helpers/charts';\r\nimport { settingStore } from '@/stores/settings'\r\nimport { ScaleOptions } from '@/helpers/settings'\r\nimport { applyDataTransformation } from '@/helpers/utils';\r\nimport Plotly from 'danfojs/node_modules/plotly.js-dist-min';\r\nimport { DataFrame } from 'danfojs/dist/danfojs-base';\r\nimport PCPComponent from '../visualization/parallel-coordinate-plot-component.vue'\r\n\r\nlet chartController = new ChartController();\r\nexport default {\r\n    components: {\r\n        'parallel-coordinate-plot-component': PCPComponent,\r\n    },\r\n    setup() {\r\n        const settings = settingStore()\r\n        return { settings }\r\n    },\r\n    name: 'ScatterplotMatrixComponent',\r\n    props: {\r\n        msg: String,\r\n        update: {}\r\n    },\r\n    data() {\r\n        return {\r\n            isLoading: false,\r\n            ScaleOptions: ScaleOptions,\r\n            features: [],\r\n            df: null,\r\n            rawData: null,\r\n            classesInfo: [],\r\n            selectedClasses: [],\r\n            classesInfoColumns: [],\r\n        }\r\n    },\r\n    methods: {\r\n        async dispalySPLOM(dataframe) {\r\n            try {\r\n                this.isLoading = true;\r\n                let numericColumns = this.settings.items.filter(column => column.selected && column.type === 1).map(column => column.name);\r\n                let categorical_columns = this.settings.items.filter(column => column.selected && column.type !== 1).map(column => column.name);\r\n                let features = numericColumns.concat(categorical_columns);\r\n                dataframe.dropNa({ axis: 1, inplace: true })\r\n                await chartController.ScatterplotMatrix(dataframe.loc({ columns: features }).values, features, dataframe.column(this.settings.modelTarget).values, categorical_columns.length,\r\n                    this.settings.isClassification, numericColumns, categorical_columns, this.dataframe)\r\n                if (this.settings.isClassification) {\r\n\r\n                    let targetValues = this.settings.df.column(this.settings.modelTarget).values;\r\n                    let samplesLength = targetValues.length;\r\n                    let classes = new Set(...[targetValues]);\r\n                    let result = []\r\n                    classes.forEach(cls => {\r\n                        result.push({\r\n                            class: cls,\r\n                            mode: +(targetValues.filter(val => val === cls).length / samplesLength).toFixed(2)\r\n                        })\r\n                    });\r\n                    this.classesInfo = result;\r\n                    this.classesInfoColumns = [{\r\n                        field: 'class',\r\n                        label: ' class'\r\n                    }, {\r\n                        field: 'mode',\r\n                        label: 'Samples in each class (%)'\r\n                    }]\r\n                }\r\n                this.$refs.coordinate_plot?.ParallelCoordinatePlot()\r\n                this.isLoading = false;\r\n\r\n            } catch (error) {\r\n                let message = 'Something went wrong drawing data analysis plots'\r\n                this.$buefy.toast.open(message);\r\n                this.settings.addMessage({ message: message, type: 'warning' })\r\n            }\r\n        },\r\n        async scaleData(reset = false) {\r\n            this.df = new DataFrame(this.settings.rawData);\r\n            if (this.settings.isClassification && this.selectedClasses?.length > 0) {\r\n                let newClass = this.selectedClasses.map(m => m.class).join('-');\r\n                this.selectedClasses.forEach(cls => {\r\n                    this.df.replace(cls.class, newClass, { columns: [this.settings.modelTarget], inplace: true })\r\n                });\r\n                this.settings.setClassTransformation(this.selectedClasses)\r\n                let message = { message: 'merged classes: ' + newClass, type: 'info' }\r\n                this.$buefy.toast.open('merged classes: ' + newClass)\r\n                this.settings.addMessage(message)\r\n            }\r\n            if (reset) {\r\n                this.settings.setClassTransformation([])\r\n            }\r\n\r\n            let validTransformations = this.settings.items.filter(feature => feature.selected && feature.type === 1 && feature.scaler != 0)\r\n            this.isLoading = true;\r\n            Plotly.purge('scatterplot_mtx')\r\n            applyDataTransformation(this.df, validTransformations.map(transformation => transformation.name), validTransformations);\r\n            await this.dispalySPLOM(this.df)\r\n            this.isLoading = false;\r\n            this.selectedClasses = []\r\n\r\n            if (validTransformations.length > 0) {\r\n                let transformations = []\r\n                validTransformations.forEach(transformation => {\r\n                    let transformationInfo = Object.keys(ScaleOptions).find(key => ScaleOptions[key].id == transformation.scaler);\r\n                    transformation.scalerLabel = transformationInfo\r\n                    this.settings.addTransformation(transformation)\r\n                    transformations.push(`feature: ${transformation['name']} ,scaler: ${transformation['scalerLabel']} `)\r\n                });\r\n\r\n                let message = { message: 'scaled fetures: <br> ' + transformations.join('-'), type: 'info' }\r\n                this.$buefy.toast.open('scaled fetures: ' + transformations)\r\n                this.settings.addMessage(message)\r\n            } else {\r\n                this.settings.resetTransformations();\r\n            }\r\n\r\n            this.$emit('coordinate-plot', true)\r\n        },\r\n        async initSPLOM() {\r\n            this.df = new DataFrame(this.settings.rawData);\r\n            this.df = await this.df.sample(this.df.$data.length, { seed: this.settings.getSeed });\r\n            this.df.dropNa({ axis: 1, inplace: true })\r\n            let numericColumns = this.settings.items.filter(column => column.selected && column.type === 1).map(function (column) {\r\n                return { 'name': column.name, type: column.type }\r\n            });\r\n            let categorical_columns = this.settings.items.filter(column => column.selected && column.type !== 1).map(function (column) {\r\n                return { 'name': column.name, type: column.type }\r\n            })\r\n            let features = numericColumns.concat(categorical_columns);\r\n            this.features = features.map((feature, i) => {\r\n                return {\r\n                    id: i,\r\n                    name: feature.name,\r\n                    type: feature.type,\r\n                    scaler: 0\r\n                }\r\n            })\r\n            this.dispalySPLOM(this.df)\r\n\r\n        }\r\n    },\r\n    created: async function () {\r\n        await this.initSPLOM()\r\n    },\r\n    computed: {\r\n        column_width: {\r\n            get() {\r\n                return this.features.length === 0 ? 0 : 100 / this.features.length\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n</script>\r\n\r\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\r\n<style scoped></style>","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./scatterplot-matrix-component.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./scatterplot-matrix-component.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./scatterplot-matrix-component.vue?vue&type=template&id=4deee124&scoped=true\"\nimport script from \"./scatterplot-matrix-component.vue?vue&type=script&lang=js\"\nexport * from \"./scatterplot-matrix-component.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"4deee124\",\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('section',{staticClass:\"has-text-left content\"},[_c('h4',{staticClass:\"title is-medium is-5\",attrs:{\"id\":\"help\"}},[_vm._v(\"Classification metrics \")]),_c('p',[_vm._v(\" In a context of a binary classification, here are the main metrics that are important to track in order to assess the performance of the model. \")]),_vm._m(0),_c('h4',{staticClass:\"title is-medium is-5\"},[_vm._v(\"Regression metrics \")]),_c('ul',[_c('li',[_vm._v(\" Basic metricsGiven a regression model \"),_c('i',[_vm._v(\"f\")]),_vm._v(\", the following metrics are commonly used to assess the performance of the model: \"),_c('table',{staticClass:\"table is-bordered\"},[_vm._m(1),_c('tbody',[_c('tr',[_c('td',[_c('vue-mathjax',{attrs:{\"formula\":'$$ SS_{tot}= \\\\sum_{i=1}^{m} (y_i - \\\\hat{y}_i)^2$$'}})],1),_c('td',[_c('vue-mathjax',{attrs:{\"formula\":'$$ SS_{reg}= \\\\sum_{i=1}^{m} (f (x_i) - \\\\hat{y}_i)^2$$'}})],1),_c('td',[_c('vue-mathjax',{attrs:{\"formula\":'$$ SS_{res}= \\\\sum_{i=1}^{m} (y_i - f (x_i))^2$$'}})],1)])])])]),_c('li',[_vm._v(\" Coefficient of determination: The coefficient of determination, often noted \"),_c('i',[_vm._v(\"R\")]),_c('sup',[_vm._v(\"2\")]),_vm._v(\" , provides a measure of how well the observed outcomes are replicated by the model and is defined as follows: \"),_c('vue-mathjax',{attrs:{\"formula\":'$$ R^2 = 1 - \\\\frac{SS_{res}}{SS_{tot}}$$'}})],1),_c('li',[_vm._v(\" Main metrics: The following metrics are commonly used to assess the performance of regression models, by taking into account the number of variables n that they take into consideration: \"),_c('table',{staticClass:\"table is-bordered\"},[_vm._m(2),_c('tbody',[_c('tr',[_c('td',[_c('vue-mathjax',{attrs:{\"formula\":'$$ 2[n + 2 - \\\\log (L)]$$'}})],1),_c('td',[_c('vue-mathjax',{attrs:{\"formula\":'$$ \\\\log (m)(n + 2) - 2 \\\\log (L)$$'}})],1),_c('td',[_c('vue-mathjax',{attrs:{\"formula\":'$$ 1 - \\\\frac{(1-R^2)(m-1)}{m-n-1}$$'}})],1)])])])])]),_c('h4',{staticClass:\"title is-medium is-5\",attrs:{\"id\":\"1_help\"}},[_vm._v(\"Model Selection \")]),_c('h5',[_vm._v(\" When selecting a model, we distinguish 3 different parts of the data that we have as follows: \")]),_vm._m(3),_c('p',[_vm._v(\" Once the model has been chosen, it is trained on the entire dataset and tested on the unseen test set. These are represented in the figure below:\")]),_c('p',[_vm._v(\" Cross-validation, also noted CV, is a method that is used to select a model that does not rely too much on the initial training set. The different types are summed up in the table below: \")]),_vm._m(4),_vm._m(5),_c('p',[_vm._v(\" regularization: The regularization procedure aims at avoiding the model to overfit the data and thus deals with high variance issues. The following table sums up the different types of commonly used regularization techniques: \")]),_c('h4',{staticClass:\"title is-medium is-5\"},[_vm._v(\"Supervised Learning \")]),_vm._m(6),_c('h4',{staticClass:\"title is-medium is-5\",attrs:{\"id\":\"svm_help\"}},[_vm._v(\"Support Vector Machine\")]),_c('p',[_vm._v(\" The goal of support vector machines is to find the line that maximizes the minimum distance to the line. \")]),_vm._v(\" Optimal margin classifier: The optimal margin classifier (h) is such that: \"),_c('vue-mathjax',{attrs:{\"formula\":'$$ h(x) = sign(w^T x - b) $$'}}),_vm._v(\" where (w,b \\\\in R^2) is the solution of the following optimization problem: \"),_c('img',{attrs:{\"src\":\"/svm-en.png\",\"height\":\"150px\",\"width\":\"70%\"}}),_c('h4',{staticClass:\"title is-medium is-5\",attrs:{\"id\":\"naive_bayes_help\"}},[_vm._v(\"Naive Bayes\")]),_c('ul',[_c('li',[_vm._v(\" Assumption: The Naive Bayes model supposes that the features of each data point are all independent: \"),_c('vue-mathjax',{attrs:{\"formula\":'$$ P(x | y) = P(x_1,x_2,...|y) = P(x_1 |y )  P(x_2 |y ) $$'}})],1)]),_c('h4',{staticClass:\"title is-medium is-5\",attrs:{\"id\":\"cart_help\"}},[_vm._v(\"Tree-based and ensemble methods\")]),_c('p',[_vm._v(\" These methods can be used for both regression and classification problems. \")]),_vm._m(7),_c('h4',{staticClass:\"title is-medium\",attrs:{\"id\":\"knn_help\"}},[_vm._v(\"(k)-nearest neighbors\")]),_c('p',[_vm._v(\" (k)-nearest neighbors: The (k)-nearest neighbors algorithm, commonly known as (k)-NN, is a non-parametric approach where the response of a data point is determined by the nature of its (k) neighbors from the training set. It can be used in both classification and regression settings. \")]),_c('img',{staticClass:\"image\",attrs:{\"src\":\"/knn.png\"}}),_c('h4',{staticClass:\"title is-medium\",attrs:{\"id\":\"discriminant_analysis_help\"}},[_vm._v(\" Gaussian Discriminant Anallysis \")]),_c('p',[_vm._v(\" Gaussian Discriminant Analysis SettingThe Gaussian Discriminant Analysis assumes that (y) and (x ∣ y = 0) and (x|y = 1) are such that: \"),_c('vue-mathjax',{attrs:{\"formula\":'$$ y \\\\sim Bernoulli(\\\\phi)   ,   x|y = 0 \\\\sim \\\\mathcal{N(\\\\mu_0,\\\\Sigma)}$$'}})],1),_c('h4',[_vm._v(\"Partial Dependence Plot\")]),_c('p',[_vm._v(\" The partial dependence plot (short PDP or PD plot) shows the marginal effect one or two features have on the predicted outcome of a machine learning model. A partial dependence plot can show whether the relationship between the target and a feature is linear, monotonic or more complex. For example, when applied to a linear regression model, partial dependence plots always show a linear relationship. The partial dependence function for regression is defined as: \"),_c('vue-mathjax',{attrs:{\"formula\":'$$ f_s(x_s) = \\\\int{f(x_s,x_c)dP(x_c)}$$'}}),_vm._v(\" The x\"),_c('sub',[_vm._v(\"s\")]),_vm._v(\" are the features for which the partial dependence function should be plotted and X\"),_c('sub',[_vm._v(\"c\")]),_vm._v(\" are the other features used in the machine learning model ^ f , which are here treated as random variables. Usually, there are only one or two features in the set S. The feature(s) in S are those for which we want to know the effect on the prediction. The feature vectors X\"),_c('sub',[_vm._v(\"s\")]),_vm._v(\" and X\"),_c('sub',[_vm._v(\"c\")]),_vm._v(\" combined make up the total feature space x. Partial dependence works by marginalizing the machine learning model output over the distribution of the features in set C, so that the function shows the relationship between the features in set S we are interested in and the predicted outcome. By marginalizing over the other features, we get a function that depends only on features in S, interactions with other features included. The partial function ^ f S is estimated by calculating averages in the training data, also known as Monte Carlo method: \"),_c('vue-mathjax',{attrs:{\"formula\":'$$ f_s(x_s) = \\\\frac{1}{n} \\\\sum_{n = 1}^{n} f(x_s,x_c)$$'}}),_vm._v(\" The partial function tells us for given value(s) of features S what the average marginal effect on the prediction is. In this formula, x ( i ) C are actual feature values from the dataset for the features in which we are not interested, and n is the number of instances in the dataset. An assumption of the PDP is that the features in C are not correlated with the features in S. If this assumption is violated, the averages calculated for the partial dependence plot will include data points that are very unlikely or even impossible (see disadvantages). For classification where the machine learning model outputs probabilities, the partial dependence plot displays the probability for a certain class given different values for feature(s) in S. An easy way to deal with multiple classes is to draw one line or plot per class. The partial dependence plot is a global method: The method considers all instances and gives a statement about the global relationship of a feature with the predicted outcome. \")],1),_c('h4',[_vm._v(\"Categorical features\")]),_c('p',[_vm._v(\" So far, we have only considered numerical features. For categorical features, the partial dependence is very easy to calculate. For each of the categories, we get a PDP estimate by forcing all data instances to have the same category. For example, if we look at the bike rental dataset and are interested in the partial dependence plot for the season, we get four numbers, one for each season. To compute the value for “summer”, we replace the season of all data instances with “summer” and average the predictions. \")])],1)\n}\nvar staticRenderFns = [function (){var _vm=this,_c=_vm._self._c;return _c('ul',[_c('li',[_vm._v(\" Confusion matrix: The confusion matrix is used to have a more complete picture when assessing the performance of a model. It is defined as follows: \")]),_c('li',[_vm._v(\" Main metrics: The following metrics are commonly used to assess the performance of classification models: \")]),_c('li',[_vm._v(\" The receiver operating curve, also noted ROC, is the plot of TPR versus FPR by varying the threshold. These metrics are are summed up in the table below: \")]),_c('li',[_vm._v(\" The area under the receiving operating curve, also noted AUC or AUROC, is the area below the ROC as shown in the following figure: \")])])\n},function (){var _vm=this,_c=_vm._self._c;return _c('thead',[_c('tr',[_c('th',{staticClass:\"is-success\"},[_vm._v(\"Total sum of squares\")]),_c('th',{staticClass:\"is-success\"},[_vm._v(\"Explained sum of squares \")]),_c('th',{staticClass:\"is-success\"},[_vm._v(\"Residual sum of squares \")])])])\n},function (){var _vm=this,_c=_vm._self._c;return _c('thead',[_c('tr',[_c('th',{staticClass:\"is-success\"},[_vm._v(\"AIC\")]),_c('th',{staticClass:\"is-success\"},[_vm._v(\"BIC\")]),_c('th',{staticClass:\"is-success\"},[_vm._v(\"Adjusted R2 \")])])])\n},function (){var _vm=this,_c=_vm._self._c;return _c('table',{staticClass:\"table is-bordered\"},[_c('thead',[_c('tr',[_c('th',{staticClass:\"is-success\"},[_vm._v(\"Training set\")]),_c('th',{staticClass:\"is-success\"},[_vm._v(\"Validation set \")]),_c('th',{staticClass:\"is-success\"},[_vm._v(\"Testing set \")])])]),_c('tbody',[_c('tr',[_c('td',[_c('ul',[_c('li',[_vm._v(\" Model is trained\")]),_c('li',[_vm._v(\" Usually 80% of the dataset\")])])]),_c('td',[_c('ul',[_c('li',[_vm._v(\"Model is assessed\")]),_c('li',[_vm._v(\"Usually 20% of the dataset\")]),_c('li',[_vm._v(\"Also called hold-out or development set\")])])]),_c('td',[_c('ul',[_c('li',[_vm._v(\" Model gives predictions\")]),_c('li',[_vm._v(\"Unseen data\")])])])])])])\n},function (){var _vm=this,_c=_vm._self._c;return _c('table',{staticClass:\"table is-bordered\"},[_c('thead',[_c('tr',[_c('th',{staticClass:\"is-success\"},[_vm._v(\"k-fold\")]),_c('th',{staticClass:\"is-success\"},[_vm._v(\"Leave-p-out\")])])]),_c('tbody',[_c('tr',[_c('td',[_c('ul',[_c('li',[_vm._v(\" Model is trained\")]),_c('li',[_vm._v(\" Usually 80% of the dataset\")])])]),_c('td',[_c('ul',[_c('li',[_vm._v(\"Model is assessed\")]),_c('li',[_vm._v(\"Usually 20% of the dataset\")]),_c('li',[_vm._v(\"Also called hold-out or development set\")])])])])])])\n},function (){var _vm=this,_c=_vm._self._c;return _c('p',[_vm._v(\" The most commonly used method is called k-fold cross-validation and splits the training data into k folds to validate the model on one fold while training the model on the k−1 other folds, all of this k times. The error is then averaged over the k folds and is named cross-validation error. \"),_c('img',{staticClass:\"image\",attrs:{\"src\":\"/cross-validation-en.png\",\"alt\":\"\"}})])\n},function (){var _vm=this,_c=_vm._self._c;return _c('ul',[_c('li',[_vm._v(\"Type of prediction: The different types of predictive models are summed up in the table below: \"),_c('table',{staticClass:\"table is-bordered\"},[_c('thead',[_c('tr',[_c('th',{staticClass:\"is-success\"}),_c('th',{staticClass:\"is-success\"},[_vm._v(\"Regression\")]),_c('th',{staticClass:\"is-success\"},[_vm._v(\"Classification\")])])]),_c('tbody',[_c('tr',[_c('td',[_vm._v(\"Outcome\")]),_c('td',[_vm._v(\"Continuous\")]),_c('td',[_vm._v(\"Class\")])]),_c('tr',[_c('td',[_vm._v(\"Examples\")]),_c('td',[_vm._v(\"Linear regression \")]),_c('td',[_vm._v(\"Logistic regression, SVM, Naive Bayes \")])])])])])])\n},function (){var _vm=this,_c=_vm._self._c;return _c('ul',[_c('li',[_vm._v(\" Classification and Regression Trees (CART), commonly known as decision trees, can be represented as binary trees. They have the advantage to be very interpretable. \")]),_c('li',[_vm._v(\" Random forestIt is a tree-based technique that uses a high number of decision trees built out of randomly selected sets of features. Contrary to the simple decision tree, it is highly uninterpretable but its generally good performance makes it a popular algorithm. \")]),_c('li',[_vm._v(\" BoostingThe idea of boosting methods is to combine several weak learners to form a stronger one. The main ones are summed up in the table below: \")]),_c('li',[_vm._v(\" Adaptive boosting Gradient boosting • High weights are put on errors to improve at the next boosting step • Known as Adaboost • Weak learners are trained on residuals • Examples include XGBoost \")])])\n}]\n\nexport { render, staticRenderFns }","<template>\r\n    <section class=\"has-text-left content\">\r\n        <h4 class=\"title is-medium is-5\" id=\"help\">Classification metrics\r\n        </h4>\r\n        <p>\r\n            In a context of a binary classification, here are the main metrics that are important to track in order to\r\n            assess the performance of the model.\r\n        </p>\r\n        <ul>\r\n            <li>\r\n                Confusion matrix: The confusion matrix is used to have a more complete picture when assessing the\r\n                performance of a model. It is defined as follows:\r\n            </li>\r\n            <li>\r\n                Main metrics: The following metrics are commonly used to assess the performance of classification\r\n                models:\r\n            </li>\r\n            <li>\r\n                The receiver operating curve, also noted ROC, is the plot of TPR versus FPR by varying the threshold.\r\n                These metrics are are summed up in the table below:\r\n            </li>\r\n            <li>\r\n                The area under the receiving operating curve, also noted AUC or AUROC, is the area below the ROC as\r\n                shown in the following figure:\r\n            </li>\r\n        </ul>\r\n        <h4 class=\"title is-medium is-5\">Regression metrics\r\n        </h4>\r\n        <ul>\r\n            <li>\r\n                Basic metricsGiven a regression model <i>f</i>, the following metrics are commonly used to assess the\r\n                performance of the model:\r\n                <table class=\"table is-bordered\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th class=\"is-success\">Total sum of squares</th>\r\n                            <th class=\"is-success\">Explained sum of squares </th>\r\n                            <th class=\"is-success\">Residual sum of squares </th>\r\n\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td>\r\n                                <vue-mathjax\r\n                                    :formula=\"'$$ SS_{tot}= \\\\sum_{i=1}^{m} (y_i - \\\\hat{y}_i)^2$$'\"></vue-mathjax>\r\n                            </td>\r\n                            <td> <vue-mathjax\r\n                                    :formula=\"'$$ SS_{reg}= \\\\sum_{i=1}^{m} (f (x_i) - \\\\hat{y}_i)^2$$'\"></vue-mathjax>\r\n                            </td>\r\n                            <td> <vue-mathjax\r\n                                    :formula=\"'$$ SS_{res}= \\\\sum_{i=1}^{m} (y_i - f (x_i))^2$$'\"></vue-mathjax></td>\r\n\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </li>\r\n            <li>\r\n                Coefficient of determination: The coefficient of determination, often noted\r\n                <i>R</i><sup>2</sup>\r\n                , provides a measure of how well the observed outcomes are replicated by the model and is defined as\r\n                follows:\r\n                <vue-mathjax :formula=\"'$$ R^2 = 1 - \\\\frac{SS_{res}}{SS_{tot}}$$'\"></vue-mathjax>\r\n            </li>\r\n            <li>\r\n                Main metrics: The following metrics are commonly used to assess the performance of regression models, by\r\n                taking into account the number of variables\r\n                n that they take into consideration:\r\n                <table class=\"table is-bordered\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th class=\"is-success\">AIC</th>\r\n                            <th class=\"is-success\">BIC</th>\r\n                            <th class=\"is-success\">Adjusted R2 </th>\r\n\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td>\r\n                                <vue-mathjax :formula=\"'$$ 2[n + 2 - \\\\log (L)]$$'\"></vue-mathjax>\r\n                            </td>\r\n                            <td> <vue-mathjax :formula=\"'$$ \\\\log (m)(n + 2) - 2 \\\\log (L)$$'\"></vue-mathjax>\r\n                            </td>\r\n                            <td> <vue-mathjax :formula=\"'$$ 1 - \\\\frac{(1-R^2)(m-1)}{m-n-1}$$'\"></vue-mathjax></td>\r\n\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </li>\r\n        </ul>\r\n        <h4 class=\"title is-medium is-5\" id=\"1_help\">Model Selection\r\n        </h4>\r\n        <h5>\r\n            When selecting a model, we distinguish 3 different parts of the data that we have as follows:\r\n        </h5>\r\n        <table class=\"table is-bordered\">\r\n            <thead>\r\n                <tr>\r\n                    <th class=\"is-success\">Training set</th>\r\n                    <th class=\"is-success\">Validation set </th>\r\n                    <th class=\"is-success\">Testing set\r\n                    </th>\r\n\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <tr>\r\n                    <td>\r\n                        <ul>\r\n                            <li> Model is trained</li>\r\n                            <li> Usually 80% of the dataset</li>\r\n                        </ul>\r\n                    </td>\r\n                    <td>\r\n                        <ul>\r\n                            <li>Model is assessed</li>\r\n                            <li>Usually 20% of the dataset</li>\r\n                            <li>Also called hold-out or development set</li>\r\n                        </ul>\r\n                    </td>\r\n                    <td>\r\n                        <ul>\r\n                            <li> Model gives predictions</li>\r\n                            <li>Unseen data</li>\r\n                        </ul>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n        <p> Once the model has been chosen, it is trained on the entire dataset and tested on the unseen test set.\r\n            These\r\n            are represented in the figure below:</p>\r\n        <p>\r\n            Cross-validation, also noted CV, is a method that is used to select a model that does not rely too much on\r\n            the initial training set. The different types are summed up in the table below:\r\n        </p>\r\n        <table class=\"table is-bordered\">\r\n            <thead>\r\n                <tr>\r\n                    <th class=\"is-success\">k-fold</th>\r\n                    <th class=\"is-success\">Leave-p-out</th>\r\n\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <tr>\r\n                    <td>\r\n                        <ul>\r\n                            <li> Model is trained</li>\r\n                            <li> Usually 80% of the dataset</li>\r\n                        </ul>\r\n                    </td>\r\n                    <td>\r\n                        <ul>\r\n                            <li>Model is assessed</li>\r\n                            <li>Usually 20% of the dataset</li>\r\n                            <li>Also called hold-out or development set</li>\r\n                        </ul>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n        <p>\r\n            The most commonly used method is called\r\n            k-fold cross-validation and splits the training data into\r\n            k folds to validate the model on one fold while training the model on the k−1 other folds, all of this\r\n            k times. The error is then averaged over the k folds and is named cross-validation error.\r\n            <img class=\"image\" src=\"/cross-validation-en.png\" alt=\"\">\r\n        </p>\r\n        <p>\r\n            regularization: The regularization procedure aims at avoiding the model to overfit the data and thus deals\r\n            with high\r\n            variance issues. The following table sums up the different types of commonly used regularization techniques:\r\n        </p>\r\n        <h4 class=\"title is-medium is-5\">Supervised Learning\r\n        </h4>\r\n        <ul>\r\n            <li>Type of prediction: The different types of predictive models are summed up in the table below:\r\n\r\n                <table class=\"table is-bordered\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th class=\"is-success\"></th>\r\n                            <th class=\"is-success\">Regression</th>\r\n                            <th class=\"is-success\">Classification</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td>Outcome</td>\r\n                            <td>Continuous</td>\r\n                            <td>Class</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Examples</td>\r\n                            <td>Linear regression </td>\r\n                            <td>Logistic regression, SVM, Naive Bayes\r\n                            </td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </li>\r\n        </ul>\r\n        <h4 class=\"title is-medium is-5\" id=\"svm_help\">Support Vector Machine</h4>\r\n        <p>\r\n            The goal of support vector machines is to find the line that maximizes the minimum distance to the line.\r\n        </p>\r\n        Optimal margin classifier: The optimal margin classifier (h) is such that:\r\n        <vue-mathjax :formula=\"'$$ h(x) = sign(w^T x - b) $$'\"></vue-mathjax>\r\n        where (w,b \\in R^2) is the solution of the following optimization problem:\r\n        <img src=\"/svm-en.png\" height=\"150px\" width=\"70%\">\r\n\r\n        <h4 class=\"title is-medium is-5\" id=\"naive_bayes_help\">Naive Bayes</h4>\r\n        <ul>\r\n            <li>\r\n                Assumption: The Naive Bayes model supposes that the features of each data point are all independent:\r\n                <vue-mathjax :formula=\"'$$ P(x | y) = P(x_1,x_2,...|y) = P(x_1 |y )  P(x_2 |y ) $$'\"></vue-mathjax>\r\n\r\n            </li>\r\n        </ul>\r\n        <h4 class=\"title is-medium is-5\" id=\"cart_help\">Tree-based and ensemble methods</h4>\r\n        <p> These methods can be used for both regression and classification problems.\r\n        </p>\r\n        <ul>\r\n            <li>\r\n                Classification and Regression Trees (CART), commonly known as decision trees, can be represented as\r\n                binary\r\n                trees. They have the advantage to be very interpretable.\r\n            </li>\r\n            <li>\r\n                Random forestIt is a tree-based technique that uses a high number of decision trees built out of\r\n                randomly\r\n                selected\r\n                sets of features. Contrary to the simple decision tree, it is highly uninterpretable but its generally\r\n                good\r\n                performance makes it a popular algorithm.\r\n            </li>\r\n            <li>\r\n\r\n                BoostingThe idea of boosting methods is to combine several weak learners to form a stronger one. The\r\n                main\r\n                ones are\r\n                summed up in the table below:\r\n            </li>\r\n            <li> Adaptive boosting Gradient boosting\r\n                • High weights are put on errors to improve at the next boosting step\r\n                • Known as Adaboost •\r\n                Weak learners are trained on residuals\r\n                • Examples include XGBoost\r\n            </li>\r\n        </ul>\r\n        <h4 class=\"title is-medium\" id=\"knn_help\">(k)-nearest neighbors</h4>\r\n        <p>\r\n            (k)-nearest neighbors: The\r\n            (k)-nearest neighbors algorithm, commonly known as\r\n            (k)-NN, is a non-parametric approach where the response of a data point is determined by the nature of its\r\n            (k) neighbors from the training set. It can be used in both classification and regression settings.\r\n        </p>\r\n        <img src=\"/knn.png\" class=\"image\">\r\n\r\n\r\n        <h4 class=\"title is-medium\" id=\"discriminant_analysis_help\"> Gaussian Discriminant Anallysis </h4>\r\n        <p>\r\n            Gaussian Discriminant Analysis\r\n            SettingThe Gaussian Discriminant Analysis assumes that\r\n            (y) and (x ∣ y = 0) and (x|y = 1) are such that:\r\n            <vue-mathjax\r\n                :formula=\"'$$ y \\\\sim Bernoulli(\\\\phi)   ,   x|y = 0 \\\\sim \\\\mathcal{N(\\\\mu_0,\\\\Sigma)}$$'\"></vue-mathjax>\r\n\r\n        </p>\r\n        <h4>Partial Dependence Plot</h4>\r\n        <p>\r\n            The partial dependence plot (short PDP or PD plot) shows the marginal effect one or two features have on the\r\n            predicted outcome of a machine learning model. A partial dependence plot can show\r\n            whether the relationship between the target and a feature is linear, monotonic or more complex. For example,\r\n            when applied to a linear regression model, partial dependence plots always show a linear relationship.\r\n\r\n            The partial dependence function for regression is defined as:\r\n            <vue-mathjax :formula=\"'$$ f_s(x_s) = \\\\int{f(x_s,x_c)dP(x_c)}$$'\"></vue-mathjax>\r\n            The x<sub>s</sub>\r\n            are the features for which the partial dependence function should be plotted and\r\n            X<sub>c</sub>\r\n            are the other features used in the machine learning model\r\n            ^\r\n            f\r\n            , which are here treated as random variables. Usually, there are only one or two features in the set S. The\r\n            feature(s) in S are those for which we want to know the effect on the prediction. The feature vectors\r\n            X<sub>s</sub>\r\n            and\r\n            X<sub>c</sub>\r\n            combined make up the total feature space x. Partial dependence works by marginalizing the machine learning\r\n            model output over the distribution of the features in set C, so that the function shows the relationship\r\n            between the features in set S we are interested in and the predicted outcome. By marginalizing over the\r\n            other features, we get a function that depends only on features in S, interactions with other features\r\n            included.\r\n\r\n            The partial function\r\n            ^\r\n            f\r\n            S\r\n            is estimated by calculating averages in the training data, also known as Monte Carlo method:\r\n\r\n            <vue-mathjax :formula=\"'$$ f_s(x_s) = \\\\frac{1}{n} \\\\sum_{n = 1}^{n} f(x_s,x_c)$$'\"></vue-mathjax>\r\n\r\n            The partial function tells us for given value(s) of features S what the average marginal effect on the\r\n            prediction is. In this formula,\r\n            x\r\n            (\r\n            i\r\n            )\r\n            C\r\n            are actual feature values from the dataset for the features in which we are not interested, and n is the\r\n            number of instances in the dataset. An assumption of the PDP is that the features in C are not correlated\r\n            with the features in S. If this assumption is violated, the averages calculated for the partial dependence\r\n            plot will include data points that are very unlikely or even impossible (see disadvantages).\r\n\r\n            For classification where the machine learning model outputs probabilities, the partial dependence plot\r\n            displays the probability for a certain class given different values for feature(s) in S. An easy way to deal\r\n            with multiple classes is to draw one line or plot per class.\r\n\r\n            The partial dependence plot is a global method: The method considers all instances and gives a statement\r\n            about the global relationship of a feature with the predicted outcome.\r\n        </p>\r\n        <h4>Categorical features</h4>\r\n        <p>\r\n            So far, we have only considered numerical features. For categorical features, the partial dependence is very\r\n            easy to calculate. For each of the categories, we get a PDP estimate by forcing all data instances to have\r\n            the same category. For example, if we look at the bike rental dataset and are interested in the partial\r\n            dependence plot for the season, we get four numbers, one for each season. To compute the value for “summer”,\r\n            we replace the season of all data instances with “summer” and average the predictions.\r\n        </p>\r\n    </section>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    name: 'MethodsTabComponent',\r\n    data() {\r\n        return {\r\n            formula: '$$x = {-b \\\\pm \\\\sqrt{b^2-4ac} \\\\over 2a}.$$',\r\n            sserror: '$$ SS_{tot}= \\\\sum_{i=1}^{m} (y_i - \\\\hat{y}_i)^2$$'\r\n        }\r\n    }\r\n}\r\n</script>\r\n<style>\r\n.demo-container {\r\n    text-align: center;\r\n}\r\n</style>\r\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./methods-tab-component.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./methods-tab-component.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./methods-tab-component.vue?vue&type=template&id=3aa35bd6\"\nimport script from \"./methods-tab-component.vue?vue&type=script&lang=js\"\nexport * from \"./methods-tab-component.vue?vue&type=script&lang=js\"\nimport style0 from \"./methods-tab-component.vue?vue&type=style&index=0&id=3aa35bd6&prod&lang=css\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","const pyodideWorker = new Worker(new URL('./sns-py.js', import.meta.url))\r\n\r\nconst callbacks = {};\r\n\r\npyodideWorker.onmessage = (event) => {\r\n    const { id, ...data } = event.data;\r\n    const onSuccess = callbacks[id];\r\n    delete callbacks[id];\r\n    onSuccess(data);\r\n};\r\n\r\nconst asyncRun = (() => {\r\n    let id = 0; // identify a Promise\r\n    return (script, context) => {\r\n        // the id could be generated more carefully\r\n        id = (id + 1) % Number.MAX_SAFE_INTEGER;\r\n        return new Promise((onSuccess) => {\r\n            callbacks[id] = onSuccess;\r\n            pyodideWorker.postMessage({\r\n                ...context,\r\n                python: script,\r\n                id,\r\n            });\r\n        });\r\n    };\r\n})();\r\n\r\nexport { asyncRun };","import { asyncRun } from \"@/helpers/sns-worker\";\r\n\r\n\r\nexport default class Clustermap {\r\n    constructor() {\r\n        this.model = null;\r\n\r\n    }\r\n    async train(x_train, columns, metric, method) {\r\n        this.context = {\r\n            X_train: x_train,\r\n            columns: columns,\r\n            metric: metric,\r\n            method: method,\r\n        };\r\n        const script = `\r\n        import matplotlib\r\n        matplotlib.use(\"AGG\")\r\n        import matplotlib.pyplot as plt\r\n        from js import X_train,columns,method,metric\r\n        import seaborn as sns\r\n        import pandas as pd\r\n\r\n        sns.set(font_scale=1.5)\r\n        df = pd.DataFrame(X_train,columns = columns)\r\n        plt.figure(figsize=(12, 8))\r\n        plot = sns.clustermap(df.corr(),cmap=\"YlGnBu_r\",annot = True, fmt=\".2f\",method=method,metric=metric)\r\n        reordered_index = plot.dendrogram_row.reordered_ind\r\n        reordered_columns = plot.dendrogram_col.reordered_ind\r\n        clustered_corr = df.corr().iloc[reordered_index, :].iloc[:, reordered_columns]\r\n\r\n        Z = plot.dendrogram_col.linkage  \r\n        Z,clustered_corr.values,clustered_corr.columns.tolist()\r\n        `;\r\n        try {\r\n            const { results, error } = await asyncRun(script, this.context);\r\n            if (results) {\r\n                return results;\r\n            } else if (error) {\r\n                console.log(\"pyodideWorker error: \", error);\r\n            }\r\n        } catch (e) {\r\n            throw Error(`Error in pyodideWorker at ${e.filename}, Line: ${e.lineno}, ${e.message}`,)\r\n\r\n        }\r\n\r\n    }\r\n\r\n}","<template>\r\n    <div class=\"column is-10\">\r\n        <section>\r\n            <b-tabs v-model=\"settings.activeTab\" :position=\"'is-centered'\" :animated=\"false\" type=\"success\"\r\n                @input=\"resize()\">\r\n                <b-tab-item label=\"Data Analysis\" icon=\"search\" icon-pack=\"fas\">\r\n                    <section v-if=\"this.settings.datasetShape?.count > 0\">\r\n                        <div class=\"message is-info\" v-if=\"isActive\" :closable=\"false\">\r\n                            <div class=\"message-header\">Data summary</div>\r\n                            <div class=\"message-body\">\r\n                                <div class=\"columns is-multiline\">\r\n                                    <div class=\"column is-12 has-text-left\">\r\n                                        <p class=\"title is-7\"> Data Shape : ({{ this.settings.datasetShape.count }},{{\r\n                                            this.settings.datasetShape.columns\r\n                                            }})</p>\r\n                                    </div>\r\n                                    <div class=\"column is-6\">\r\n                                        <h5 class=\"title is-7 has-text-left\">Continuous Features:\r\n                                            <button class=\"button is-small\" @click=\"applyChanges()\">apply</button>\r\n                                        </h5>\r\n                                        <table class=\"table is-size-7\">\r\n                                            <thead>\r\n                                                <tr>\r\n                                                    <th></th>\r\n                                                    <th>name</th>\r\n                                                    <th>Min</th>\r\n                                                    <th>Max</th>\r\n                                                    <th>Mean</th>\r\n                                                    <th>Median</th>\r\n                                                    <th>std</th>\r\n                                                    <th>#NAs</th>\r\n                                                    <th>TYPE</th>\r\n                                                </tr>\r\n                                            </thead>\r\n                                            <tbody>\r\n                                                <tr v-for=\"feature in continuousFeaturesStats\" :key=\"feature.name\">\r\n                                                    <td> <b-checkbox v-model=\"feature.selected\"></b-checkbox>\r\n                                                    </td>\r\n                                                    <td>{{ feature.name }}</td>\r\n                                                    <td>{{ feature.min }}</td>\r\n                                                    <td>{{ feature.max }}</td>\r\n                                                    <td>{{ feature.median }}</td>\r\n                                                    <td>{{ feature.mean }}</td>\r\n                                                    <td>{{ feature.std }}</td>\r\n                                                    <td>{{ feature.missingValuesCount }}</td>\r\n                                                    <td> <b-select :expanded=\"true\" v-model=\"feature.type\"\r\n                                                            size=\"is-small\">\r\n                                                            <option v-for=\"option in featureTypeOptions\"\r\n                                                                :value=\"option.id\" :key=\"option.id\">\r\n                                                                {{ option.name }}\r\n                                                            </option>\r\n                                                        </b-select></td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        </table>\r\n                                    </div>\r\n                                    <div class=\"column is-6\">\r\n                                        <h5 class=\"title is-7 has-text-left\">Categorical Features :</h5>\r\n                                        <table class=\"table is-size-7\">\r\n                                            <thead>\r\n                                                <tr>\r\n                                                    <th></th>\r\n                                                    <th>Name</th>\r\n                                                    <th>Shape</th>\r\n                                                    <th>Mode</th>\r\n                                                    <th>Mode percentage</th>\r\n                                                    <th>#NAs</th>\r\n                                                    <th>TYPE</th>\r\n                                                </tr>\r\n                                            </thead>\r\n                                            <tbody>\r\n                                                <tr v-for=\"feature in categoricalFeaturesStats\" :key=\"feature.name\">\r\n                                                    <td> <b-checkbox v-model=\"feature.selected\"></b-checkbox>\r\n                                                    </td>\r\n                                                    <td>{{ feature.name }}</td>\r\n                                                    <td>{{ feature.shape }}</td>\r\n                                                    <td>{{ feature.mode }}</td>\r\n                                                    <td>{{ feature.percentage }}</td>\r\n                                                    <td>{{ feature.missingValuesCount }}</td>\r\n\r\n                                                    <td> <b-select :expanded=\"true\" v-model=\"feature.type\"\r\n                                                            size=\"is-small\">\r\n                                                            <option v-for=\"option in featureTypeOptions\"\r\n                                                                :value=\"option.id\" :key=\"option.id\">\r\n                                                                {{ option.name }}\r\n                                                            </option>\r\n                                                        </b-select></td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        </table>\r\n                                    </div>\r\n                                    <div class=\"column is-6\">\r\n                                        <h5 class=\"title is-7 has-text-left\">Sample Data :</h5>\r\n                                        <b-table class=\"is-size-7\" :data=\"sampleData\" :columns=\"datasetColumns\"\r\n                                            :narrowed=\"true\" :bordered=\"true\" :striped=\"true\"\r\n                                            :hoverable=\"true\"></b-table>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <section>\r\n                            <scatterplot-matrix-component ref=\"splom\"></scatterplot-matrix-component>\r\n\r\n                        </section>\r\n                        <section>\r\n                            <article class=\"message is-info mt-2\">\r\n                                <div class=\"message-header\">correlation matrix and Dendrogram <b-tooltip append-to-body\r\n                                        label=\"Ward method requires euclidean distance\" multilined>\r\n                                        <b-button icon-left=\"info\" icon-pack=\"fas\" size=\"is-small\" type=\"is-dark\" />\r\n                                    </b-tooltip></div>\r\n                                <div class=\"message-body\">\r\n                                    <b-field label=\"Linkage method, Distance Metric\">\r\n                                        <b-select placeholder=\"Method\" v-model=\"method\">\r\n                                            <option value=\"single\">single</option>\r\n                                            <option value=\"complete\">complete</option>\r\n                                            <option value=\"average\">average</option>\r\n                                            <option value=\"weighted\">weighted</option>\r\n                                            <option value=\"centroid\">centroid</option>\r\n                                            <option value=\"median\">median</option>\r\n                                            <option value=\"ward\">ward</option>\r\n                                        </b-select>\r\n                                        <b-select placeholder=\"Metric\" v-model=\"metric\">\r\n                                            <option value=\"euclidean\">euclidean</option>\r\n                                            <option value=\"correlation\">correlation</option>\r\n                                            <option value=\"mahalanobis\">mahalanobis</option>\r\n                                            <option value=\"cosine\">cosine</option>\r\n                                        </b-select>\r\n                                        <p class=\"control\">\r\n                                            <b-button class=\"is-success\" @click=\"correlationMatrix\" :disabled=\"loading\"\r\n                                                :loading=\"loading\">Correlation\r\n                                                Cluster Diagram</b-button>\r\n                                        </p>\r\n                                    </b-field>\r\n\r\n                                    <div class=\"columns is-multiline is-centered mb-2\">\r\n                                        <div class=\"column is-5\" id=\"correlation_matrix\" style=\"height: 400px;\"></div>\r\n                                        <div class=\"column is-5\" id=\"correlation_matrix_ordered\" style=\"height: 400px;\">\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n\r\n                            </article>\r\n                        </section>\r\n                    </section>\r\n                    <section v-else>\r\n                        <b-message type=\"is-danger\" has-icon icon-pack=\"fas\">\r\n                            Upload a dataset or select a sample from sidebar.\r\n                        </b-message>\r\n                    </section>\r\n\r\n                </b-tab-item>\r\n\r\n                <b-tab-item label=\"Dimensionality Reduction\" icon=\"compress-arrows-alt\" icon-pack=\"fas\">\r\n                    <dmensionality-reduction-component :dataframe=\"this.settings.df\"\r\n                        :columns=\"selectedFeatures\"></dmensionality-reduction-component>\r\n                </b-tab-item>\r\n                <b-tab-item label=\"Results Analysis\" icon=\"chart-pie\" icon-pack=\"fas\">\r\n                    <results-component ref=\"results\"></results-component>\r\n                </b-tab-item>\r\n                <b-tab-item label=\"Methods Details\" icon=\"list\" icon-pack=\"fas\">\r\n                    <methods-tab-component></methods-tab-component>\r\n                </b-tab-item>\r\n                <b-tab-item label=\"Help\" icon=\"question\" icon-pack=\"fas\">\r\n                    <div class=\"content has-text-left\t\">\r\n                        <h4>1. Dataset Selection</h4>\r\n                        <p>\r\n                            To begin, you can either select a sample dataset provided by the system or upload your own\r\n                            dataset. The supported file formats for datasets include .xlsx (Excel files), .csv (Comma\r\n                            Separated Values files), and .txt (plain text files). Ensure that your file is in one of\r\n                            these formats to avoid any issues during the upload process.\r\n                        </p>\r\n                        <figure>\r\n                            <img src=\"/upload.png\" />\r\n                            <figcaption>Figure 1: Dataset Selection</figcaption>\r\n                        </figure>\r\n                        <h4>2. Data Analysis</h4>\r\n                        <figure>\r\n                            <img src=\"/stats_categorical.jpg\" />\r\n                            <figcaption>Figure 2: Categorical features stats</figcaption>\r\n                        </figure>\r\n                        <p>\r\n                            After uploading the dataset an overview of the dataset would be shhown in the Data Analysis\r\n                            tab. In the first\r\n                            window we provide you witth statistical metrics of the dataset. for canotinious features we\r\n                            show the mean, std, min, max, and etc.\r\n\r\n                            In case of categorical features information such as shape, mode and percentages of smaples\r\n                            with modes option, and number of missing values.\r\n                        </p>\r\n\r\n                        <figure>\r\n                            <img src=\"/stats_continious.jpg\" />\r\n                            <figcaption>Figure 3: Categorical features stats</figcaption>\r\n                        </figure>\r\n                        <p>\r\n                            In case of categorical features information such as shape, mode and percentages of smaples\r\n                            with modes option, and number of missing values.\r\n                        </p>\r\n                        <h4>3. Feature selection</h4>\r\n                        <p>\r\n                            After uploading the dataset, you can customize the data by selecting specific features based\r\n                            on your requirements. To do this, click on the 'Select Features' button, which will open a\r\n                            new menu. This menu allows you to choose the features that will be used in the training\r\n                            process. If there is an issue with the automatic detection of feature data types, you can\r\n                            manually adjust the data types to ensure they are correctly categorized as ordinal,\r\n                            categorical, or continuous.\r\n                        </p>\r\n                        <h4>3. Model Selection</h4>\r\n                        <figure>\r\n                            <img src=\"/model_selection.jpg\" />\r\n                            <figcaption>Figure 4: Model selection and setting for knn</figcaption>\r\n                        </figure>\r\n                        <p>\r\n                            Once you have selected all the required features and resolved any issues with feature data\r\n                            types, you can proceed to the model selection step. Use the 'Model' dropdown to\r\n                            choose the model for training. The options in this dropdown will be dynamically populated\r\n                            based on the type of data in your features: regression models will be available for\r\n                            continuous data, while classification models will be shown for categorical data.\r\n                            Additionally, you can further customize the selected model by clicking the gear icon, which\r\n                            allows you to adjust common settings and parameters specific to each model.\r\n                        </p>\r\n                    </div>\r\n                </b-tab-item>\r\n                <b-tab-item label=\"Messages Log\" icon=\"history\" icon-pack=\"fas\">\r\n                    <b-notification aria-close-label=\"Close notification\" icon-pack=\"fas\"\r\n                        :type=\"m.type == 'warning' ? 'is-warning' : m.type == 'danger' ? 'is-danger' : 'is-info'\"\r\n                        has-icon :closable=\"false\" v-for=\"(m, i) in this.settings.getMessages\" :key=\"i\">\r\n                        {{ m.message?.toLowerCase() }}\r\n                        <br>\r\n                        {{ m.date }}\r\n\r\n                    </b-notification>\r\n                </b-tab-item>\r\n            </b-tabs>\r\n        </section>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport UI from '@/helpers/ui';\r\nimport { toJSON } from 'danfojs';\r\nimport PCAComponent from './tabs/dmensionality-reduction-componenet.vue'\r\nimport ResultsComponent from './tabs/results-component.vue'\r\nimport SPLOMComponent from './visualization/scatterplot-matrix-component.vue'\r\nimport MethodsTabComponent from './tabs/methods-tab-component.vue'\r\n\r\nimport { FeatureCategories } from '../helpers/settings'\r\nimport ChartController from '@/helpers/charts';\r\nimport { settingStore } from '@/stores/settings'\r\nimport { Matrix, correlation } from 'ml-matrix';\r\n// eslint-disable-next-line no-unused-vars\r\nimport Clustermap from '@/helpers/correlation/correlation-matrix'\r\nimport { DataFrame } from 'danfojs/dist/danfojs-base';\r\n\r\nlet ui = new UI(null, null);\r\nlet chartController = new ChartController(null, null)\r\n\r\nexport default {\r\n    name: 'MainComponent',\r\n    components: {\r\n        'dmensionality-reduction-component': PCAComponent,\r\n        'results-component': ResultsComponent,\r\n        'scatterplot-matrix-component': SPLOMComponent,\r\n        'methods-tab-component': MethodsTabComponent\r\n    },\r\n    setup() {\r\n        const settings = settingStore()\r\n        return { settings }\r\n    },\r\n    props: {\r\n        msg: String,\r\n        selectedFeatures: [],\r\n    },\r\n    errorCaptured(err, vm, info) {\r\n        console.log(`cat EC: ${err.toString()}\\ninfo: ${info}`);\r\n        let message = { message: 'Encountered unexpected error', type: 'warning' }\r\n        this.$buefy.toast.open({ message: 'Encountered unexpected error', type: 'is-warning' })\r\n        this.settings.addMessage(message)\r\n        return false;\r\n    },\r\n    data() {\r\n        return {\r\n            featureTypeOptions: FeatureCategories,\r\n            checkedRows: [],\r\n            metric: 'euclidean',\r\n            method: 'ward',\r\n            img: null,\r\n            continuousFeaturesStats: [\r\n            ],\r\n            continuousFeaturesColumns: [\r\n            ],\r\n            categoricalFeaturesStats: [\r\n            ],\r\n            categoricalFeaturesColumns: [\r\n            ],\r\n            sampleData: [\r\n            ],\r\n            datasetColumns: [\r\n            ],\r\n\r\n            isActive: true,\r\n            hasCorrelationMatrix: false,\r\n            loading: false\r\n        }\r\n    },\r\n    methods: {\r\n        resize() {\r\n            window.dispatchEvent(new Event('resize'));\r\n        },\r\n        async correlationMatrix() {\r\n            this.loading = true;\r\n            try {\r\n                let numericColumns = this.settings.items.filter(m => m.selected && m.type === FeatureCategories.Numerical.id).map(m => m.name);\r\n                let values = this.settings.df.loc({ columns: numericColumns })\r\n                values = values.dropNa({ axis: 1 }).values\r\n                let matrix = new Matrix(values)\r\n                let correlations = correlation(matrix)\r\n                this.hasCorrelationMatrix = true;\r\n                await chartController.correlationHeatmap('correlation_matrix', correlations.data, numericColumns);\r\n                let mtx = new Clustermap();\r\n                let [dendogram, orderedMatrix, columns] = await mtx.train(values, numericColumns, this.metric, this.method);\r\n                await chartController.dendogramPlot('correlation_matrix_ordered', orderedMatrix, dendogram, columns, numericColumns);\r\n                this.loading = false;\r\n                setTimeout(() => {\r\n                    window.dispatchEvent(new Event('resize'));\r\n                }, 500);\r\n            } catch (error) {\r\n                this.loading = false;\r\n                throw error\r\n            }\r\n        },\r\n        applyChanges() {\r\n            this.renderStats(true)\r\n        },\r\n        renderStats(update = false) {\r\n            if (this.settings.df?.columns?.length > 0) {\r\n                let numericColumns, categoricalColumns;\r\n                if (!update) {\r\n                    numericColumns = this.settings.items.filter(m => m.type === FeatureCategories.Numerical.id).map(function (m) {\r\n                        return {\r\n                            name: m.name,\r\n                            selected: true\r\n                        }\r\n                    });\r\n                    categoricalColumns = this.settings.items.filter(m => m.type !== FeatureCategories.Numerical.id).map(function (m) {\r\n                        return {\r\n                            name: m.name,\r\n                            selected: true\r\n                        }\r\n                    });\r\n                } else {\r\n                    console.log(this.continuousFeaturesStats);\r\n                    let features = this.continuousFeaturesStats.concat(this.categoricalFeaturesStats)\r\n                    numericColumns = features.filter(m => m.type === FeatureCategories.Numerical.id).map(function (m) {\r\n                        return {\r\n                            name: m.name,\r\n                            selected: m.selected,\r\n                            scaler: m.sclaer ?? 0\r\n                        }\r\n                    });\r\n                    categoricalColumns = features.filter(m => m.type\r\n                        === FeatureCategories.Nominal.id\r\n                        || m.type === FeatureCategories.Ordinal.id).map(function (m) {\r\n                            return {\r\n                                name: m.name,\r\n                                selected: m.selected\r\n                            }\r\n                        });\r\n\r\n                    let selectedFeatures = features;\r\n                    for (let i = 0; i < selectedFeatures.length; i++) {\r\n                        this.settings.addFeature(selectedFeatures[i])\r\n                    }\r\n                    this.$emit('check-target')\r\n\r\n                }\r\n\r\n\r\n                let df = new DataFrame(this.settings.rawData);\r\n                let datasetStats = ui.renderDatasetStats(df, numericColumns, categoricalColumns);\r\n                this.continuousFeaturesColumns = datasetStats[0];\r\n                this.continuousFeaturesStats = datasetStats[1];\r\n                this.categoricalFeaturesColumns = datasetStats[2];\r\n                this.categoricalFeaturesStats = datasetStats[3];\r\n                this.datasetColumns = this.settings.df.columns.map(column => {\r\n                    return {\r\n                        field: column,\r\n                        label: column\r\n\r\n                    }\r\n                });\r\n                this.sampleData = toJSON(this.settings.df.head(5));\r\n                this.$refs.splom?.initSPLOM();\r\n                setTimeout(() => {\r\n                    this.correlationMatrix();\r\n                }, 500);\r\n            }\r\n        },\r\n    },\r\n\r\n}\r\n</script>\r\n\r\n<style></style>","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./main-component.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./main-component.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./main-component.vue?vue&type=template&id=29bc4a12\"\nimport script from \"./main-component.vue?vue&type=script&lang=js\"\nexport * from \"./main-component.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","<template>\n\n  <div class=\"container\">\n    <b-notification v-show=\"this.settings.getDatasizeFlag\" class=\"mt-2\" type=\"is-warning\" has-icon\n      aria-close-label=\"Close notification\" role=\"alert\">\n      Due to the large size of dataset only 10,000 radom samples from dataset would be used.\n    </b-notification>\n    <div class=\"columns is-multiline\" id=\"app\">\n      <SidebarComponent ref=\"sidebar\" @updateFeatures=\"updateFeatureStats\">\n      </SidebarComponent>\n      <MainComponent ref=\"main\" :dataframe=\"this.settings.df\" @check-target=\"checkTarget()\"></MainComponent>\n    </div>\n  </div>\n\n</template>\n\n<script>\nimport SidebarComponent from \"./components/sidebar-component.vue\";\nimport MainComponent from \"./components/main-component.vue\";\nimport { settingStore } from '@/stores/settings'\n\n\nexport default {\n  name: 'App',\n  components: {\n    SidebarComponent,\n    MainComponent,\n  },\n  setup() {\n    // eslint-disable-next-line no-unused-vars\n    const settings = settingStore()\n    return { settings }\n  },\n  errorCaptured(err, vm, info) {\n    console.log(`cat EC: ${err.toString()}\\ninfo: ${info}`);\n    this.$buefy.toast.open(\n      {\n        duration: 3000,\n        message: 'Something went wrong',\n        type: 'is-danger',\n      })\n    this.settings.addMessage({ message: err.toString(), type: 'danger' })\n    return false;\n  },\n  data() {\n    return {\n      dataframe: null,\n      selectedFeatures: []\n    }\n  },\n  methods: {\n    checkTarget() {\n      this.$refs.sidebar.checkmodelTask()\n    },\n    reset() {\n      this.settings.resetDF();\n    },\n    updateFeatureStats() {\n      this.$refs.main.renderStats();\n    },\n    setSelectedFeatures(e) {\n      this.selectedFeatures = e\n    }\n  }\n}\n</script>\n\n<style>\n#app {\n  font-family: sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  color: #2c3e50;\n  margin-top: 30px;\n}\n\n.notification.is-danger {\n  background-color: hsl(348, 86%, 61%);\n  color: #fff !important;\n}\n\n.button.is-danger {\n  color: #fff !important;\n}\n\n.toast.is-danger {\n  color: #fff !important;\n}\n</style>\n","import mod from \"-!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./App.vue?vue&type=template&id=02ff2cab\"\nimport script from \"./App.vue?vue&type=script&lang=js\"\nexport * from \"./App.vue?vue&type=script&lang=js\"\nimport style0 from \"./App.vue?vue&type=style&index=0&id=02ff2cab&prod&lang=css\"\n\n\n/* normalize component */\nimport normalizer from \"!../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","import Vue from 'vue'\nimport App from './App.vue'\nimport Buefy from 'buefy'\nimport 'buefy/dist/buefy.css'\nimport { tensorflow } from 'danfojs/dist/danfojs-base';\nimport Plotly from 'danfojs/node_modules/plotly.js-dist-min';\nimport * as sk from 'scikitjs'\nimport { createPinia, PiniaVuePlugin } from 'pinia'\nimport VueMathjax from 'vue-mathjax'\nPlotly.setPlotConfig({\n  autosize: true,\n  displaylogo: false,\n  modeBarButtonsToRemove: ['resetScale2d', 'zoom2d', 'pan', 'select2d', 'resetViews', 'sendDataToCloud', 'hoverCompareCartesian', 'lasso2d', 'drawopenpath '], // Remove certain buttons from the mode bar\n});\n\n\nsk.setBackend(tensorflow);\nVue.config.productionTip = false\nVue.prototype.window = window;\n\nVue.use(VueMathjax)\nVue.use(Buefy)\nVue.use(PiniaVuePlugin)\nconst pinia = createPinia()\n\nnew Vue({\n  render: h => h(App),\n  pinia\n}).$mount('#app')\n\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","__webpack_require__.amdD = function () {\n\tthrow new Error('define cannot be used indirect');\n};","__webpack_require__.amdO = {};","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","// This function allow to reference async chunks\n__webpack_require__.u = function(chunkId) {\n\t// return url for filenames based on template\n\treturn \"js/\" + chunkId + \".\" + {\"167\":\"dfe48028\",\"221\":\"a23df7f3\"}[chunkId] + \".js\";\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = function(module) {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","__webpack_require__.p = \"/\";","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t524: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = function(parentChunkLoadingFunction, data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkmlfit\"] = self[\"webpackChunkmlfit\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [504], function() { return __webpack_require__(51300); })\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["render","_vm","this","_c","_self","staticClass","directives","name","rawName","value","settings","getDatasizeFlag","expression","attrs","_v","ref","on","updateFeatureStats","df","$event","checkTarget","staticRenderFns","staticStyle","_m","generateTargetDropdown","configureFeatures","_s","featureSettings","filter","feature","selected","length","model","seed","callback","$$v","checkmodelTask","modelTarget","_l","columns","option","key","domProps","imputationOption","imputationOptions","id","label","crossValidationOption","crossValidationOptions","tuneModel","modelOption","modelOptions","configureModel","modelConfigurations","i","type","$set","values","item","index","_e","dataScalingBehavior","explainModel","usePCAs","numberOfComponents","training","dataframe","train","class","file","datasetName","header","separator","separatorOptions","decimal","decimalOptions","handleFileSelect","sampleDataset","samplDataOptions","DataParser","parse","_content","Error","CSVParser","constructor","options","super","separators","delimiter","has_header","content","Promise","resolve","Papa","worker","transform","val","NaN","skipEmptyLines","dynamicTyping","complete","async","result","data","XLXParser","reader","FileReader","onload","arrayBuffer","array","Uint8Array","binaryString","String","fromCharCode","apply","workbook","XLSX","read","first_sheet_name","SheetNames","worksheet","Sheets","utils","sheet_to_json","raw","readAsArrayBuffer","TXTParser","element","j","parseFloat","replace","ParserFactory","createParser","fileType","toLowerCase","parser","settingStore","defineStore","state","counter","rawData","features","transformations","classTransformations","results","messages","activeTab","dataSizeFlag","resultActiveTab","datasetShape","count","target","isClassification","getters","items","getCounter","getMessages","reverse","getDatasetName","getDatasetShape","getDataset","getRawData","currentTab","mergedClasses","getSeed","getMethodResults","getResultTab","outputs","transformationsList","classificationTask","actions","setSeed","setDatasetName","setDatasetShape","shape","resetFeatures","resetTransformations","setDatasizeFlag","flag","resetDataset","increaseCounter","setDataframe","setRawData","addFeature","scaler","findIndex","m","push","setClassTransformation","addTransformation","transformation","addResult","addMessage","message","date","Date","toLocaleString","removeResult","splice","getResultVisualizations","tables","plots","resetDF","updateFeature","removeItem","lastIndexOf","setTarget","setmodelTask","setActiveTab","setResultActiveTab","DATASET_SIZE","setup","props","msg","watch","dataset","process_file","split","initDataframe","error","$buefy","toast","open","methods","shuffle","t","Math","floor","random","x","sin","$data","sample","$emit","processdDataset","slice","dataFrame","DataFrame","current","fetch","then","response","blob","File","catch","console","component","FeatureCategories","CV_OPTIONS","SPLIT","NO","KFOLD","ScaleOptions","Settings","default","placeholder","for","pyodideWorker","Worker","URL","callbacks","onmessage","event","onSuccess","asyncRun","script","context","Number","MAX_SAFE_INTEGER","postMessage","python","PCA","predict","n","x_test","x_train","has_test_set","e","binarize","y","threshold","tf","util","assert","tidy","condition","greater","scalar","where","onesLike","zerosLike","encode_name","str_encoded","metrics","y_pred","labels","precision","recall","f1_micro","f1_macro","accuracy","calculateRSquared","actual","predicted","meanActual","mean_array","totalSumOfSquares","reduce","acc","pow","residualSumOfSquares","calculateMSE","actualValues","predictedValues","sumSquaredError","squaredError","meanSquaredError","scale_data","column","normalization_type","MinMaxScaler","fit","addColumn","inplace","ln","log","isNaN","StandardScaler","applyDataTransformation","column_names","find","toString","handle_missing_values","data_frame","impute","string_columns","numeric_columns","string_column_modes","numeric_column_means","forEach","dtype","mode","getCategoricalMode","mean","fillNa","dropNa","axis","arr","categoryCount","category","undefined","modeCategory","modeCount","encode_dataset","columns_types","copy","categorical_columns","Nominal","Ordinal","categoriclaFeaturesAfterEncoding","encoder","LabelEncoder","encoded_column","getDummies","drop","includes","plotlyImageExportConfig","toImageButtonOptions","format","height","width","scale","ChartController","_defineProperty","gaussian","u","exp","sqrt","PI","uniform","abs","triangular","biweight","triweight","Epanechnikov","color_scheme","schemeTableau10","color_scheme_sequential","interpolateRainbow","classification_target_chart","container","title","uniqueLabels","Set","colorIndices","map","indexToColor","indexOf","color","Highcharts","chart","credits","enabled","text","xAxis","categories","yAxis","min","plotOptions","pointPadding","borderWidth","colors","series","regression_target_chart","kde_data","ys","items_range","breaks","ss","kde","legend","verticalAlign","animation","tooltip","valueDecimals","marker","dashStyle","area","lineWidth","draw_categorical_barplot","column_values","$","append","countOccurrences","countArray","Object","entries","sort","a","b","top5","Chart","renderTo","overflow","bar","dataLabels","showInLegend","roc_chart","true_positive_rates","false_positive_rates","trace","trace2","layout","showlegend","xaxis","yaxis","Plotly","falsePositives","yTrue","yPred","one","zero","logicalAnd","equal","sum","cast","max","indexToColorSequential","normalizer_value","reshape","size","restShape","restSize","plot_tsne","regression_labels","iterations","document","getElementById","style","display","Array","isArray","tsneOpt","tsne","tensorflow","tensor2d","compute","coordinates","dataSync","Y","traces","flat","points_labled","items_for_label","points","margin","l","r","pad","linecolor","linewidth","mirror","zeroline","xanchor","responsive","modeBarButtonsToRemove","trueNegatives","falsePositiveRate","fp","tn","div","add","drawROC","targets","probs","thresholds","tprs","fprs","threshPredictions","as1D","fpr","tpr","nrd","s","iqr","hexToRgb","hex","exec","parseInt","g","draw_kde","target_name","bandwidth","is_classification","redrawing","default_bandwidth","toFixed","raw_values","loc","subsets","subset","newColumn","createElement","className","setAttribute","addEventListener","Numerical","newBandwidth","current_class","container_id","allData","kernel_type","kernelFunctions","animationDuration","visible","autosize","align","duration","window","dispatchEvent","Event","classificationPCA","missclassifications","pca","pca_data","x_error","y_error","error_texts","real_labels","missclassificationColors","truePredsColors","join","trace1","symbol","customdata","hovertemplate","hovermode","hoverlabel","bgcolor","staticPlot","purge_charts","draw_pca","axes","drawScreePlot","_","explained_variances","circels","distances","principle_components","traces1","arrows","shapes","distance","axref","ayref","arrowside","arrowcolor","font","yanchor","arrowwidth","arrowhead","hovertext","ax","ay","xref","yref","x0","y0","x1","y1","line","annotations","range","cumulatedExplainedVaraince","compnentsaxis","trace3","traceorder","orientation","dash","tickmode","dtick","rang","drawStackedHorizontalChart","lable","barmode","regularization_plot","xs","colorway","argmax","maxIndex","currentValue","currentIndex","probabilities_boxplot","probablitiesFormatted","true_label","trueClass","classProbas","proba","prob","probablity","classIndex","outlierwidth","boxmode","plotConfusionMatrix","predictedLabels","uniqueClasses","tab_index","confusionMatrix","metric","ClassificationMetric","arraySync","f1Micro","f1Macro","len","preceissions","recalls","dispose","metric_labels","items_labels","formatted_matrix","exporting","plotBorderWidth","fontSize","linkedTo","opposite","tickLength","formatter","each","p","reversed","endOnTick","colorAxis","minColor","maxColor","getOptions","symbolHeight","useHTML","totalCount","cur","point","skip","percentage","rules","maxWidth","chartOptions","padding","plot_regularization","weights","alphas","names","serieses","alphas_formatted","connectorAllowed","yhat_plot","y_test","predictions","family","residual_plot","residuals","ScatterplotMatrix","number_of_categoricals","reject","setTimeout","unique_labels","k","set","z","opacity","unique_labels_feature","lablel_items","counts","ii","fill","column_items","unique_classes","class_frequencies","class_label","colorscale","boxplot_labels","boxtraces","box_items","concat","arr1","arr2","jStat","corrcoeff","textfont","spacing","grid","rows","xgap","ygap","pattern","xAxisKey","yAxisKey","showgrid","showticklabels","tickfont","KNNPerformancePlot","best_n","KNNPerformancePlotRegression","optimalTrainSpec","optimalTestSpec","evaluation","evaluation_train","min_y","POSITIVE_INFINITY","max_y","NEGATIVE_INFINITY","correaltoinMatrixColorscale","correlations","featuresCount","corrs","countNegatives","portionOfNegativeValues","round","correlationHeatmap","zmin","zmax","hoverongaps","showscale","ticks","side","tickangle","autorange","ticksuffix","textColor","showarrow","dendogramPlot","linkage","originalColumns","trace4","colorbar","thickness","indices","linksLength","currentLimitY","prevLimitY","clusterY","clusterX","tickValues","dendrogramUP","dendrogramRIGHT","history","link","l0","l1","y_current","prev","curr","currentLimitX","prevLimitX","layout2","domain","showline","tickvals","tick","ticktext","xaxis2","yaxis2","coloraxis","cmin","cmax","PFIBoxplot","importances","avgs","importance","importancesMean","from","automargin","plotPDP","averages","grids","pfiChartId","chartContainer","classList","chartId","after","isCategorical","average","plotPDPRegression","categoricals","chartIdCategorical","traces_categoricals","bargap","drawAutoencoder","xIndex","yIndex","plotROC","auc","uniformSplist","numbers","parallelCoordinatePlot","labelEncoder","colorMapping","dimensions","column_name","UI","chart_controller","data_parser","get_model_settings","model_settings","model_name","classification","regression","option_value","createAlgorithmsSelect","hasOwnProperty","call","updateAlgorithmsSelect","find_selected_columns","get_all","selected_columns","checked","find_selected_columns_types","include_target","column_types","createTargetDropdown","createFeaturesDropdown","insertSpaces","string","renderDatasetStats","continuousFeatures","categoricalFeatures","continuousFeaturesStats","categoricalFeaturesStats","continuousHeaders","field","categoricalHeaders","median","std","missingValuesCount","isNa","category_info","get_numeric_columns","selected_columns_types","col","numericColumns","get_categorical_columns","visualize","file_name","filterd_dataset","limit","innerHTML","toggle_loading_progress","show","init_tooltips","tippy","interactive","popperOptions","positionFixed","allowHTML","predictions_table_regression","table_columns","DataTable","pageLength","paging","columnDefs","row","bPaginate","bDestroy","removeTable","tableId","destroy","predictions_table","keys","rowCallback","prediction","addClass","ClassificationModel","chartController","ui","task","hasProbability","hasExplaination","helpSectionId","evaluateModel","generatePythonCode","model_import","model_fit","trim","classes","$labels","tensor","inverseTransform","LogisticRegression","summary","model_stats_matrix","y_train","X_train","X_test","regularization_type","regularization","webR","webr","init","installPackages","quiet","objs","globalEnv","bind","plotlyData","evalR","toArray","JSON","coefs","stds","z_scores","p_values","probabities","pred","confidence_intervals","confidence_intervals_row_names","aic","toNumber","best_fit_min","best_fit_1se","lambda_min","lambda_1se","cols","unshift","min_ols_columns","se_ols_columns","coef","pval","placeholder_row","start","end","api","footer","html","info","search","ordering","searching","y_classes","conf_intervals","traces_params","ols_y","error_x","y_classes_min","conf_intervals_min","lasso_y","_1se_y","y_classes_1se","conf_intervals_1se","lambda","params","predictor","param","coefficient","lambdas","textangle","RegressionModel","mse","rsquared","LinearRegression","bse","pvalues","predictions1se","predictionsmin","residuals_ols","residuals_1se","residuals_min","bic","r2","reg_plot","coefs_plot","errors_plot","qqplot_ols_plot","qqplot_1se_plot","qqplot_min_plot","td","cellData","rowData","css","BSplineRegression","knots","explain","degree","pdp_averages","pdp_grid","filename","lineno","SupportVectorMachine","opt","kernel","bias","c","__","pdpIndex","SupportVectorMachineRegression","chartControler","gamma","KNNModel","k_neighbor_results","KNNRegressor","RandomForest","rf_type","criteria","max_features","num_estimators","estimators","max_depth","depth","num_classes","probas","RandomForestRegressor","NaiveBayes","nb_type","priors","smoothing","laplace","DiscriminantAnalysis","lda_type","PolynomialRegression","columnNames","KernelRegression","types","Boosting","booster","objective","eta","BoostingRegression","ModelFactory","createModel","modelName","logistic_regression","k_nearest_neighbour","random_forest","support_vector_machine","boosting","discriminant_analysis","naive_bayes","linear_regression","polynomial_regression","kernel_regression","bspline_regression","components","UploadComponent","featureTypeOptions","modelSettings","updateFeatures","toggleTraining","getDefaultModelConfiguration","dtypes","selectedFeatures","targetFeature","selectedClasses","newClass","cls","cross_validation_setting","splitData","performances","kfoldSplit","encoded_y","encoded_y_test","encodeTarget","model_factory","pca_train","___","____","pca_test","showProbas","snapshot","xt","yt","xFeatures","modelTask","stringify","axios","post","toJSON","res","created","stepSize","ceil","train_bound","test_bound","iloc","fold","lowerLimit","upperLimit","train_bound_lower","train_bound_upper","x_train_upper","y_train_upper","x_train_lower","y_train_lower","dfList","resize","isActive","applyChanges","sampleData","datasetColumns","method","loading","correlationMatrix","loadingPCA","drawPCA","hasPCA","findPCA","pcaContainers","iterationsTSNE","loadingTSNE","findTSNE","hiddenLayerSize","autoEncoderX","autoEncoderY","encoderActivationFunction","decoderActivationFunction","loadingAutoEncoder","autoEncoder","prepareData","drawExplainedVariance","sequential","unitsLength","layers","dense","units","batchInputShape","activation","kernelInitializer","biasInitializer","decoder","compile","optimizer","loss","epochs","batchSize","validationSplit","tidyWrapper","ret","errorCaptured","activeResult","compareResults","compare","deleteResult","scalerLabel","deleteTab","toggleHelp","downloadPythonCode","pdpFeature","showResult","el","scrollIntoView","behavior","pyCode","Blob","url","createObjectURL","href","download","body","appendChild","click","removeChild","revokeObjectURL","updatePartialDependencePlot","err","vm","ClassificationViewComponent","RegressionViewComponent","computed","get","isClassication","comparisonMetric","baseMetrics","visitedTabs","fillMetrics","methodResults","v","table","plot","showMethodDetails","alert","column_width","scaleData","classesInfo","classesInfoColumns","row-class","isLoading","update","ParallelCoordinatePlot","validTransformations","PCPComponent","dispalySPLOM","targetValues","samplesLength","$refs","coordinate_plot","reset","transformationInfo","initSPLOM","formula","sserror","Clustermap","PCAComponent","ResultsComponent","SPLOMComponent","MethodsTabComponent","checkedRows","img","continuousFeaturesColumns","categoricalFeaturesColumns","hasCorrelationMatrix","matrix","Matrix","correlation","mtx","dendogram","orderedMatrix","renderStats","categoricalColumns","sclaer","datasetStats","head","splom","SidebarComponent","MainComponent","sidebar","main","setSelectedFeatures","displaylogo","sk","Vue","config","productionTip","prototype","use","VueMathjax","Buefy","PiniaVuePlugin","pinia","createPinia","h","App","$mount","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","loaded","__webpack_modules__","amdD","amdO","deferred","O","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","every","getter","__esModule","d","definition","o","defineProperty","enumerable","chunkId","globalThis","Function","obj","prop","Symbol","toStringTag","nmd","paths","children","baseURI","self","location","installedChunks","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","chunkLoadingGlobal","__webpack_exports__"],"sourceRoot":""}