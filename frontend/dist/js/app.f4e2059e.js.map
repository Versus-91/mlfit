{"version":3,"file":"js/app.f4e2059e.js","mappings":"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","sources":["webpack://mlfit/./src/App.vue","webpack://mlfit/./src/components/sidebar-component.vue","webpack://mlfit/./src/components/upload-component.vue","webpack://mlfit/./src/helpers/parser/parser.js","webpack://mlfit/./src/helpers/parser/csv_parser.js","webpack://mlfit/./src/helpers/parser/xlx_parser.js","webpack://mlfit/./src/helpers/parser/txt_parser.js","webpack://mlfit/./src/helpers/parser/parser_factory.js","webpack://mlfit/./src/stores/settings.js","webpack://mlfit/src/components/upload-component.vue","webpack://mlfit/./src/components/upload-component.vue?4aa8","webpack://mlfit/./src/components/upload-component.vue?14a8","webpack://mlfit/./src/helpers/settings.js","webpack://mlfit/./src/helpers/py-worker.js","webpack://mlfit/./src/helpers/dimensionality-reduction/pca.js","webpack://mlfit/./src/helpers/utils.js","webpack://mlfit/./src/helpers/charts.js","webpack://mlfit/./src/helpers/ui.js","webpack://mlfit/./src/helpers/model.js","webpack://mlfit/./src/helpers/classification/logistic_regression.js","webpack://mlfit/./src/helpers/regression_model.js","webpack://mlfit/./src/helpers/regression/linear_regression.js","webpack://mlfit/./src/helpers/regression/bspline_regression.js","webpack://mlfit/./src/helpers/classification/svm.js","webpack://mlfit/./src/helpers/regression/svm.js","webpack://mlfit/./src/helpers/classification/knn.js","webpack://mlfit/./src/helpers/regression/knn_regressor.js","webpack://mlfit/./src/helpers/classification/random_forest.js","webpack://mlfit/./src/helpers/regression/random_forest.js","webpack://mlfit/./src/helpers/classification/NaiveBayes.js","webpack://mlfit/./src/helpers/classification/lda.js","webpack://mlfit/./src/helpers/regression/polynomial_regression.js","webpack://mlfit/./src/helpers/regression/kernel_regression.js","webpack://mlfit/./src/helpers/classification/boosting.js","webpack://mlfit/./src/helpers/regression/boosting.js","webpack://mlfit/./src/helpers/model_factory.js","webpack://mlfit/src/components/sidebar-component.vue","webpack://mlfit/./src/components/sidebar-component.vue?5c0f","webpack://mlfit/./src/components/sidebar-component.vue?e4f8","webpack://mlfit/./src/components/main-component.vue","webpack://mlfit/./src/components/tabs/dmensionality-reduction-componenet.vue","webpack://mlfit/src/components/tabs/dmensionality-reduction-componenet.vue","webpack://mlfit/./src/components/tabs/dmensionality-reduction-componenet.vue?9063","webpack://mlfit/./src/components/tabs/dmensionality-reduction-componenet.vue?359e","webpack://mlfit/./src/components/tabs/results-component.vue","webpack://mlfit/./src/components/tabs/classification-view-component.vue","webpack://mlfit/src/components/tabs/classification-view-component.vue","webpack://mlfit/./src/components/tabs/classification-view-component.vue?e406","webpack://mlfit/./src/components/tabs/classification-view-component.vue?de8c","webpack://mlfit/./src/components/tabs/regression-view-component.vue","webpack://mlfit/src/components/tabs/regression-view-component.vue","webpack://mlfit/./src/components/tabs/regression-view-component.vue?6ab4","webpack://mlfit/./src/components/tabs/regression-view-component.vue?8435","webpack://mlfit/src/components/tabs/results-component.vue","webpack://mlfit/./src/components/tabs/results-component.vue?b709","webpack://mlfit/./src/components/tabs/results-component.vue?73e9","webpack://mlfit/./src/components/visualization/scatterplot-matrix-component.vue","webpack://mlfit/src/components/visualization/scatterplot-matrix-component.vue","webpack://mlfit/./src/components/visualization/scatterplot-matrix-component.vue?4516","webpack://mlfit/./src/components/visualization/scatterplot-matrix-component.vue?dd01","webpack://mlfit/./src/helpers/sns-worker.js","webpack://mlfit/./src/helpers/correlation/correlation-matrix.js","webpack://mlfit/src/components/main-component.vue","webpack://mlfit/./src/components/main-component.vue?f8f6","webpack://mlfit/./src/components/main-component.vue?26f6","webpack://mlfit/src/App.vue","webpack://mlfit/./src/App.vue?c036","webpack://mlfit/./src/App.vue?0e40","webpack://mlfit/./src/main.js","webpack://mlfit/webpack/bootstrap","webpack://mlfit/webpack/runtime/amd define","webpack://mlfit/webpack/runtime/amd options","webpack://mlfit/webpack/runtime/chunk loaded","webpack://mlfit/webpack/runtime/compat get default export","webpack://mlfit/webpack/runtime/create fake namespace object","webpack://mlfit/webpack/runtime/define property getters","webpack://mlfit/webpack/runtime/ensure chunk","webpack://mlfit/webpack/runtime/get javascript chunk filename","webpack://mlfit/webpack/runtime/get mini-css chunk filename","webpack://mlfit/webpack/runtime/global","webpack://mlfit/webpack/runtime/hasOwnProperty shorthand","webpack://mlfit/webpack/runtime/load script","webpack://mlfit/webpack/runtime/make namespace object","webpack://mlfit/webpack/runtime/node module decorator","webpack://mlfit/webpack/runtime/publicPath","webpack://mlfit/webpack/runtime/jsonp chunk loading","webpack://mlfit/webpack/startup"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"container\"},[_c('div',{staticClass:\"columns is-multiline\",attrs:{\"id\":\"app\"}},[_c('SidebarComponent',{on:{\"updateFeatures\":_vm.updateFeatureStats,\"selected-features\":_vm.setSelectedFeatures}}),_c('MainComponent',{ref:\"main\",attrs:{\"dataframe\":this.settings.df,\"selectedFeatures\":_vm.selectedFeatures}})],1)])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"column is-2\"},[_c('button',{on:{\"click\":function($event){return _vm.impute()}}},[_vm._v(\"Impute\")]),(!_vm.configureFeatures)?_c('section',[_c('upload-component',{on:{\"uploaded\":_vm.generateTargetDropdown}}),_c('div',{staticClass:\"column is-12\"},[_c('b-field',[_c('b-button',{attrs:{\"size\":\"is-small\",\"type\":\"is-primary is-light\",\"icon-pack\":\"fas\",\"icon-left\":\"cog\"},on:{\"click\":function($event){_vm.configureFeatures = true}}},[_vm._v(\"Select Features \"+_vm._s(_vm.featureSettings.filter(feature => feature.selected).length))])],1),_c('b-field',{attrs:{\"label\":\"Seed\",\"label-position\":'on-border'}},[_c('b-input',{attrs:{\"size\":\"is-small\",\"placeholder\":\"Seed\",\"type\":\"number\",\"min\":\"0\"},model:{value:(_vm.seed),callback:function ($$v) {_vm.seed=$$v},expression:\"seed\"}})],1),_c('b-field',{attrs:{\"label\":\"Target\",\"label-position\":'on-border'}},[_c('b-select',{attrs:{\"expanded\":true,\"size\":\"is-small\"},model:{value:(_vm.modelTarget),callback:function ($$v) {_vm.modelTarget=$$v},expression:\"modelTarget\"}},_vm._l((_vm.columns),function(option){return _c('option',{key:option,domProps:{\"value\":option}},[_vm._v(\" \"+_vm._s(option)+\" \")])}),0)],1),_c('b-field',{attrs:{\"label\":\"Imputation\",\"label-position\":'on-border'}},[_c('b-select',{attrs:{\"expanded\":true,\"size\":\"is-small\"},model:{value:(_vm.imputationOption),callback:function ($$v) {_vm.imputationOption=$$v},expression:\"imputationOption\"}},_vm._l((_vm.imputationOptions),function(option){return _c('option',{key:option.id,domProps:{\"value\":option.id}},[_vm._v(\" \"+_vm._s(option.label)+\" \")])}),0)],1),_c('b-field',{attrs:{\"label\":\"Cross Validation\",\"label-position\":'on-border'}},[_c('b-select',{attrs:{\"expanded\":true,\"size\":\"is-small\"},model:{value:(_vm.crossValidationOption),callback:function ($$v) {_vm.crossValidationOption=$$v},expression:\"crossValidationOption\"}},_vm._l((_vm.crossValidationOptions),function(option){return _c('option',{key:option.id,domProps:{\"value\":option.id}},[_vm._v(\" \"+_vm._s(option.label)+\" \")])}),0)],1),_c('b-field',{attrs:{\"label\":\"Model\",\"label-position\":'on-border'}},[_c('b-select',{attrs:{\"disabled\":_vm.tuneModel,\"expanded\":true,\"size\":\"is-small\"},model:{value:(_vm.modelOption),callback:function ($$v) {_vm.modelOption=$$v},expression:\"modelOption\"}},_vm._l((_vm.modelOptions),function(option){return _c('option',{key:option.id,domProps:{\"value\":option.id}},[_vm._v(\" \"+_vm._s(option.label)+\" \")])}),0),_c('b-button',{attrs:{\"size\":\"is-small\",\"icon-pack\":\"fas\",\"icon-left\":!this.tuneModel ? 'cog' : 'arrow-left'},on:{\"click\":_vm.configureModel}})],1),(_vm.tuneModel)?_c('section',{staticClass:\"mx-1\"},_vm._l((_vm.modelConfigurations),function(option,i){return _c('b-field',{key:i,attrs:{\"label\":option.label,\"label-position\":'on-border'}},[(option.type === 'select')?_c('b-select',{attrs:{\"expanded\":true,\"size\":\"is-small\"},model:{value:(option.value),callback:function ($$v) {_vm.$set(option, \"value\", $$v)},expression:\"option.value\"}},_vm._l((option.values),function(item,index){return _c('option',{key:index,domProps:{\"value\":item.value}},[_vm._v(\" \"+_vm._s(item.label)+\" \")])}),0):(option.type === 'number')?_c('b-input',{attrs:{\"size\":\"is-small\",\"type\":\"number\"},model:{value:(option.value),callback:function ($$v) {_vm.$set(option, \"value\", $$v)},expression:\"option.value\"}}):(option.type === 'text')?_c('b-input',{attrs:{\"size\":\"is-small\",\"type\":\"text\"},model:{value:(option.value),callback:function ($$v) {_vm.$set(option, \"value\", $$v)},expression:\"option.value\"}}):_vm._e()],1)}),1):_vm._e(),_c('b-field',[_c('b-button',{attrs:{\"size\":\"is-small\",\"icon-pack\":\"fas\",\"icon-left\":\"play\",\"loading\":_vm.training,\"disabled\":!_vm.dataframe,\"type\":\" is-light\"},on:{\"click\":_vm.train}},[_vm._v(\" train\")])],1),_c('b-loading',{attrs:{\"is-full-page\":false},model:{value:(_vm.training),callback:function ($$v) {_vm.training=$$v},expression:\"training\"}})],1)],1):_c('section',[_c('b-button',{attrs:{\"size\":\"is-small\",\"icon-pack\":\"fas\",\"icon-left\":\"arrow-left\",\"type\":\"is-primary is-light\"},on:{\"click\":function($event){return _vm.updateFeatures()}}},[_vm._v(\"Select Features \")]),_c('section',[_vm._v(\" Configure Features : \"),_c('table',{staticClass:\"table is-narrow is-size-7 is-fullwidth\"},[_vm._m(0),_c('tbody',_vm._l((_vm.featureSettings),function(feature,index){return _c('tr',{key:index},[_c('td',[_c('b-checkbox',{model:{value:(feature.selected),callback:function ($$v) {_vm.$set(feature, \"selected\", $$v)},expression:\"feature.selected\"}})],1),_c('td',[_vm._v(_vm._s(feature.name))]),_c('td',[_c('b-select',{attrs:{\"expanded\":true,\"size\":\"is-small\"},on:{\"input\":_vm.checkmodelTask},model:{value:(feature.type),callback:function ($$v) {_vm.$set(feature, \"type\", $$v)},expression:\"feature.type\"}},_vm._l((_vm.featureTypeOptions),function(option){return _c('option',{key:option.id,domProps:{\"value\":option.id}},[_vm._v(\" \"+_vm._s(option.name)+\" \")])}),0)],1)])}),0)])])],1)])\n}\nvar staticRenderFns = [function (){var _vm=this,_c=_vm._self._c;return _c('thead',[_c('tr',[_c('th',[_vm._v(\" select \")]),_c('th',[_vm._v(\" name \")]),_c('th',[_vm._v(\" scale \")])])])\n}]\n\nexport { render, staticRenderFns }","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"column is-12\"},[_c('b-field',{staticClass:\"file is-warning\",class:{ 'has-name': !!_vm.file }},[_c('b-upload',{staticClass:\"file-label\",attrs:{\"accept\":\".csv,.txt,.xlsx\"},model:{value:(_vm.file),callback:function ($$v) {_vm.file=$$v},expression:\"file\"}},[_c('span',{staticClass:\"file-cta\"},[_c('b-icon',{staticClass:\"file-icon\",attrs:{\"pack\":\"fas\",\"icon\":\"upload\"}}),_c('span',{staticClass:\"file-label\"},[_vm._v(_vm._s(this.settings.datasetName || \"Upload\"))])],1)])],1),_c('b-field',[_c('b-checkbox',{model:{value:(_vm.header),callback:function ($$v) {_vm.header=$$v},expression:\"header\"}},[_vm._v(\"Header\")])],1),_c('b-field',{attrs:{\"label\":\"Separator\",\"label-position\":'on-border'}},[_c('b-select',{attrs:{\"expanded\":true,\"size\":\"is-small\"},model:{value:(_vm.separator),callback:function ($$v) {_vm.separator=$$v},expression:\"separator\"}},_vm._l((_vm.separatorOptions),function(option){return _c('option',{key:option.id,domProps:{\"value\":option.id}},[_vm._v(\" \"+_vm._s(option.label)+\" \")])}),0)],1),_c('b-field',{attrs:{\"label\":\"Decimal\",\"label-position\":'on-border'}},[_c('b-select',{attrs:{\"expanded\":true,\"size\":\"is-small\",\"label-position\":'on-border'},model:{value:(_vm.decimal),callback:function ($$v) {_vm.decimal=$$v},expression:\"decimal\"}},_vm._l((_vm.decimalOptions),function(option){return _c('option',{key:option.id,domProps:{\"value\":option.id}},[_vm._v(\" \"+_vm._s(option.label)+\" \")])}),0)],1),_c('b-field',{attrs:{\"label\":\"Sample data\",\"label-position\":'on-border'}},[_c('b-select',{attrs:{\"expanded\":true,\"size\":\"is-small\"},on:{\"input\":_vm.handleFileSelect}},_vm._l((_vm.samplDataOptions),function(option){return _c('option',{key:option.id,domProps:{\"value\":option.name}},[_vm._v(\" \"+_vm._s(option.name)+\" \")])}),0)],1)],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","/* eslint-disable no-unused-vars */\r\nexport class DataParser {\r\n    parse(_content) {\r\n        throw new Error(\"Not implemented.\")\r\n    }\r\n}","import { DataParser } from './parser';\r\nimport Papa from 'papaparse';\r\n\r\nexport class CSVParser extends DataParser {\r\n    constructor(options) {\r\n        super();\r\n        this.separators = { 0: ',', 1: '.', 2: ',', 3: ' ' }\r\n        this.separator = options.separator;\r\n        this.delimiter = options.delimiter;\r\n        this.has_header = options.header\r\n    }\r\n    parse(content) {\r\n        return new Promise((resolve) => {\r\n            Papa.parse(content, {\r\n                worker: false,\r\n                header: this.has_header,\r\n                delimiter: this.separators[this.separator],\r\n                transform: (val) => {\r\n                    if (val === \"?\" || val === \"NA\") {\r\n                        return NaN\r\n                    }\r\n                    return val\r\n                },\r\n                // transformHeader: (val) => {\r\n                //     return val.replace(/[^a-zA-Z0-9 ]/g, \"\").trim()\r\n                // },\r\n                skipEmptyLines: true,\r\n                dynamicTyping: true,\r\n                complete: async function (result) {\r\n                    resolve(result.data)\r\n                }\r\n            })\r\n        }\r\n        )\r\n    }\r\n}","/* eslint-disable no-undef */\r\nimport { DataParser } from './parser';\r\n\r\nexport class XLXParser extends DataParser {\r\n    parse(content) {\r\n        return new Promise((resolve) => {\r\n            var reader = new FileReader();\r\n            reader.onload = function () {\r\n                var arrayBuffer = this.result,\r\n                    array = new Uint8Array(arrayBuffer),\r\n                    binaryString = String.fromCharCode.apply(null, array);\r\n                var workbook = XLSX.read(binaryString, {\r\n                    type: \"binary\"\r\n                });\r\n                var first_sheet_name = workbook.SheetNames[0];\r\n                var worksheet = workbook.Sheets[first_sheet_name];\r\n                resolve(XLSX.utils.sheet_to_json(worksheet, {\r\n                    raw: true\r\n                }));\r\n            }\r\n            reader.readAsArrayBuffer(content);\r\n        }\r\n        )\r\n    }\r\n}","import { DataParser } from './parser';\r\nimport Papa from 'papaparse';\r\n\r\nexport class TXTParser extends DataParser {\r\n    constructor(options) {\r\n        super();\r\n        this.separators = { 0: ',', 1: '.', 2: ',', 3: ' ' }\r\n        this.separator = options.separator;\r\n        this.delimiter = options.delimiter;\r\n        this.has_header = options.header\r\n    }\r\n    parse(content) {\r\n        return new Promise((resolve) => {\r\n            Papa.parse(content, {\r\n                worker: false,\r\n                header: this.has_header,\r\n                delimiter: this.separators[this.separator],\r\n                transform: (val) => {\r\n                    if (val === \"?\" || val === \"NA\") {\r\n                        return NaN\r\n                    }\r\n                    return val\r\n                },\r\n                // transformHeader: (val) => {\r\n                //     return val.replace(/[^a-zA-Z0-9 ]/g, \"\").trim()\r\n                // },\r\n                skipEmptyLines: true,\r\n                dynamicTyping: true,\r\n                complete: async function (result) {\r\n                    if (this.delimiter == 1) {\r\n                        for (let i = 0; i < result.data.length; i++) {\r\n                            const element = result.data[i];\r\n                            for (let j = 0; j < element.length; j++) {\r\n                                result.data[i][j] = parseFloat(result.data[i][j].replace(/\\./g, '').replace(',', '.'));\r\n                            }\r\n                        }\r\n                    }\r\n                    resolve(result.data)\r\n                }\r\n            })\r\n        }\r\n        )\r\n    }\r\n}","import { CSVParser } from './csv_parser'\r\nimport { XLXParser } from './xlx_parser'\r\nimport { TXTParser } from './txt_parser'\r\n\r\n\r\nexport class ParserFactory {\r\n    static createParser(fileType, options) {\r\n        switch (fileType.toLowerCase()) {\r\n            case 'csv':\r\n                return new CSVParser(options);\r\n            case 'txt': {\r\n                let parser = new TXTParser(options)\r\n                return parser\r\n            }\r\n            case 'xlsx':\r\n                return new XLXParser();\r\n            default:\r\n                throw new Error(`Unsupported file type: ${fileType}`);\r\n        }\r\n    }\r\n}\r\n","import { defineStore } from 'pinia'\r\n\r\nexport const settingStore = defineStore({\r\n    id: 'cart',\r\n    state: () => ({\r\n        counter: 0,\r\n        df: {},\r\n        features: [],\r\n        transformations: [],\r\n        results: [],\r\n        datasetName: '',\r\n        activeTab: 0,\r\n        resultActiveTab: 0,\r\n        datasetShape: {\r\n            count: 0,\r\n            columns: 0\r\n        },\r\n        target: null,\r\n        isClassification: true,\r\n    }),\r\n    getters: {\r\n        items: (state) => {\r\n            return state.features\r\n        },\r\n        getCounter: (state) => {\r\n            return state.counter\r\n        },\r\n        getDatasetName: (state) => {\r\n            return state.datasetName\r\n        },\r\n        getDatasetShape: (state) => {\r\n            return state.datasetShape\r\n        },\r\n        getDataset: (state) => {\r\n            return state.df;\r\n        },\r\n        currentTab: (state) => {\r\n            return state.activeTab\r\n        },\r\n        outputs: (state) => state.results,\r\n        transformationsList: (state) => state.transformations,\r\n        modelTarget: (state) => state.target,\r\n        classificationTask: (state) => state.isClassification,\r\n    },\r\n    actions: {\r\n        setDatasetName(name) {\r\n            this.datasetName = name;\r\n        },\r\n        setDatasetShape(shape) {\r\n            this.datasetShape = shape;\r\n        },\r\n        resetFeatures() {\r\n            this.features = []\r\n        },\r\n        resetTransformations() {\r\n            this.transformations = []\r\n        },\r\n        resetDataset() {\r\n            this.datasetName = '';\r\n            this.datasetShape = {\r\n                count: 0,\r\n                columns: 0\r\n            };\r\n\r\n        },\r\n        increaseCounter() {\r\n            this.counter++;\r\n        },\r\n        setDataframe(data) {\r\n            this.df = data;\r\n        },\r\n        addFeature(feature) {\r\n            let index = this.features.findIndex(m => m.name === feature.name);\r\n            if (index !== -1) {\r\n                this.features[index] = feature\r\n                return\r\n            }\r\n            this.features.push(feature)\r\n        },\r\n        addTransformation(transformation) {\r\n            let index = this.transformations.findIndex(m => m.name === transformation.name);\r\n            if (index !== -1) {\r\n                this.transformations[index] = transformation\r\n                return\r\n            }\r\n            this.transformations.push(transformation)\r\n        },\r\n        addResult(result) {\r\n            this.results.push(result)\r\n        },\r\n        removeResult(id) {\r\n            const i = this.results.findIndex(m => m.id === id)\r\n            if (i > -1) {\r\n                this.results.splice(i, 1);\r\n            }\r\n        },\r\n        getResultVisualizations(id) {\r\n            const i = this.results.findIndex(m => m.id === id)\r\n            if (i > -1) {\r\n                let tables = this.results[i].tables;\r\n                let plots = this.results[i].plots;\r\n                return [tables, plots]\r\n            }\r\n        },\r\n        resetDF() {\r\n            this.df = {}\r\n        },\r\n        updateFeature(feature) {\r\n            let index = this.features.findIndex(m => m.name === feature.name);\r\n            if (index !== -1) {\r\n                this.features[index] = feature\r\n            }\r\n        },\r\n        removeItem(name) {\r\n            const i = this.features.lastIndexOf(name)\r\n            if (i > -1) this.features.splice(i, 1)\r\n        },\r\n        setTarget(target) {\r\n            this.target = target\r\n        },\r\n        setmodelTask(type) {\r\n            this.isClassification = type\r\n        },\r\n        setActiveTab(index) {\r\n            this.activeTab = index\r\n        },\r\n        setResultActiveTab(index) {\r\n            this.resultActiveTab = index\r\n        }\r\n    },\r\n})\r\n\r\n","<template>\r\n    <div class=\"column is-12\">\r\n        <b-field class=\"file is-warning\" :class=\"{ 'has-name': !!file }\">\r\n            <b-upload accept=\".csv,.txt,.xlsx\" v-model=\"file\" class=\"file-label\">\r\n                <span class=\"file-cta\">\r\n                    <b-icon pack=\"fas\" class=\"file-icon\" icon=\"upload\"></b-icon>\r\n                    <span class=\"file-label\">{{ this.settings.datasetName || \"Upload\" }}</span>\r\n                </span>\r\n            </b-upload>\r\n        </b-field>\r\n        <b-field>\r\n            <b-checkbox v-model=\"header\">Header</b-checkbox>\r\n        </b-field>\r\n        <b-field label=\"Separator\" :label-position=\"'on-border'\">\r\n            <b-select :expanded=\"true\" v-model=\"separator\" size=\"is-small\">\r\n                <option v-for=\"option in separatorOptions\" :value=\"option.id\" :key=\"option.id\">\r\n                    {{ option.label }}\r\n                </option>\r\n            </b-select>\r\n        </b-field>\r\n        <b-field label=\"Decimal\" :label-position=\"'on-border'\">\r\n            <b-select :expanded=\"true\" v-model=\"decimal\" size=\"is-small\" :label-position=\"'on-border'\">\r\n                <option v-for=\"option in decimalOptions\" :value=\"option.id\" :key=\"option.id\">\r\n                    {{ option.label }}\r\n                </option>\r\n            </b-select>\r\n        </b-field>\r\n        <b-field label=\"Sample data\" :label-position=\"'on-border'\">\r\n            <b-select :expanded=\"true\" @input=\"handleFileSelect\" size=\"is-small\">\r\n                <option v-for=\"option in samplDataOptions\" :value=\"option.name\" :key=\"option.id\">\r\n                    {{ option.name }}\r\n                </option>\r\n            </b-select>\r\n        </b-field>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { ParserFactory } from '../helpers/parser/parser_factory.js'\r\nimport { DataFrame } from 'danfojs/dist/danfojs-base';\r\nimport { settingStore } from '@/stores/settings'\r\n\r\nconst DATASET_SIZE = 10000;\r\nexport default {\r\n    setup() {\r\n        const settings = settingStore()\r\n        return { settings }\r\n    },\r\n    name: 'UploadComponent',\r\n    props: {\r\n        msg: String\r\n    },\r\n    data() {\r\n        return {\r\n            sampleDataset: 0,\r\n            file: null,\r\n            separator: 2,\r\n            header: true,\r\n            decimal: 1,\r\n            decimalOptions:\r\n                [\r\n                    {\r\n                        id: 1,\r\n                        label: '.',\r\n                    }, {\r\n                        id: 2,\r\n                        label: ',',\r\n                    }]\r\n            ,\r\n            separatorOptions:\r\n                [\r\n                    {\r\n                        id: 1,\r\n                        label: '.',\r\n                    }, {\r\n                        id: 2,\r\n                        label: ',',\r\n                    }\r\n                    , {\r\n                        id: 3,\r\n                        label: 'space',\r\n                    }]\r\n            ,\r\n            samplDataOptions:\r\n                [\r\n                    {\r\n                        id: 0,\r\n                        name: 'none',\r\n\r\n                    },\r\n                    {\r\n                        id: 1,\r\n                        name: 'iris',\r\n\r\n                    }, {\r\n                        id: 2,\r\n                        name: 'wine',\r\n                    }\r\n                    , {\r\n                        id: 3,\r\n                        name: 'diabetes',\r\n                    }]\r\n            ,\r\n        }\r\n    },\r\n    watch: {\r\n        file: async function (val) {\r\n            try {\r\n                let dataset = await this.process_file(val, val.name.split('.')[1])\r\n                this.initDataframe(dataset, val.name.split('.')[0])\r\n            } catch (error) {\r\n                this.$buefy.toast.open('Failed to parse the dataset.')\r\n            }\r\n\r\n        }\r\n    },\r\n\r\n    methods: {\r\n        initDataframe(dataset, name) {\r\n            this.settings.resetFeatures();\r\n            this.settings.setDatasetName(name);\r\n            this.settings.setDatasetShape({ count: dataset.$data.length, columns: dataset.columns.length });\r\n            this.settings.setDataframe(dataset)\r\n            this.$emit('uploaded', true)\r\n        },\r\n        async process_file(file, type) {\r\n            let options = {\r\n                separator: this.separator,\r\n                delimiter: this.decimal,\r\n                header: this.header\r\n            }\r\n            let processdDataset = await ParserFactory.createParser(type, options).parse(file)\r\n            if (processdDataset.length > DATASET_SIZE) {\r\n                processdDataset = processdDataset.slice(0, DATASET_SIZE)\r\n            }\r\n            let dataFrame = new DataFrame(processdDataset)\r\n            return dataFrame\r\n        },\r\n        async handleFileSelect(name) {\r\n            name += '.csv';\r\n            let current = this;\r\n            let file;\r\n            fetch('/' + name)\r\n                .then(response => response.blob())\r\n                .then(async blob => {\r\n                    file = new File([blob], name);\r\n                    let dataframe = await this.process_file(file, 'csv');\r\n                    current.initDataframe(dataframe, name.split('.')[0])\r\n                })\r\n                .catch(error => {\r\n                    console.error('Error fetching the file:', error);\r\n                });\r\n        },\r\n    }\r\n}\r\n</script>\r\n\r\n<style></style>","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./upload-component.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./upload-component.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./upload-component.vue?vue&type=template&id=2aca0dc6\"\nimport script from \"./upload-component.vue?vue&type=script&lang=js\"\nexport * from \"./upload-component.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","export const FeatureCategories = {\r\n    \"Numerical\": {\r\n        id: 1,\r\n        name: \"Numerical\"\r\n    }\r\n    , \"Nominal\": {\r\n        id: 2,\r\n        name: \"Nominal\"\r\n    }\r\n    , \"Ordinal\": {\r\n        id: 3,\r\n        name: \"Ordinal\"\r\n    }\r\n};\r\nexport const CV_OPTIONS = {\r\n    SPLIT: 1,\r\n    NO: 2,\r\n    KFOLD: 3\r\n}\r\nexport const REGRESSION = 1;\r\nexport const CLASSIFICATION = 2;\r\n\r\n\r\nexport const ScaleOptions = {\r\n    \"No\": {\r\n        id: 0,\r\n        name: \"No\",\r\n    },\r\n    \"Scale\": {\r\n        id: 1,\r\n        name: \"Scale\"\r\n    }\r\n    , \"x^2\": {\r\n        id: 2,\r\n        name: \"x^2\"\r\n    }\r\n    , \"ln(x)\": {\r\n        id: 3,\r\n        name: \"ln(x)\"\r\n    }, \"Standardize\": {\r\n        id: 4,\r\n        name: \"Standardize\"\r\n    }\r\n}\r\nexport const Settings = {\r\n    \"classification\": {\r\n        \"logistic_regression\": {\r\n            \"id\": 1,\r\n            \"label\": \"Logistic Regression\",\r\n            \"value\": 1,\r\n            \"options\": {\r\n                \"regularization\": {\r\n                    \"label\": \"regulrization\",\r\n                    \"type\": \"select\",\r\n                    default: \"no\",\r\n                    value: \"no\",\r\n                    \"values\": [{ label: \"No\", value: \"no\" }, { label: \"adaptive lasso\", value: \"lasso\" }, { label: \"ridge\", value: \"ridge\" }]\r\n                }\r\n            }\r\n        },\r\n        \"discriminant_analysis\": {\r\n            \"id\": 2,\r\n            \"label\": \"Discriminant Analysis\",\r\n            \"value\": 2,\r\n            \"options\": {\r\n                \"type\": {\r\n                    \"label\": \"type\",\r\n                    \"type\": \"select\",\r\n                    default: \"linear\",\r\n                    \"values\": [{ label: \"linear\", value: \"linear\" }, { label: \"quadratic\", value: \"quadratic\" }]\r\n                },\r\n                \"priors\": {\r\n                    label: \"priors\",\r\n                    type: \"text\",\r\n                    placeholder: \"comma separated priors\"\r\n                },\r\n            }\r\n        },\r\n        \"k_nearest_neighbour\": {\r\n            \"id\": 3,\r\n            \"label\": \"k nearest neighbour\",\r\n            \"value\": 3,\r\n            \"options\": {\r\n                \"min\": {\r\n                    \"label\": \"min\",\r\n                    type: \"number\",\r\n                    default: 3\r\n                },\r\n                \"max\": {\r\n                    \"label\": \"max\",\r\n                    type: \"number\",\r\n                    default: 9\r\n                },\r\n                \"metric\": {\r\n                    label: \"metrics\",\r\n                    type: \"select\",\r\n                    default: \"manhattan\",\r\n                    values: [{ label: \"euclidean\", value: \"euclidean\" }, { label: \"manhattan\", value: \"manhattan\" }]\r\n                },\r\n            },\r\n        },\r\n        \"support_vector_machine\": {\r\n            \"id\": 4,\r\n            \"label\": \"Support vector machine\",\r\n            \"value\": 4,\r\n            \"options\": {\r\n                \"kernel\": {\r\n                    label: 'kernel',\r\n                    type: \"select\",\r\n                    default: \"RBF\",\r\n                    values: [{ label: \"RBF\", value: \"RBF\" }, { label: \"Linear\", value: \"Linear\" }, { label: \"Polynomial\", value: \"Polynomial\" }\r\n                        , { label: \"Sigmoid\", value: \"Sigmoid\" }]\r\n                },\r\n                \"gamma\": {\r\n                    \"label\": \"gamma\",\r\n                    type: \"number\",\r\n                    for: [\"RBF\", \"Sigmoid\", \"Polynomial\"],\r\n                    default: 1\r\n                },\r\n                \"bias\": {\r\n                    \"label\": \"bias\",\r\n                    type: \"number\",\r\n                    for: [\"Sigmoid\", \"Sigmoid\"],\r\n                    default: 0\r\n                },\r\n                \"degree\": {\r\n                    label: 'degree',\r\n                    type: \"number\",\r\n                    for: [\"Polynomial\"],\r\n                    default: 3\r\n                },\r\n            },\r\n        },\r\n        \"random_forest\": {\r\n            \"id\": 5,\r\n            \"label\": \"Random forest\",\r\n            \"value\": 5,\r\n            \"options\": {\r\n                \"estimators\": {\r\n                    label: \"estimators\",\r\n                    type: \"number\",\r\n                    default: 100\r\n                },\r\n                \"features\": {\r\n                    label: \"features\",\r\n                    type: \"number\",\r\n                    default: \"sqrt\"\r\n                },\r\n                \"depth\": {\r\n                    label: \"depth\",\r\n                    type: \"number\",\r\n                    default: 5\r\n                },\r\n                \"criteria\": {\r\n                    label: \"criteria\",\r\n                    type: \"select\",\r\n                    default: \"gini\",\r\n                    \"values\": [{ label: \"gini\", value: \"gini\" }, { label: \"log loss\", value: \"log_loss\" },\r\n                    { label: \"entropy\", value: \"entropy\" }]\r\n                }\r\n            },\r\n        },\r\n        \"boosting\": {\r\n            \"id\": 6,\r\n            \"label\": \"Boosting\",\r\n            \"value\": 6,\r\n            \"options\": {\r\n                \"booster\": {\r\n                    type: \"select\",\r\n                    label: \"booster\",\r\n                    default: \"gbtree\",\r\n                    values: [{ label: \"gbtree\", value: \"gbtree\" }, { label: \"gblinear\", value: \"gblinear\" }, { label: \"dart\", value: \"dart\" }]\r\n                },\r\n                \"eta\": {\r\n                    label: \"learning rate\",\r\n                    type: \"number\",\r\n                    default: 0.3\r\n                },\r\n                \"estimators\": {\r\n                    label: \"estimators\",\r\n                    type: \"number\",\r\n                    default: 200\r\n                },\r\n                \"depth\": {\r\n                    label: \"depth\",\r\n                    type: \"number\",\r\n                    default: 5\r\n                },\r\n\r\n            },\r\n        },\r\n        \"naive_bayes\": {\r\n            \"label\": \"Naive Bayes\",\r\n            \"value\": 7,\r\n            \"id\": 7,\r\n            \"options\": {\r\n                \"laplace\": {\r\n                    label: \"laplace smoothing\",\r\n                    type: \"number\",\r\n                    default: 0.05\r\n                },\r\n                \"priors\": {\r\n                    label: \"priors\",\r\n                    type: \"text\",\r\n                    placeholder: \"comma separated priors\"\r\n                },\r\n                \"type\": {\r\n                    label: \"type\",\r\n                    type: \"select\",\r\n                    default: \"Gaussian\",\r\n                    values: [{ label: \"Gaussian\", value: \"Gaussian\" }, { label: \"Multinomial\", value: \"Multinomial\" }, { label: \"Bernoulli\", value: \"Bernoulli\" }]\r\n                }\r\n            }\r\n\r\n        },\r\n    },\r\n    \"regression\": {\r\n        \"linear_regression\": {\r\n            \"label\": \"Linear Regression\",\r\n            \"value\": 9,\r\n            \"id\": 9,\r\n\r\n            \"feature_selection\": [\"no\", \"Lasso\", \"ridge\"],\r\n            \"criteria\": [\"AIC\", \"BIC\", \"AR2\",],\r\n            \"options\": {\r\n                \"regularization\": {\r\n                    label: \"regularization\",\r\n                    type: \"select\",\r\n                    default: \"Lasso\",\r\n                    values: [{ label: \"adaptive lasso\", value: \"Lasso\" }, { label: \"Ridge\", value: \"Ridge\" }]\r\n                }\r\n            }\r\n        },\r\n        \"polynomial_regression\": {\r\n            \"label\": \"Polynomial Regression\",\r\n            \"value\": 14,\r\n            \"id\": 14,\r\n            \"feature_selection\": [\"no\", \"Lasso\", \"ridge\"],\r\n            \"criteria\": [\"AIC\", \"BIC\", \"AR2\",],\r\n            \"options\": {\r\n                \"regularization\": {\r\n                    label: \"regularization\",\r\n                    type: \"select\",\r\n                    default: \"Lasso\",\r\n                    values: [{ label: \"Lasso\", value: \"Lasso\" }, { label: \"Ridge\", value: \"Ridge\" }]\r\n                },\r\n                \"degree\": {\r\n                    label: \"Degree\",\r\n                    type: \"number\",\r\n                    default: 2,\r\n                }\r\n            }\r\n        },\r\n        \"k_nearest_neighbour\": {\r\n            \"label\": \"k nearest neighbour Regression\",\r\n            \"value\": 10,\r\n            \"id\": 10,\r\n            \"options\": {\r\n                \"min\": {\r\n                    label: \"min\",\r\n                    type: \"number\",\r\n                    default: 3\r\n                },\r\n                \"max\": {\r\n                    label: \"max\",\r\n                    type: \"number\",\r\n                    default: 9\r\n                },\r\n            },\r\n        },\r\n        \"boosting\": {\r\n            \"label\": \"Boosting Regression\",\r\n            \"value\": 11,\r\n            \"id\": 11,\r\n            \"options\": {\r\n                \"booster\": {\r\n                    label: \"booster\",\r\n                    type: \"select\",\r\n                    default: \"gbtree\",\r\n                    values: [{ label: \"gbtree\", value: \"gbtree\" }, { label: \"gblinear\", value: \"gblinear\" }, { label: \"dart\", value: \"dart\" }]\r\n                },\r\n                \"eta\": {\r\n                    label: \"learning rate\",\r\n                    type: \"number\",\r\n                    default: 0.3\r\n                },\r\n                \"estimators\": {\r\n                    label: \"estimators\",\r\n                    type: \"number\",\r\n                    default: 200\r\n                },\r\n                \"depth\": {\r\n                    label: \"depth\",\r\n                    type: \"number\",\r\n                    default: 5\r\n                },\r\n\r\n            },\r\n        },\r\n        \"support_vector_machine\": {\r\n            \"label\": \"Support vector machine Regression\",\r\n            \"value\": 12,\r\n            \"id\": 12,\r\n            \"options\": {\r\n                \"kernel\": {\r\n                    label: \"kernel\",\r\n                    type: \"select\",\r\n                    default: \"RBF\",\r\n                    values: [{ label: \"RBF\", value: \"RBF\" }, { label: \"Linear\", value: \"Linear\" }, { label: \"Polynomial\", value: \"Polynomial\" }\r\n                        , { label: \"Sigmoid\", value: \"Sigmoid\" }]\r\n                },\r\n                \"gamma\": {\r\n                    label: \"gamma\",\r\n                    type: \"number\",\r\n                    for: [\"RBF\", \"Sigmoid\", \"Polynomial\"],\r\n                    default: 1\r\n                },\r\n                \"bias\": {\r\n                    label: \"bias\",\r\n                    type: \"number\",\r\n                    for: [\"Sigmoid\", \"Sigmoid\"],\r\n                    default: 0\r\n                },\r\n                \"degree\": {\r\n                    label: \"degree polynomial\",\r\n                    type: \"number\",\r\n                    for: [\"Polynomial\"],\r\n                    default: 3\r\n                },\r\n            },\r\n        },\r\n        \"random_forest\": {\r\n            \"label\": \"Random forest Regression\",\r\n            \"value\": 13,\r\n            \"id\": 13,\r\n            \"options\": {\r\n                \"estimators\": {\r\n                    label: \"boostnumber of estimators\",\r\n                    type: \"number\",\r\n                    default: 100\r\n                },\r\n                \"features\": {\r\n                    label: \"features length\",\r\n                    type: \"number\",\r\n                    default: \"sqrt\"\r\n                },\r\n                \"depth\": {\r\n                    label: \"depth\",\r\n                    type: \"number\",\r\n                    default: 5\r\n                },\r\n                \"criteria\": {\r\n                    type: \"select\",\r\n                    label: \"criteria\",\r\n                    default: \"squared_error\",\r\n                    \"values\": [{ label: \"squared_error\", value: \"squared_error\" }, { label: \"absolute_error\", value: \"absolute_error\" },\r\n                    { label: \"friedman_mse\", value: \"friedman_mse\" }, { label: \"poisson\", value: \"poisson\" }]\r\n                }\r\n            },\r\n        },\r\n        \"kernel_regression\": {\r\n            \"label\": \"Kernel Regression\",\r\n            \"value\": 15,\r\n            \"id\": 15,\r\n            \"options\": {\r\n                \"estimators\": {\r\n                    type: \"number\",\r\n                    default: 100\r\n                },\r\n            },\r\n        },\r\n        \"bspline_regression\": {\r\n            \"label\": \"Bspline Regression\",\r\n            \"value\": 16,\r\n            \"id\": 16,\r\n\r\n            \"options\": {\r\n                \"knots\": {\r\n                    label: \"knots\",\r\n                    type: \"number\",\r\n                    default: 5\r\n                },\r\n                \"degree\": {\r\n                    label: \"degree\",\r\n                    type: \"number\",\r\n                    default: 3\r\n                },\r\n            },\r\n        },\r\n    },\r\n};","const pyodideWorker = new Worker(new URL('./webworker.js', import.meta.url))\r\n\r\nconst callbacks = {};\r\n\r\npyodideWorker.onmessage = (event) => {\r\n    const { id, ...data } = event.data;\r\n    const onSuccess = callbacks[id];\r\n    delete callbacks[id];\r\n    onSuccess(data);\r\n};\r\n\r\nconst asyncRun = (() => {\r\n    let id = 0; // identify a Promise\r\n    return (script, context) => {\r\n        // the id could be generated more carefully\r\n        id = (id + 1) % Number.MAX_SAFE_INTEGER;\r\n        return new Promise((onSuccess) => {\r\n            callbacks[id] = onSuccess;\r\n            pyodideWorker.postMessage({\r\n                ...context,\r\n                python: script,\r\n                id,\r\n            });\r\n        });\r\n    };\r\n})();\r\n\r\nexport { asyncRun };","import { asyncRun } from \"../py-worker\";\r\nexport default class PCA {\r\n    constructor() {\r\n    }\r\n    async predict(x) {\r\n        this.context = {\r\n            x_train: x,\r\n\r\n        };\r\n        const script = `\r\n        import matplotlib.pyplot as plt\r\n        import numpy as np\r\n        from sklearn.decomposition import PCA\r\n        from js import x_train       \r\n        # Perform t-SNE dimensionality reduction\r\n        pca_x = PCA()\r\n        pca = pca_x.fit_transform(np.array(x_train))\r\n        (pca,np.arange(1, len(pca_x.explained_variance_ratio_) + 1), pca_x.explained_variance_ratio_)\r\n    `;\r\n        try {\r\n            const { results, error } = await asyncRun(script, this.context);\r\n            if (results) {\r\n                console.log(\"pyodideWorker return results: \", results);\r\n                return results;\r\n            } else if (error) {\r\n                console.log(\"pyodideWorker error: \", error);\r\n            }\r\n        } catch (e) {\r\n            console.log(\r\n                `Error in pyodideWorker at ${e.filename}, Line: ${e.lineno}, ${e.message}`,\r\n            );\r\n        }\r\n    }\r\n\r\n}\r\n","/* eslint-disable no-undef */\r\nimport { asyncRun } from \"./py-worker\";\r\nimport { MinMaxScaler, StandardScaler, LabelEncoder, getDummies } from 'danfojs/dist/danfojs-base';\r\nimport { FeatureCategories, Settings } from '../helpers/settings'\r\n\r\nimport * as Papa from 'papaparse';\r\nasync function parseCsv(data) {\r\n    return new Promise(resolve => {\r\n        data = data.map((row) => {\r\n            return Object.keys(row).sort().map(key => parseFloat(row[key]));\r\n        });\r\n        resolve(data);\r\n    });\r\n}\r\n\r\n/**\r\n * Downloads and returns the csv.\r\n *\r\n * @param {string} filename Name of file to be loaded.\r\n *\r\n * @returns {Promise.Array<number[]>} Resolves to parsed csv data.\r\n */\r\nexport async function loadCsv(filename) {\r\n    return new Promise(resolve => {\r\n        const url = `${BASE_URL}${filename}.csv`;\r\n\r\n        console.log(`  * Downloading data from: ${url}`);\r\n        Papa.parse(url, {\r\n            download: true,\r\n            header: true,\r\n            complete: (results) => {\r\n                resolve(parseCsv(results['data']));\r\n            }\r\n        })\r\n    });\r\n}\r\n\r\n/**\r\n * Shuffles data and label using Fisher-Yates algorithm.\r\n */\r\nexport async function shuffle(data, label) {\r\n    let counter = data.length;\r\n    let temp = 0;\r\n    let index = 0;\r\n    while (counter > 0) {\r\n        index = (Math.random() * counter) | 0;\r\n        counter--;\r\n        // data:\r\n        temp = data[counter];\r\n        data[counter] = data[index];\r\n        data[index] = temp;\r\n        // label:\r\n        temp = label[counter];\r\n        label[counter] = label[index];\r\n        label[index] = temp;\r\n    }\r\n}\r\n\r\n/**\r\n * Calculate the arithmetic mean of a vector.\r\n *\r\n * @param {Array} vector The vector represented as an Array of Numbers.\r\n *\r\n * @returns {number} The arithmetic mean.\r\n */\r\nfunction mean(vector) {\r\n    let sum = 0;\r\n    for (const x of vector) {\r\n        sum += x;\r\n    }\r\n    return sum / vector.length;\r\n}\r\n\r\n/**\r\n * Calculate the standard deviation of a vector.\r\n *\r\n * @param {Array} vector The vector represented as an Array of Numbers.\r\n *\r\n * @returns {number} The standard deviation.\r\n */\r\nfunction stddev(vector) {\r\n    let squareSum = 0;\r\n    const vectorMean = mean(vector);\r\n    for (const x of vector) {\r\n        squareSum += (x - vectorMean) * (x - vectorMean);\r\n    }\r\n    return Math.sqrt(squareSum / (vector.length - 1));\r\n}\r\n\r\n/**\r\n * Normalize a vector by its mean and standard deviation.\r\n *\r\n * @param {Array} vector Vector to be normalized.\r\n * @param {number} vectorMean Mean to be used.\r\n * @param {number} vectorStddev Standard Deviation to be used.\r\n *\r\n * @returns {Array} Normalized vector.\r\n */\r\nconst normalizeVector = (vector, vectorMean, vectorStddev) => {\r\n    return vector.map(x => (x - vectorMean) / vectorStddev);\r\n};\r\n\r\n/**\r\n * Normalizes the dataset\r\n *\r\n * @param {Array} dataset Dataset to be normalized.\r\n * @param {boolean} isTrainData Whether it is training data or not.\r\n * @param {Array} vectorMeans Mean of each column of dataset.\r\n * @param {Array} vectorStddevs Standard deviation of each column of dataset.\r\n *\r\n * @returns {Object} Contains normalized dataset, mean of each vector column,\r\n *                   standard deviation of each vector column.\r\n */\r\nexport function normalizeDataset(\r\n    dataset, isTrainData = true, vectorMeans = [], vectorStddevs = []) {\r\n    const numFeatures = dataset[0].length;\r\n    let vectorMean;\r\n    let vectorStddev;\r\n\r\n    for (let i = 0; i < numFeatures; i++) {\r\n        const vector = dataset.map(row => row[i]);\r\n\r\n        if (isTrainData) {\r\n            vectorMean = mean(vector);\r\n            vectorStddev = stddev(vector);\r\n\r\n            vectorMeans.push(vectorMean);\r\n            vectorStddevs.push(vectorStddev);\r\n        } else {\r\n            vectorMean = vectorMeans[i];\r\n            vectorStddev = vectorStddevs[i];\r\n        }\r\n\r\n        const vectorNormalized =\r\n            normalizeVector(vector, vectorMean, vectorStddev);\r\n\r\n        vectorNormalized.forEach((value, index) => {\r\n            dataset[index][i] = value;\r\n        });\r\n    }\r\n\r\n    return { dataset, vectorMeans, vectorStddevs };\r\n}\r\n\r\n/**\r\n * Binarizes a tensor based on threshold of 0.5.\r\n *\r\n * @param {tf.Tensor} y Tensor to be binarized.\r\n * @param {number} threshold (default: 0.5).\r\n * @returns {tf.Tensor} Binarized tensor.\r\n */\r\nexport function binarize(y, threshold) {\r\n    if (threshold == null) {\r\n        threshold = 0.5;\r\n    }\r\n    tf.util.assert(\r\n        threshold >= 0 && threshold <= 1,\r\n        `Expected threshold to be >=0 and <=1, but got ${threshold}`);\r\n\r\n    return tf.tidy(() => {\r\n        const condition = y.greater(tf.scalar(threshold));\r\n        return tf.where(condition, tf.onesLike(y), tf.zerosLike(y));\r\n    });\r\n}\r\nexport function encode_name(key) {\r\n    let str_encoded = key.replace(/\\s/g, '').replace(/[^\\w-]/g, '_');\r\n    return str_encoded\r\n}\r\nexport function calculatePrecision(classIndex, confusionMatrix) {\r\n    let truePositive = confusionMatrix[classIndex][classIndex];\r\n    let falsePositive = 0;\r\n\r\n    for (let i = 0; i < confusionMatrix.length; i++) {\r\n        if (i !== classIndex) {\r\n            falsePositive += confusionMatrix[i][classIndex];\r\n        }\r\n    }\r\n\r\n    if (truePositive === 0 && falsePositive === 0) {\r\n        return 1;\r\n    }\r\n\r\n    return truePositive / (truePositive + falsePositive);\r\n}\r\n\r\nexport function calculateRecall(classIndex, confusionMatrix) {\r\n    let truePositive = confusionMatrix[classIndex][classIndex];\r\n    let falseNegative = 0;\r\n    for (let i = 0; i < confusionMatrix.length; i++) {\r\n        falseNegative += confusionMatrix[classIndex][i];\r\n    }\r\n    falseNegative -= truePositive;\r\n    if (truePositive === 0 && falseNegative === 0) {\r\n        return 1;\r\n    }\r\n    return truePositive / (truePositive + falseNegative);\r\n}\r\n\r\n\r\nexport function calculateF1Score(classIndex, confusionMatrix) {\r\n    const precision = calculatePrecision(classIndex, confusionMatrix);\r\n    const recall = calculateRecall(classIndex, confusionMatrix);\r\n    return (2 * precision * recall) / (precision + recall);\r\n}\r\n\r\nexport async function metrics(y, y_pred, labels) {\r\n    const context = {\r\n        y: y,\r\n        y_pred: y_pred,\r\n        labels: labels\r\n    };\r\n    const script = `\r\n        from sklearn.metrics import precision_recall_fscore_support, classification_report, f1_score,accuracy_score\r\n        from js import y_pred,y,labels       \r\n        from sklearn.metrics import recall_score,precision_score\r\n\r\n        precision = precision_score(y, y_pred, average=None,labels=labels)\r\n        recall = recall_score(y, y_pred, average=None,labels=labels)\r\n        f1_micro = f1_score(y, y_pred, average='micro')\r\n        f1_macro = f1_score(y, y_pred, average='macro')\r\n        accuracy = accuracy_score(y, y_pred)\r\n        (precision,recall,f1_micro,f1_macro,accuracy)\r\n    `;\r\n    try {\r\n        const { results, error } = await asyncRun(script, context);\r\n        if (results) {\r\n            return results;\r\n        } else if (error) {\r\n            throw error\r\n        }\r\n    } catch (e) {\r\n        throw (\"Something went wrong\", e)\r\n    }\r\n}\r\nexport function calculateRSquared(actual, predicted) {\r\n    const meanActual = mean_array(actual);\r\n    const totalSumOfSquares = actual.reduce((acc, val) => acc + Math.pow(val - meanActual, 2), 0);\r\n    const residualSumOfSquares = actual.reduce((acc, val, index) => acc + Math.pow(val - predicted[index], 2), 0);\r\n    return 1 - (residualSumOfSquares / totalSumOfSquares);\r\n}\r\nexport function calculateMSE(actualValues, predictedValues) {\r\n    if (actualValues.length !== predictedValues.length) {\r\n        throw new Error(\"The lengths of actual values and predicted values must be the same.\");\r\n    }\r\n\r\n    const n = actualValues.length;\r\n    let sumSquaredError = 0;\r\n\r\n    for (let i = 0; i < n; i++) {\r\n        const squaredError = Math.pow(actualValues[i] - predictedValues[i], 2);\r\n        sumSquaredError += squaredError;\r\n    }\r\n\r\n    const meanSquaredError = sumSquaredError / n;\r\n    return meanSquaredError;\r\n}\r\nfunction mean_array(array) {\r\n    return array.reduce((acc, val) => acc + val, 0) / array.length;\r\n}\r\nexport function evaluate_classification(predictions, y_test, encoder) {\r\n    console.assert(predictions.length === y_test.length, \"predictions and test should have the same length.\")\r\n    let missclassification_indexes = []\r\n    let missclassification_preds = []\r\n    let currect_classifications_sum = 0\r\n    y_test.forEach((element, i) => {\r\n        if (element === predictions[i]) {\r\n            currect_classifications_sum++\r\n        } else {\r\n            missclassification_indexes.push(i)\r\n            let label = [predictions[i]]\r\n            let result = encoder.inverseTransform(label)\r\n            missclassification_preds.push(result[0])\r\n\r\n        }\r\n    });\r\n    return {\r\n        accuracy: Number((currect_classifications_sum / predictions.length) * 100),\r\n        indexes: missclassification_indexes,\r\n        mispredictions: missclassification_preds\r\n    }\r\n}\r\nexport function scale_data(dataset, column, normalization_type) {\r\n    try {\r\n\r\n\r\n        switch (normalization_type) {\r\n            case \"1\":\r\n                {\r\n                    let scaler = new MinMaxScaler()\r\n                    scaler.fit(dataset[column])\r\n                    dataset.addColumn(column, scaler.transform(dataset[column]), { inplace: true })\r\n                    break;\r\n                }\r\n            case \"2\":\r\n                dataset.addColumn(column, dataset[column].apply((x) => x * x), { inplace: true })\r\n                break;\r\n            case \"3\":\r\n                dataset.addColumn(column, dataset[column].apply((x) => {\r\n                    let ln = Math.log(x);\r\n                    if (isNaN(ln)) {\r\n                        throw new Error('falied at data transformation.');\r\n                    }\r\n                    return Math.log(x)\r\n                }\r\n                ), { inplace: true })\r\n                break;\r\n            case \"4\":\r\n                {\r\n                    let scaler = new StandardScaler()\r\n                    scaler.fit(dataset[column])\r\n                    dataset.addColumn(column, scaler.transform(dataset[column]), { inplace: true })\r\n                    break;\r\n                }\r\n            default:\r\n                break;\r\n        }\r\n    } catch (error) {\r\n        throw new Error('falied at data transformation.')\r\n    }\r\n}\r\nexport function applyDataTransformation(dataset, column_names, transformations) {\r\n    for (let i = 0; i < column_names.length; i++) {\r\n        const column = column_names[i];\r\n        let transformation = transformations.find(transformation => transformation.name === column)\r\n        if (transformation && transformation !== \"0\") {\r\n            scale_data(dataset, column, transformation.scaler.toString())\r\n        }\r\n    }\r\n    return dataset\r\n}\r\nexport function handle_missing_values(data_frame, impute = false) {\r\n    // to do normalization\r\n    if (impute) {\r\n        let string_columns = []\r\n        let numeric_columns = []\r\n        let string_column_modes = []\r\n        let numeric_column_means = []\r\n        data_frame.columns.forEach((item) => {\r\n            if (data_frame.column(item)?.dtype === 'string') {\r\n                string_columns.push(item)\r\n            } else {\r\n                numeric_columns.push(item)\r\n            }\r\n        })\r\n        string_columns.forEach(element => {\r\n            let mode = getCategoricalMode(data_frame.column(element).values).mode\r\n            string_column_modes.push(mode)\r\n        });\r\n        numeric_columns.forEach(element => {\r\n            let mean = data_frame.column(element).mean()\r\n            numeric_column_means.push(mean)\r\n        });\r\n        data_frame = data_frame.fillNa(string_column_modes, { columns: string_columns })\r\n        data_frame = data_frame.fillNa(numeric_column_means, { columns: numeric_columns })\r\n    } else {\r\n        data_frame.dropNa({ axis: 1, inplace: true })\r\n    }\r\n    return data_frame\r\n}\r\nexport function getCategoricalMode(arr) {\r\n    if (arr.length === 0) {\r\n        return null;\r\n    }\r\n\r\n    const categoryCount = {};\r\n    categoryCount['total'] = 0\r\n    categoryCount['mode'] = ''\r\n    for (let i = 0; i < arr.length; i++) {\r\n        const category = arr[i];\r\n        if (category === null || category === undefined) {\r\n            continue\r\n        }\r\n        categoryCount['total']++\r\n        if (category in categoryCount) {\r\n            categoryCount[category]++;\r\n        } else {\r\n            categoryCount[category] = 1;\r\n        }\r\n    }\r\n\r\n    let modeCategory = null;\r\n    let modeCount = 0;\r\n    for (const category in categoryCount) {\r\n        if (category === 'total') {\r\n            continue\r\n        }\r\n        if (categoryCount[category] > modeCount) {\r\n            modeCategory = category;\r\n            modeCount = categoryCount[category];\r\n        }\r\n    }\r\n    categoryCount['mode'] = modeCategory;\r\n    return categoryCount;\r\n}\r\nexport function encode_dataset(data_frame, columns_types, model) {\r\n    let df = data_frame.copy()\r\n\r\n    let categorical_columns = columns_types.filter(column => column.type === FeatureCategories.Nominal.id || column.type === FeatureCategories.Ordinal.id)\r\n    let categoriclaFeaturesAfterEncoding = []\r\n    categorical_columns.forEach((column) => {\r\n        if (column.type === FeatureCategories.Ordinal.id) {\r\n            let encoder = new LabelEncoder()\r\n            encoder.fit(df[column.name])\r\n            let encoded_column = encoder.transform(df[column.name])\r\n            df.addColumn(column.name, encoded_column.values, { inplace: true })\r\n            categoriclaFeaturesAfterEncoding.push(column.name)\r\n        } else {\r\n            df = getDummies(df, { columns: [column.name] })\r\n            if (model === Settings.classification.logistic_regression.label || model === Settings.regression.linear_regression.label || model === Settings.regression.polynomial_regression.label) {\r\n                df.drop({ columns: [df.columns.find(m => m.includes(column.name + \"_\"))], inplace: true });\r\n            }\r\n            categoriclaFeaturesAfterEncoding.push(...df.columns.filter(m => m.includes(column.name + \"_\")))\r\n\r\n        }\r\n    })\r\n\r\n    return [df, categoriclaFeaturesAfterEncoding]\r\n}\r\n\r\n\r\n","/* eslint-disable no-unused-vars */\r\n/* eslint-disable no-undef */\r\nimport Plotly from 'danfojs/node_modules/plotly.js-dist-min';\r\nimport PCA from './dimensionality-reduction/pca';\r\nimport { binarize } from './utils'\r\nimport * as ss from \"simple-statistics\"\r\nimport { schemeCategory10 } from 'd3-scale-chromatic';\r\nimport { FeatureCategories } from \"./settings\";\r\nimport { metrics as ClassificationMetric, encode_name } from './utils.js';\r\nimport { metrics } from '@tensorflow/tfjs-vis';\r\nimport { scale_data } from './utils';\r\nimport { tensorflow } from 'danfojs/dist/danfojs-base';\r\n\r\nexport default class ChartController {\r\n    constructor() {\r\n        this.color_scheme = schemeCategory10;\r\n    }\r\n\r\n    // eslint-disable-next-line no-unused-vars\r\n    classification_target_chart(values, labels, name, container, title = \"\") {\r\n        var uniqueLabels = [...new Set(labels)];\r\n        var colorIndices = labels.map(label => this.indexToColor(uniqueLabels.indexOf(label)));\r\n        var data = [];\r\n        data.push({\r\n            name: \"Count\",\r\n            data: values.map((item, i) => ({ y: item, color: colorIndices[i] }))\r\n        })\r\n\r\n        Highcharts.chart(container, {\r\n            credits: {\r\n                enabled: false\r\n            },\r\n            title: {\r\n                text: \"\"\r\n            },\r\n            chart: {\r\n                type: 'column'\r\n            },\r\n            xAxis: {\r\n                categories: uniqueLabels,\r\n            },\r\n            yAxis: {\r\n                min: 0,\r\n            },\r\n            plotOptions: {\r\n                column: {\r\n                    pointPadding: 0.1,\r\n                    borderWidth: 0\r\n                }\r\n            },\r\n            colors: colorIndices,\r\n            series: data\r\n        });\r\n    }\r\n    regression_target_chart(items, container, name) {\r\n        let kde_data = [];\r\n        let ys = [];\r\n        let items_range = items\r\n        var breaks = ss.equalIntervalBreaks(items_range, 100);\r\n        let kde = ss.kernelDensityEstimation(items, 'gaussian', 'nrd');\r\n        breaks.forEach((item) => {\r\n            ys.push(kde(item, 'nrd'));\r\n            kde_data.push([item, ys[ys.length - 1]]);\r\n        });\r\n\r\n\r\n        Highcharts.chart(container, {\r\n            credits: {\r\n                enabled: false\r\n            },\r\n            legend: {\r\n                enabled: false,\r\n                verticalAlign: 'top',\r\n            },\r\n            chart: {\r\n                height: '300',\r\n                type: \"spline\",\r\n                animation: true,\r\n            },\r\n            title: {\r\n                text: name // Assuming `column` is defined elsewhere\r\n            },\r\n            yAxis: {\r\n                title: { text: null }\r\n            },\r\n            tooltip: {\r\n                valueDecimals: 3\r\n            },\r\n            plotOptions: {\r\n                series: {\r\n                    marker: {\r\n                        enabled: false\r\n                    },\r\n                    dashStyle: \"shortdot\",\r\n                    area: true\r\n                }\r\n            },\r\n            series: [{\r\n                type: 'area',\r\n                dashStyle: \"solid\",\r\n                lineWidth: 2,\r\n                data: kde_data\r\n            }]\r\n        });\r\n    }\r\n    draw_categorical_barplot(column_values, target, title) {\r\n        const key = title + \"- barplot\";\r\n        $(\"#categories_barplots\").append(`<div class=\"column is-4\" style=\"height:40vh;\" id=\"${key}\"></div>`)\r\n        const countOccurrences = column_values.reduce((acc, val) => {\r\n            acc[val] = (acc[val] || 0) + 1;\r\n            return acc;\r\n        }, {});\r\n        const countArray = Object.entries(countOccurrences).map(([value, count]) => ({ value: value, count }));\r\n        countArray.sort((a, b) => b.count - a.count);\r\n        const top5 = countArray.slice(0, 5);\r\n        new Highcharts.Chart({\r\n            chart: {\r\n                renderTo: key,\r\n                type: 'column'\r\n            },\r\n            xAxis: {\r\n                categories: top5.map(m => m.value),\r\n            },\r\n            title: {\r\n                text: title\r\n            },\r\n            yAxis: {\r\n                min: 0,\r\n                labels: {\r\n                    overflow: 'justify'\r\n                }\r\n            },\r\n            credits: {\r\n                enabled: false\r\n            },\r\n            plotOptions: {\r\n                bar: {\r\n                    dataLabels: {\r\n                        enabled: true\r\n                    }\r\n                }\r\n            },\r\n            series: [{\r\n                showInLegend: false,\r\n                name: title,\r\n                data: top5.map(m => m.count)\r\n            }]\r\n        });\r\n\r\n    }\r\n    roc_chart(container, true_positive_rates, false_positive_rates) {\r\n        var trace = {\r\n            x: false_positive_rates,\r\n            y: true_positive_rates,\r\n            type: 'scatter',\r\n            mode: 'lines',\r\n            name: 'ROC Curve',\r\n        };\r\n        var trace2 = {\r\n            x: [0, 1],\r\n            y: [0, 1],\r\n            type: 'scatter',\r\n            name: 'diagonal',\r\n        };\r\n        var layout = {\r\n            title: 'ROC Curve',\r\n            xaxis: { title: 'False Positive Rate' },\r\n            yaxis: { title: 'True Positive Rate' },\r\n        };\r\n\r\n        var data = [trace, trace2];\r\n\r\n        Plotly.newPlot(container, data, layout);\r\n    }\r\n    falsePositives(yTrue, yPred) {\r\n        return tf.tidy(() => {\r\n            const one = tf.scalar(1);\r\n            const zero = tf.scalar(0);\r\n            return tf.logicalAnd(yTrue.equal(zero), yPred.equal(one))\r\n                .sum()\r\n                .cast('float32');\r\n        });\r\n    }\r\n    indexToColor(index) {\r\n        return this.color_scheme[index + 1 % this.color_scheme.length];\r\n    }\r\n    reshape(array, shape) {\r\n        if (shape.length === 0) return array[0];\r\n\r\n        const [size, ...restShape] = shape;\r\n        const result = [];\r\n        const restSize = restShape.reduce((a, b) => a * b, 1);\r\n        console.log(restSize);\r\n\r\n        for (let i = 0; i < size; i++) {\r\n            result.push(this.reshape(array.slice(i * restSize, (i + 1) * restSize), restShape));\r\n        }\r\n\r\n        return result;\r\n    }\r\n    async plot_tsne(data, labels, regression_labels) {\r\n        document.getElementById(\"dimensionality_reduction_panel_tsne\").style.display = \"block\"\r\n        console.assert(Array.isArray(data));\r\n        // Create some data\r\n        // const items = tf.randomUniform([2000, 10]);\r\n\r\n        // Get a tsne optimizer\r\n        const tsneOpt = tsne.tsne(tensorflow.tensor2d(data));\r\n\r\n        // Compute a T-SNE embedding, returns a promise.\r\n        // Runs for 1000 iterations by default.\r\n        await tsneOpt.compute();\r\n        // tsne.coordinate returns a *tensor* with x, y coordinates of\r\n        // the embedded data.\r\n        const coordinates = tsneOpt.coordinates();\r\n        // let model = new TSNE();\r\n        // var Y = await model.train(data)\r\n        const items = coordinates.dataSync()\r\n        const Y = this.reshape(items, coordinates.shape)\r\n        let x = []\r\n        let traces = []\r\n        if (labels.length > 0) {\r\n            labels = labels.flat()\r\n            var uniqueLabels = [...new Set(labels)];\r\n            let points_labled = Y.map(function (item, i) {\r\n                return {\r\n                    label: labels[i],\r\n                    'x': item[0],\r\n                    'y': item[1]\r\n                }\r\n            }\r\n            )\r\n            uniqueLabels.forEach((label, i) => {\r\n                var items_for_label = points_labled.filter(m => m.label === label)\r\n                traces.push({\r\n                    x: items_for_label.map(m => m.x),\r\n                    y: items_for_label.map(m => m.y),\r\n                    mode: 'markers',\r\n                    type: 'scatter',\r\n                    name: label,\r\n                    marker: {\r\n                        size: 4,\r\n                        color: this.indexToColor(i),\r\n                    }\r\n                })\r\n            })\r\n        } else {\r\n            let points = Y.map(function (item, i) {\r\n                x.push(regression_labels[i][0])\r\n                return {\r\n                    'x': item[0],\r\n                    'y': item[1]\r\n                }\r\n            })\r\n            traces.push({\r\n                x: x,\r\n                y: points.map(m => m.y),\r\n                mode: 'markers+text',\r\n                type: 'scatter',\r\n                colorscale: 'viridis',\r\n\r\n                marker: {\r\n                    size: 4,\r\n                    color: x,\r\n                    colorbar: {\r\n                        title: 'Color Scale',\r\n                        titleside: 'right'\r\n                    }\r\n                },\r\n            })\r\n\r\n        }\r\n\r\n        var layout = {\r\n            showlegend: true,\r\n            margin: {\r\n                l: 50,\r\n                r: 40,\r\n                b: 50,\r\n                t: 40,\r\n                pad: 20\r\n            },\r\n            xaxis: {\r\n                linecolor: 'black',\r\n                linewidth: 1,\r\n                mirror: true,\r\n            },\r\n            yaxis: {\r\n                linecolor: 'black',\r\n                linewidth: 1,\r\n                mirror: true,\r\n            },\r\n            legend: {\r\n                x: 1,\r\n                xanchor: 'right',\r\n                y: 1\r\n            },\r\n        };\r\n        Plotly.newPlot('tsne', traces, layout, { responsive: true, modeBarButtonsToRemove: ['resetScale2d', 'select2d', 'resetViews', 'sendDataToCloud', 'hoverCompareCartesian', 'lasso2d', 'drawopenpath '] });\r\n\r\n    }\r\n    trueNegatives(yTrue, yPred) {\r\n        return tf.tidy(() => {\r\n            const zero = tf.scalar(0);\r\n            return tf.logicalAnd(yTrue.equal(zero), yPred.equal(zero))\r\n                .sum()\r\n                .cast('float32');\r\n        });\r\n    }\r\n\r\n    // TODO(cais): Use tf.metrics.falsePositiveRate when available.\r\n    falsePositiveRate(yTrue, yPred) {\r\n        return tf.tidy(() => {\r\n            const fp = this.falsePositives(yTrue, yPred);\r\n            const tn = this.trueNegatives(yTrue, yPred);\r\n            return fp.div(fp.add(tn));\r\n        });\r\n    }\r\n    drawROC(targets, probs) {\r\n\r\n        return tf.tidy(() => {\r\n            const thresholds = [\r\n                0.0, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55,\r\n                0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.92, 0.94, 0.96, 0.98, 1.0\r\n            ];\r\n            const tprs = [];  // True positive rates.\r\n            const fprs = [];  // False positive rates.\r\n            let area = 0;\r\n            for (let i = 0; i < thresholds.length; ++i) {\r\n                const threshold = thresholds[i];\r\n                const threshPredictions = binarize(probs, threshold).as1D();\r\n\r\n                const fpr = this.falsePositiveRate(targets, threshPredictions).dataSync()[0];\r\n                const tpr = tf.metrics.recall(targets, threshPredictions).dataSync()[0];\r\n\r\n                fprs.push(fpr);\r\n                tprs.push(tpr);\r\n                // Accumulate to area for AUC calculation.\r\n                if (i > 0) {\r\n                    area += (tprs[i] + tprs[i - 1]) * (fprs[i - 1] - fprs[i]) / 2;\r\n                }\r\n            }\r\n            return [area, fprs, tprs];\r\n        });\r\n    }\r\n    nrd(x) {\r\n        let s = ss.standardDeviation(x);\r\n        const iqr = ss.interquartileRange(x);\r\n        if (typeof iqr === \"number\") {\r\n            s = Math.min(s, iqr / 1.34);\r\n        }\r\n        return 1.06 * s * Math.pow(x.length, -0.2);\r\n    }\r\n    hexToRgb(hex) {\r\n        var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n        return result ? {\r\n            r: parseInt(result[1], 16),\r\n            g: parseInt(result[2], 16),\r\n            b: parseInt(result[3], 16),\r\n            a: 0.5\r\n        } : null;\r\n    }\r\n    kernelFunctions = {\r\n        gaussian: function (u) {\r\n            return Math.exp(-0.5 * u * u) / Math.sqrt(2 * Math.PI);\r\n        },\r\n        uniform: function (x) {\r\n            return Math.abs(x) <= 1 ? 0.5 : 0;\r\n        },\r\n        triangular: function (x) {\r\n            return Math.abs(x) <= 1 ? 1 - Math.abs(x) : 0;\r\n        },\r\n        biweight: function (x) {\r\n            return Math.abs(x) <= 1 ? 15 / 16 * Math.pow(1 - x * x, 2) : 0;\r\n        },\r\n        triweight: function (x) {\r\n            return Math.abs(x) <= 1 ? 35 / 32 * Math.pow(1 - x * x, 3) : 0;\r\n        },\r\n        Epanechnikov: function (x) {\r\n            return Math.abs(x) <= 1 ? 0.75 * (1 - x * x) : 0;\r\n        }\r\n    };\r\n\r\n    draw_kde(dataset, column, target_name, bandwidth = \"nrd\", is_classification = false, redrawing = false) {\r\n        try {\r\n\r\n\r\n            let items = dataset.column(column).values;\r\n            let default_bandwidth = this.nrd(items).toFixed(2);\r\n            let raw_values = dataset.loc({ columns: [column, target_name] });\r\n            let uniqueLabels = [...new Set(raw_values.column(target_name).values)];\r\n            if (uniqueLabels.length === 2) {\r\n                uniqueLabels.sort()\r\n            }\r\n            let column_values = raw_values.values;\r\n            let subsets = [];\r\n            var colorIndices = uniqueLabels.map(label => this.indexToColor(uniqueLabels.indexOf(label)));\r\n            if (!is_classification) {\r\n                subsets.push(dataset[column].values);\r\n            } else {\r\n                for (let i = 0; i < uniqueLabels.length; i++) {\r\n                    const label = uniqueLabels[i];\r\n                    let subset = [];\r\n                    for (let i = 0; i < column_values.length; i++) {\r\n                        const item = column_values[i];\r\n                        if (item[1] === label) {\r\n                            subset.push(item[0])\r\n                        }\r\n                    }\r\n                    subsets.push(subset);\r\n                }\r\n            }\r\n\r\n            document.getElementById(\"kde_panel\").style.display = \"block\";\r\n\r\n            var newColumn = document.createElement(\"div\");\r\n            newColumn.className = \"column is-3\";\r\n            newColumn.setAttribute(\"id\", column + '-kde-plot');\r\n            if (!redrawing) {\r\n                let key = encode_name(column)\r\n\r\n                $(\"#container\").append(\r\n                    `<div class=\"column is-4 is-size-6-tablet my-1\">\r\n                <div class=\"columns is-multiline\">\r\n                <div class=\"column is-12\" >\r\n                    <div id=\"${key + '-kde-plot'}\"> </div>\r\n                    <div id=\"${key + '-boxplot'}\" style=\"height:20vh;width: 100%\">\r\n                    </div>\r\n                    <div class=\"field has-addons has-addons-centered my-1\">\r\n                    <div class=\"control\">\r\n                    <span class=\"select is-small\">\r\n                      <select id=\"${key + '-kernel_type'}\">\r\n                      <option value=\"gaussian\">gaussian</option>\r\n                        <option value=\"uniform\">uniform</option>\r\n                        <option value=\"triangular\">triangular</option>\r\n                        <option value=\"biweight\">biweight</option>\r\n                        <option value=\"triweight\">triweight</option>\r\n                        <option value=\"Epanechnikov\">Epanechnikov</option>\r\n                      </select>\r\n                    </span>\r\n                    <p class=\"help is-success\">Kernel</p>\r\n                  </div>\r\n                  <div class=\"control\">\r\n                        <div class=\"select is-small\">\r\n                            <select id=\"${key + '--normal'}\">\r\n                                <option value=\"0\">No</option>\r\n                                <option value=\"1\">Scale</option>\r\n                                <option value=\"2\">x^2</option>\r\n                                <option value=\"3\">ln(x)</option>\r\n                                <option value=\"4\">Standardize </option>\r\n                            </select>\r\n                        </div>\r\n                    <p class=\"help is-success\">Normalization</p>\r\n                    </div>\r\n                        <div class=\"control\">\r\n                            <input class=\"input is-small\" type=\"number\"  min=\"0\" id=\"${key + '-kde'}\" value=\"${default_bandwidth}\">\r\n                            <p class=\"help is-success\">Bandwidth</p>\r\n                        </div>\r\n                        <p class=\"control\">\r\n                            <a class=\"button is-success is-small\" id=\"${key + '-kde-button'}\">\r\n                                Apply\r\n                            </a>\r\n                        </div>\r\n                    </div>\r\n                  </div>\r\n                </div>`\r\n                );\r\n                document.getElementById(key + '--normal').addEventListener('change', function () {\r\n                    const target = document.getElementById(\"target\").value;\r\n                    let is_classification = document.getElementById(target).value !== FeatureCategories.Numerical;\r\n                    let data = dataset.loc({ columns: [column, target] });\r\n                    let normalization_type = document.getElementById(key + '--normal').value\r\n                    scale_data(data, column, normalization_type)\r\n                    data.dropNa({ axis: 1, inplace: true })\r\n                    var newBandwidth = parseFloat(document.getElementById(key + '-kde').value);\r\n                    current_class.draw_kde(data, column, target, newBandwidth, is_classification, true);\r\n                });\r\n            }\r\n            var current_class = this;\r\n            let key = encode_name(column)\r\n\r\n            document.getElementById(key + '-kde-button').addEventListener(\"click\", function () {\r\n                const target = document.getElementById(\"target\").value;\r\n                let is_classification = document.getElementById(target).value !== FeatureCategories.Numerical;\r\n                let data = dataset.loc({ columns: [column, target] });\r\n                let normalization_type = document.getElementById(key + '--normal').value\r\n                scale_data(data, column, normalization_type)\r\n                var newBandwidth = parseFloat(document.getElementById(key + '-kde').value);\r\n                data.dropNa({ axis: 1, inplace: true })\r\n                current_class.draw_kde(data, column, target, newBandwidth, is_classification, true);\r\n            });\r\n            let container_id = key + '-kde-plot';\r\n            let items_range = [...raw_values.column(column).values]\r\n            // let minValue = Math.min(...items_range);\r\n            // let maxValue = Math.max(...items_range);\r\n            // items_range.push(minValue - parseFloat(default_bandwidth))\r\n            // items_range.push(maxValue + parseFloat(default_bandwidth))\r\n            var breaks = ss.equalIntervalBreaks(items_range, 100);\r\n            let allData = [];\r\n            let kernel_type = document.getElementById(key + \"-kernel_type\")?.value ?? \"gaussian\"\r\n            // Loop through subsets to generate data for all subsets\r\n            let traces = []\r\n            let kde;\r\n            if (is_classification) {\r\n                for (let i = 0; i < subsets.length; i++) {\r\n                    if (subsets[i].length > 2) {\r\n                        let ys = [];\r\n                        kde = ss.kernelDensityEstimation(subsets[i], this.kernelFunctions[kernel_type], bandwidth);\r\n                        let data = [];\r\n                        breaks.forEach((item) => {\r\n                            ys.push(kde(item, bandwidth));\r\n                            data.push([item, ys[ys.length - 1]]);\r\n                        });\r\n                        allData.push(data);\r\n                    } else {\r\n                        allData.push([]);\r\n                    }\r\n                    traces.push({\r\n                        name: uniqueLabels[i],\r\n                        x: subsets[i],\r\n                        marker: {\r\n                            color: colorIndices[i]\r\n                        },\r\n                        type: 'box',\r\n                    })\r\n                }\r\n            } else {\r\n                for (let i = 0; i < subsets.length; i++) {\r\n                    if (subsets[i].length > 2) {\r\n                        let ys = [];\r\n                        kde = ss.kernelDensityEstimation(subsets[i], this.kernelFunctions[kernel_type], bandwidth);\r\n                        let data = [];\r\n                        breaks.forEach((item) => {\r\n                            ys.push(kde(item, bandwidth));\r\n                            data.push([item, ys[ys.length - 1]]);\r\n                        });\r\n                        allData.push(data);\r\n                    } else {\r\n                        allData.push([]);\r\n                    }\r\n                }\r\n                traces.push({\r\n                    name: column,\r\n                    x: items,\r\n                    type: 'box',\r\n                })\r\n            }\r\n\r\n            let animationDuration = 4000;\r\n\r\n            var layout = {\r\n\r\n                yaxis: {\r\n                    visible: false,\r\n                },\r\n                showlegend: false,\r\n                margin: {\r\n                    l: 20,\r\n                    r: 10,\r\n                    b: 60,\r\n                    t: 10,\r\n                },\r\n                legend: {\r\n                    x: 1,\r\n                    xanchor: 'right',\r\n                    y: 1\r\n                },\r\n            };\r\n            Plotly.newPlot(key + '-boxplot', traces, layout, { autosize: true, responsive: true, modeBarButtonsToRemove: ['pan', 'resetScale2d', 'select2d', 'resetViews', 'sendDataToCloud', 'hoverCompareCartesian', 'lasso2d', 'drawopenpath '] });\r\n            Highcharts.chart(container_id, {\r\n                credits: {\r\n                    enabled: false\r\n                },\r\n                legend: {\r\n                    enabled: is_classification ? true : false, align: 'right',\r\n                    verticalAlign: 'top',\r\n                },\r\n                chart: {\r\n                    height: '300',\r\n                    type: \"spline\",\r\n                    animation: true,\r\n                },\r\n                title: {\r\n                    text: column // Assuming `column` is defined elsewhere\r\n                },\r\n                yAxis: {\r\n                    title: { text: null }\r\n                },\r\n                tooltip: {\r\n                    valueDecimals: 3\r\n                },\r\n                plotOptions: {\r\n                    series: {\r\n                        marker: {\r\n                            enabled: false\r\n                        },\r\n                        dashStyle: \"shortdot\",\r\n                        color: colorIndices,\r\n                        animation: {\r\n                            duration: animationDuration\r\n                        },\r\n                        area: true\r\n                    }\r\n                },\r\n                series: allData.map((data, index) => ({\r\n                    type: 'area',\r\n                    name: uniqueLabels[index],\r\n                    dashStyle: \"solid\",\r\n                    lineWidth: 2,\r\n                    color: colorIndices[index],\r\n                    data: data\r\n                }))\r\n            });\r\n            window.dispatchEvent(new Event('resize'));\r\n        } catch (error) {\r\n            throw new Error('falied at plotting kde.')\r\n        }\r\n    }\r\n\r\n    async classificationPCA(dataset, labels, missclassifications, uniqueLabels, index) {\r\n\r\n        const pca = new PCA(dataset, { center: true, scale: true });\r\n        var colorIndices = labels.map(label => this.indexToColor(uniqueLabels.indexOf(label)));\r\n        const pca_data = await pca.predict(dataset, { nComponents: 2 })\r\n        let x = []\r\n        let y = []\r\n        let x_error = []\r\n        let y_error = []\r\n        let error_texts = []\r\n        let real_labels = []\r\n        pca_data[0].forEach((element, i) => {\r\n            if (missclassifications['indexes'].includes(i)) {\r\n                let index = missclassifications['indexes'].findIndex(index => index == i)\r\n                error_texts.push(dataset[i].join())\r\n                real_labels.push([labels[i], missclassifications['mispredictions'][index]])\r\n                x_error.push(element[0])\r\n                y_error.push(element[1])\r\n            } else {\r\n                x.push(element[0])\r\n                y.push(element[1])\r\n            }\r\n\r\n        });\r\n        var trace1 = {\r\n            x: x,\r\n            y: y,\r\n            name: 'Predictions',\r\n            text: labels,\r\n            mode: 'markers',\r\n            type: 'scatter',\r\n            marker: {\r\n                size: 4,\r\n                color: colorIndices,\r\n                symbol: 'circle'\r\n            },\r\n        };\r\n        var trace2 = {\r\n            name: 'Missclassifications',\r\n            x: x_error,\r\n            y: y_error,\r\n            text: error_texts,\r\n            customdata: real_labels,\r\n            mode: 'markers',\r\n            type: 'scatter',\r\n            marker: {\r\n                size: 7,\r\n                color: colorIndices,\r\n                symbol: 'cross'\r\n            },\r\n            hovertemplate:\r\n                \"Features : %{text}<br>\" +\r\n                \"True class: %{customdata[0]}<br>\" +\r\n                \"Predited class: %{customdata[1]}\" +\r\n                \"<extra></extra>\"\r\n\r\n        };\r\n        var data = [trace1, trace2];\r\n\r\n        Plotly.newPlot('pca_results_' + index, data, {\r\n            hovermode: \"closest\",\r\n            hoverlabel: { bgcolor: \"#FFF\" },\r\n            showlegend: true,\r\n            margin: {\r\n                l: 40,\r\n                r: 20,\r\n                b: 40,\r\n                t: 20,\r\n            },\r\n            legend: {\r\n                x: 1,\r\n                xanchor: 'right',\r\n                y: 1\r\n            },\r\n            xaxis: {\r\n                linecolor: 'black',\r\n                linewidth: 1,\r\n                mirror: true,\r\n                title: 'PC1'\r\n            },\r\n            yaxis: {\r\n                linecolor: 'black',\r\n                linewidth: 1,\r\n                mirror: true,\r\n                title: 'PC2'\r\n            }\r\n        }, { staticPlot: false, responsive: true, modeBarButtonsToRemove: ['resetScale2d', 'select2d', 'resetViews', 'sendDataToCloud', 'hoverCompareCartesian', 'lasso2d', 'drawopenpath '] });\r\n\r\n    }\r\n    async draw_pca(dataset, labels, regression_labels, x_axis, y_axis) {\r\n        const pca = new PCA(dataset, { center: true, scale: true });\r\n\r\n        labels = labels.flat()\r\n        var uniqueLabels = [...new Set(labels)];\r\n\r\n        const pca_x = await pca.predict(dataset, { nComponents: 3 })\r\n        const pca_data = pca_x[0]\r\n\r\n        let x = []\r\n        let pc1 = []\r\n        pca_data.forEach((element, i) => {\r\n            pc1.push({\r\n                x: element[x_axis - 1],\r\n                y: element[y_axis - 1],\r\n                label: labels[i]\r\n            })\r\n            x.push(regression_labels[i][0])\r\n        });\r\n        let traces1 = []\r\n        if (uniqueLabels.length !== 0) {\r\n            uniqueLabels.forEach((label, i) => {\r\n                var items_for_label = pc1.filter(m => m.label === label)\r\n                traces1.push({\r\n                    x: items_for_label.map(m => m.x),\r\n                    y: items_for_label.map(m => m.y),\r\n                    mode: 'markers',\r\n                    type: 'scatter',\r\n                    name: label,\r\n                    marker: {\r\n                        size: 4,\r\n                        color: this.indexToColor(i),\r\n                    }\r\n                })\r\n            })\r\n        } else {\r\n            traces1.push({\r\n                x: pc1.map(m => m.x),\r\n                y: pc1.map(m => m.y),\r\n                mode: 'markers',\r\n                type: 'scatter',\r\n                marker: {\r\n                    color: x,\r\n                    colorscale: 'YlOrRd',\r\n                    size: 4,\r\n                    colorbar: {\r\n                        title: 'Color Scale Legend',\r\n                        titleside: 'right'\r\n                    }\r\n                },\r\n\r\n            })\r\n        }\r\n        let cumulatedExplainedVaraince = []\r\n        let sum = 0\r\n        pca_x[2].forEach(element => {\r\n            sum = sum + element\r\n            cumulatedExplainedVaraince.push(sum)\r\n        });\r\n        Highcharts.chart('scree_plot', {\r\n            credits: {\r\n                enabled: false\r\n            },\r\n            title: {\r\n                text: '',\r\n            },\r\n            legend: {\r\n                verticalAlign: 'top',\r\n                align: 'left',\r\n                floating: true,\r\n            },\r\n            yAxis: {\r\n                linecolor: 'black',\r\n                linewidth: 1,\r\n                mirror: true,\r\n                min: 0,\r\n                max: 1,\r\n                title: {\r\n                    text: 'Explained variance'\r\n                },\r\n                plotLines: [{\r\n                    value: 0.9,\r\n                    dashStyle: 'shortdash',\r\n                    color: 'grey',\r\n                    width: 1,\r\n                    zIndex: 4,\r\n                    label: {\r\n                        text: '0.9', align: \"right\",\r\n                    }\r\n                }, {\r\n                    value: 0.8,\r\n                    dashStyle: 'shortdash',\r\n                    color: 'darkgrey',\r\n                    width: 1,\r\n                    zIndex: 4,\r\n                    label: {\r\n                        text: '0.8', align: \"right\",\r\n                    }\r\n                }]\r\n\r\n            },\r\n            xAxis: {\r\n\r\n                labels: {\r\n                    enabled: true,\r\n                    formatter: function () {\r\n                        return this.value + 1;\r\n                    }\r\n                },\r\n\r\n                title: {\r\n                    text: 'Number of components'\r\n                },\r\n            },\r\n            series: [{\r\n                name: 'Propotional',\r\n                color: \"blue\",\r\n                data: pca_x[2]\r\n            },\r\n            {\r\n                name: 'Cumulative',\r\n                color: \"red\",\r\n                data: cumulatedExplainedVaraince\r\n            }],\r\n\r\n        });\r\n        Plotly.newPlot('pca-1', traces1, {\r\n            showlegend: true,\r\n            margin: {\r\n                l: 40,\r\n                r: 40,\r\n                b: 40,\r\n                t: 40,\r\n                pad: 10\r\n            },\r\n            legend: {\r\n                x: 1,\r\n                xanchor: 'right',\r\n                y: 1\r\n            },\r\n            xaxis: {\r\n                linecolor: 'black',\r\n                linewidth: 1,\r\n                mirror: true,\r\n                title: 'PC' + x_axis\r\n            },\r\n            yaxis: {\r\n                linecolor: 'black',\r\n                linewidth: 1,\r\n                mirror: true,\r\n                title: 'PC' + y_axis\r\n            }\r\n        }, { responsive: true });\r\n    }\r\n    // eslint-disable-next-line no-unused-vars\r\n    drawStackedHorizontalChart(categories, lable) {\r\n        var trace1 = {\r\n            x: [20, 14, 23],\r\n            y: ['giraffes', 'orangutans', 'monkeys'],\r\n            name: 'SF Zoo',\r\n            orientation: 'h',\r\n            marker: {\r\n                color: 'rgba(55,128,191,0.6)',\r\n                width: 1\r\n            },\r\n            type: 'bar'\r\n        };\r\n\r\n        var trace2 = {\r\n            x: [12, 18, 29],\r\n            y: ['giraffes', 'orangutans', 'monkeys'],\r\n            name: 'LA Zoo',\r\n            orientation: 'h',\r\n            type: 'bar',\r\n            marker: {\r\n                color: 'rgba(255,153,51,0.6)',\r\n                width: 1\r\n            }\r\n        };\r\n\r\n        var data = [trace1, trace2];\r\n\r\n        var layout = {\r\n            title: 'Colored Bar Chart',\r\n            barmode: 'stack'\r\n        };\r\n\r\n        Plotly.newPlot('myDiv', data, layout);\r\n\r\n    }\r\n    regularization_plot(xs, ys, labels) {\r\n        const traces = []\r\n        labels.forEach((element, i) => {\r\n            traces.push({\r\n                x: xs,\r\n                y: ys.map(m => m[i]),\r\n                type: 'scatter',\r\n                name: element,\r\n                mode: 'line'\r\n            })\r\n        });\r\n        var layout = {\r\n            colorway: ['#f3cec9', '#e7a4b6', '#cd7eaf', '#a262a9', '#6f4d96', '#3d3b72', '#182844'],\r\n            title: 'Lasso Coefficients as Alpha varies',\r\n            xaxis: {\r\n                type: 'log',\r\n                title: 'Alpha (Regularization Strength)'\r\n            },\r\n            yaxis: {\r\n                title: 'Coefficient Value'\r\n            }\r\n        };\r\n        Plotly.newPlot('lasso_plot', traces, layout);\r\n    }\r\n    argmax(array) {\r\n        return array.reduce((maxIndex, currentValue, currentIndex, array) => {\r\n            return currentValue > array[maxIndex] ? currentIndex : maxIndex;\r\n        }, 0);\r\n    }\r\n    probabilities_boxplot(probs, labels, true_labels, index) {\r\n        true_labels.filter(m => m == 0).length\r\n        true_labels.filter(m => m == 1).length\r\n        var colorIndices = labels.map((label, i) => this.indexToColor(i));\r\n        const num_columns = probs[0].length;\r\n        let traces = [];\r\n\r\n        // Create subsets of probabilities based on the true labels\r\n        let subsets = {};\r\n        true_labels.forEach((true_label, i) => {\r\n            if (!(true_label in subsets)) {\r\n                subsets[true_label] = [];\r\n            }\r\n            subsets[true_label].push(probs[i]);\r\n        });\r\n        // Generate box plots for each true label class\r\n        for (let true_label in subsets) {\r\n            let subset = subsets[true_label];\r\n            for (let j = 0; j < num_columns; j++) {\r\n                let data = subset.map(item => item[j]);\r\n                traces.push({\r\n                    type: 'box',\r\n                    name: ` class ${true_label} : Predicted ${labels[j]}`,\r\n                    marker: {\r\n                        color: colorIndices[j]\r\n                    },\r\n                    y: data\r\n                });\r\n            }\r\n        }\r\n\r\n        // Create a div for the plot\r\n        let content = `\r\n            <div class=\"column is-6\" id=\"probs_box_plot_${index}\" style=\"height: 350px;\">\r\n            </div>\r\n        `;\r\n        $(\"#tabs_info li[data-index='\" + index + \"'] #results_\" + index + \"\").append(content);\r\n\r\n        // Plot the box plots using Plotly\r\n        Plotly.newPlot(\"probs_box_plot_\" + index, traces, {\r\n            yaxis: {\r\n                title: 'Predicted Probability'\r\n            },\r\n            legend: {\r\n                x: 1,\r\n                xanchor: 'right',\r\n                y: 1\r\n            },\r\n            margin: {\r\n                l: 60,\r\n                r: 30,\r\n                b: 60,\r\n                t: 0,\r\n                pad: 20\r\n            },\r\n            boxmode: 'group'\r\n        });\r\n    }\r\n    probablities_violin_plot(probs, classes, labels) {\r\n        var colorIndices = labels.map((label, i) => this.indexToColor(i));\r\n        const arrayColumn = (arr, n) => arr.map(x => x[n]);\r\n        const num_columns = probs[0].length\r\n        let traces = []\r\n        for (let i = 0; i < num_columns; i++) {\r\n            traces.push({\r\n                name: classes[i],\r\n                type: 'violin',\r\n                y: arrayColumn(probs, i),\r\n                points: 'none',\r\n                box: {\r\n                    visible: true\r\n                },\r\n                boxpoints: false,\r\n                line: {\r\n                    color: colorIndices[i]\r\n                },\r\n                fillcolor: colorIndices[i],\r\n                opacity: 0.6,\r\n                meanline: {\r\n                    visible: true\r\n                },\r\n\r\n            });\r\n        }\r\n        var layout = {\r\n            title: \"Violin Plot\",\r\n            yaxis: {\r\n                zeroline: false\r\n            }\r\n        }\r\n\r\n        Plotly.newPlot('probs_violin_plot', traces, layout);\r\n    }\r\n    async plotConfusionMatrix(y, predictedLabels, labels, uniqueClasses, tab_index) {\r\n\r\n        const confusionMatrix = await metrics.confusionMatrix(y, predictedLabels);\r\n        let metric = await ClassificationMetric(y.arraySync(), predictedLabels.arraySync(), uniqueClasses)\r\n        let accuracy = metric[4].toFixed(2);\r\n        let f1Micro = metric[2].toFixed(2)\r\n        let f1Macro = metric[3].toFixed(2)\r\n\r\n        let len = confusionMatrix[0].length\r\n        let preceissions = [];\r\n        let recalls = [];\r\n        for (let j = 0; j < len; j++) {\r\n            preceissions.push(parseFloat(metric[0][j].toFixed(2)))\r\n        }\r\n        for (let j = 0; j < len; j++) {\r\n            recalls.push(parseFloat(metric[1][j].toFixed(2)))\r\n        }\r\n        // div.innerHTML =\r\n        //     `<div class=\"column is-12\">\r\n\r\n        //     <span class=\"subtitle mb-1\">Accuracy: ${metric[4].toFixed(2)}, </span>\r\n        //     <span class=\"subtitle mr-2\">F1 micro: ${metric[3].toFixed(2)}, </span>\r\n        //     <span class=\"subtitle\">F1 macro: ${metric[3].toFixed(2)}</span>\r\n        //     </div>`\r\n        //     ;\r\n        // $(\"#tabs_info li[data-index='\" + tab_index + \"'] #results_\" + tab_index + \"\").append(div);\r\n        // $(\"#tabs_info li[data-index='\" + tab_index + \"'] #results_\" + tab_index + \"\").append(`\r\n        // <div class=\"column is-6\" id=\"confusion_matrix_${tab_index}\" style=\"height:50vh\">\r\n        // </div>\r\n        // `);\r\n        tensorflow.dispose(y)\r\n        tensorflow.dispose(predictedLabels)\r\n        const metric_labels = [\"Precession\", \"Recall\", \"F1 score\", \"Support\"]\r\n        labels.push(\"Precession\")\r\n        recalls.push(0)\r\n        confusionMatrix.push(preceissions)\r\n        let items_labels = labels.filter(x => !metric_labels.includes(x))\r\n        let formatted_matrix = []\r\n        for (let i = 0; i < confusionMatrix.length; i++) {\r\n            const element = confusionMatrix[i];\r\n            if (i < confusionMatrix.length - 1) {\r\n                element.push(recalls[i])\r\n            }\r\n            for (let j = 0; j < element.length; j++) {\r\n                const item = element[j];\r\n                formatted_matrix.push([j, i, item])\r\n            }\r\n        }\r\n        items_labels.push(\"Recall\")\r\n\r\n        Highcharts.chart(\"confusion_matrix_\" + tab_index, {\r\n            credits: {\r\n                enabled: false\r\n            },\r\n            exporting: {\r\n                enabled: true\r\n            },\r\n            chart: {\r\n                type: 'heatmap',\r\n                plotBorderWidth: 1\r\n            },\r\n            title: {\r\n                text: '',\r\n                style: {\r\n                    fontSize: '1em'\r\n                }\r\n            },\r\n\r\n            xAxis: [{\r\n                categories: items_labels,\r\n                title: {\r\n                    text: 'Predicted Class'\r\n                }\r\n            }, {\r\n                linkedTo: 0,\r\n                opposite: true,\r\n                tickLength: 0,\r\n                labels: {\r\n                    formatter: function () {\r\n                        var chart = this.chart,\r\n                            each = Highcharts.each,\r\n                            series = chart.series[0],\r\n                            sum = 0,\r\n                            x = this.value;\r\n\r\n                        each(series.options.data, function (p, i) {\r\n                            if (p[0] === x) {\r\n                                if (p[1] < uniqueClasses.length) {\r\n                                    sum += p[2];\r\n                                }\r\n                            }\r\n                        });\r\n\r\n                        return sum;\r\n                    }\r\n                }\r\n            }],\r\n            yAxis: [{\r\n                categories: labels,\r\n                title: {\r\n                    text: 'Actual Class'\r\n                },\r\n                reversed: true, endOnTick: false\r\n            }, {\r\n                linkedTo: 0,\r\n                opposite: true,\r\n                tickLength: 0,\r\n                labels: {\r\n                    formatter: function () {\r\n                        var chart = this.chart,\r\n                            each = Highcharts.each,\r\n                            series = chart.series[0],\r\n                            sum = 0,\r\n                            x = this.value;\r\n                        each(series.options.data, function (p, i) {\r\n                            if (p[1] === x) {\r\n                                if (p[1] < uniqueClasses.length) {\r\n                                    sum += p[2];\r\n                                }\r\n\r\n                            }\r\n                        });\r\n                        return sum;\r\n                    }\r\n                },\r\n                title: null\r\n            }],\r\n            colorAxis: {\r\n                min: 0,\r\n                minColor: '#FFFFFF',\r\n                maxColor: Highcharts.getOptions().colors[0]\r\n            },\r\n\r\n            legend: {\r\n                align: 'center',\r\n                layout: 'horizontal',\r\n                margin: 0,\r\n                verticalAlign: 'top',\r\n                y: 5,\r\n                symbolHeight: 10\r\n            },\r\n            series: [{\r\n                name: '',\r\n                borderWidth: 1,\r\n                data: formatted_matrix,\r\n                dataLabels: {\r\n                    enabled: true,\r\n                    useHTML: true,\r\n                    color: '#000000',\r\n                    formatter: function () {\r\n                        var totalCount = this.series.data.reduce(function (acc, cur, i) {\r\n                            if ((i + 1) % (uniqueClasses.length + 1) === 0) {\r\n                                return acc\r\n                            }\r\n                            return acc + cur?.value;\r\n                        }, 0);\r\n                        var count = this.point.value;\r\n                        var skip = this.point.index >= this.series.data.length - (1 * (uniqueClasses.length + 1));\r\n\r\n                        if (!skip && !((this.point.index + 1) % (uniqueClasses.length + 1) === 0)) {\r\n                            var percentage = ((count / totalCount) * 100).toFixed(2);\r\n                            return '<p style=\"margin:auto; text-align:center;\">' + count + '<br/>(' + percentage + '%)</p> ';\r\n                        } else {\r\n                            return '<p style=\"margin:auto; text-align:center;\">' + count + '</p>';\r\n                        }\r\n                    }\r\n                }\r\n            }],\r\n            responsive: {\r\n                rules: [{\r\n                    condition: {\r\n                        maxWidth: 500\r\n                    },\r\n                    chartOptions: {\r\n                        yAxis: {\r\n                            labels: {\r\n                                format: '{substr value 0 1}'\r\n                            }\r\n                        }\r\n                    }\r\n                }]\r\n            }\r\n        });\r\n        return [accuracy, f1Micro, f1Macro]\r\n    }\r\n    plot_regularization(weights, alphas, names, tab_index) {\r\n        let content = `\r\n                    <div class=\"column is-6\" id=\"regularization_${tab_index}\" style=\"height: 40vh;\">\r\n                    </div>\r\n    `\r\n        $(\"#tabs_info li[data-index='\" + tab_index + \"'] #results_\" + tab_index + \"\").append(content);\r\n\r\n        let serieses = []\r\n        for (let i = 0; i < names.length; i++) {\r\n            serieses.push({\r\n                name: names[i],\r\n                data: weights.map(m => m[i])\r\n            })\r\n        }\r\n        const alphas_formatted = [];\r\n        for (let i = 0; i < alphas.length; i++) {\r\n            alphas_formatted.push(alphas[i].toFixed(2));\r\n        }\r\n        Highcharts.chart(\"regularization_\" + tab_index, {\r\n\r\n            title: {\r\n                text: '',\r\n            },\r\n            yAxis: {\r\n                title: {\r\n                    text: 'Coefficients'\r\n                }\r\n            },\r\n            xAxis: {\r\n                title: {\r\n                    text: 'penalty weight'\r\n                },\r\n                categories: alphas_formatted,\r\n            },\r\n            legend: {\r\n                layout: 'vertical',\r\n                align: 'right',\r\n                verticalAlign: 'middle'\r\n            },\r\n\r\n            plotOptions: {\r\n                series: {\r\n                    label: {\r\n                        connectorAllowed: false\r\n                    },\r\n                }\r\n            },\r\n            series: serieses,\r\n            responsive: {\r\n                rules: [{\r\n                    condition: {\r\n                        maxWidth: 500\r\n                    },\r\n                    chartOptions: {\r\n                        legend: {\r\n                            layout: 'horizontal',\r\n                            align: 'center',\r\n                            verticalAlign: 'bottom'\r\n                        }\r\n                    }\r\n                }]\r\n            }\r\n        });\r\n    }\r\n    yhat_plot(y_test, predictions, container, title = '') {\r\n        Plotly.newPlot(container, [{\r\n            x: y_test,\r\n            y: predictions,\r\n            type: 'scatter',\r\n            name: \"y\",\r\n            mode: 'markers',\r\n        }, {\r\n            x: y_test,\r\n            y: y_test,\r\n            mode: 'lines',\r\n            type: 'scatter',\r\n            line: { color: 'red', dash: 'dash' },\r\n            name: 'y = x line'\r\n        }], {\r\n            title: {\r\n                text: title,\r\n                font: {\r\n                    family: 'sans-serif',\r\n                    size: 10\r\n                },\r\n                xref: 'paper',\r\n                x: 0.05,\r\n            },\r\n            showlegend: false,\r\n            xaxis: {\r\n                linecolor: 'black',\r\n                linewidth: 1,\r\n                mirror: true,\r\n                title: {\r\n                    text: 'y',\r\n                    font: {\r\n                        family: 'sans-serif',\r\n                        size: 14,\r\n                        color: '#7f7f7f'\r\n                    }\r\n                },\r\n            },\r\n            yaxis: {\r\n                linecolor: 'black',\r\n                linewidth: 1,\r\n                mirror: true,\r\n                title: {\r\n                    text: 'predictions',\r\n                    font: {\r\n                        family: 'sans-serif',\r\n                        size: 14,\r\n                        color: '#7f7f7f'\r\n                    }\r\n                }\r\n            },\r\n            margin: {\r\n                l: 40,\r\n                r: 10,\r\n                b: 40,\r\n                t: 20,\r\n                pad: 0\r\n            }\r\n        }, { responsive: true, });\r\n    }\r\n    residual_plot(y, residuals, container, title = '') {\r\n        Plotly.newPlot(container, [{\r\n            x: y,\r\n            y: residuals,\r\n            type: 'scatter',\r\n            name: \"y\",\r\n            mode: 'markers',\r\n            marker: {\r\n                color: 'rgb(17, 157, 255)',\r\n                size: 7\r\n            },\r\n        }], {\r\n            title: {\r\n                text: title,\r\n                font: {\r\n                    family: 'sans-serif',\r\n                    size: 10\r\n                },\r\n                xref: 'paper',\r\n                x: 0.05,\r\n            },\r\n            showlegend: false,\r\n            xaxis: {\r\n                linecolor: 'black',\r\n                linewidth: 1,\r\n                mirror: true,\r\n                title: {\r\n                    text: 'y',\r\n                    font: {\r\n                        family: 'sans-serif',\r\n                        size: 14,\r\n                        color: '#7f7f7f'\r\n                    }\r\n                },\r\n            },\r\n            yaxis: {\r\n                linecolor: 'black',\r\n                linewidth: 1,\r\n                mirror: true,\r\n                title: {\r\n                    text: 'residuals',\r\n                    font: {\r\n                        family: 'sans-serif',\r\n                        size: 14,\r\n                        color: '#7f7f7f'\r\n                    }\r\n                }\r\n            },\r\n            margin: {\r\n                l: 40,\r\n                r: 10,\r\n                b: 40,\r\n                t: 20,\r\n                pad: 0\r\n            }\r\n        }, { responsive: true, });\r\n    }\r\n\r\n    ScatterplotMatrix(items, features, labels, number_of_categoricals, is_classification = true, numeric_columns, categorical_columns, dataset) {\r\n        return new Promise((resolve, reject) => {\r\n            setTimeout(() => {\r\n                let unique_labels = [...new Set(labels)];\r\n                var colors = labels.map(label => this.indexToColor(unique_labels.indexOf(label)));\r\n                let traces = []\r\n                let index = 1;\r\n                if (unique_labels.length === 2) {\r\n                    unique_labels.sort()\r\n                }\r\n                for (let i = 0; i < features.length; i++) {\r\n                    for (let j = 0; j < features.length; j++) {\r\n                        if (i === j) {\r\n                            let subsets = [];\r\n                            let kde;\r\n                            let breaks = []\r\n                            let allData = []\r\n                            if (is_classification) {\r\n                                if (i >= features.length - number_of_categoricals) {\r\n                                    if (i === features.length - 1) {\r\n                                        for (let k = 0; k < unique_labels.length; k++) {\r\n                                            subsets.push(items.filter(m => m[items[0].length - 1] === unique_labels[k]).map(m => m[i]));\r\n                                        }\r\n                                        traces.push({\r\n                                            x: unique_labels,\r\n                                            y: subsets.map(set => set.length),\r\n                                            type: 'bar',\r\n                                            xaxis: 'x' + (index),\r\n                                            yaxis: 'y' + (index),\r\n                                            marker: {\r\n                                                color: unique_labels.map((_, z) => this.indexToColor(z))\r\n                                            }\r\n                                        })\r\n                                    } else {\r\n                                        let unique_labels_feature = [...new Set(items.map(m => m[i]))];\r\n                                        for (let k = 0; k < unique_labels.length; k++) {\r\n                                            let lablel_items = items.filter(m => m[items[0].length - 1] === unique_labels[k])\r\n                                            let counts = [];\r\n                                            unique_labels_feature.forEach(label =>\r\n                                                counts.push(lablel_items.filter(m => m[i] === label).length)\r\n                                            )\r\n                                            subsets.push({\r\n                                                items: lablel_items,\r\n                                                counts: counts\r\n                                            });\r\n                                        }\r\n                                        unique_labels.forEach((_, i) => {\r\n                                            traces.push({\r\n                                                x: unique_labels_feature,\r\n                                                y: subsets[i].counts,\r\n                                                type: 'bar',\r\n                                                xaxis: 'x' + (index),\r\n                                                yaxis: 'y' + (index),\r\n                                                marker: {\r\n                                                    color: this.indexToColor(i)\r\n                                                }\r\n                                            })\r\n                                        })\r\n                                    }\r\n                                } else {\r\n                                    for (let k = 0; k < unique_labels.length; k++) {\r\n                                        subsets.push(items.filter(m => m[items[0].length - 1] === unique_labels[k]).map(m => m[i]));\r\n                                    }\r\n                                    for (let ii = 0; ii < subsets.length; ii++) {\r\n                                        if (subsets[ii].length > 2) {\r\n                                            let default_bandwidth = this.nrd(subsets[ii]).toFixed(2);\r\n                                            breaks = ss.equalIntervalBreaks(subsets[ii], 100);\r\n\r\n                                            let ys = [];\r\n                                            kde = ss.kernelDensityEstimation(subsets[ii], 'gaussian', 'nrd');\r\n                                            let data = [];\r\n                                            breaks.forEach((item) => {\r\n                                                ys.push(kde(item, default_bandwidth));\r\n                                                data.push([item, ys[ys.length - 1]]);\r\n                                            });\r\n                                            allData.push(data);\r\n                                        } else {\r\n                                            allData.push([]);\r\n                                        }\r\n                                    }\r\n                                    for (let i = 0; i < allData.length; i++) {\r\n                                        traces.push({\r\n                                            type: 'scatter',\r\n                                            x: allData[i].map(m => m[0]),\r\n                                            y: allData[i].map(m => m[1]),\r\n                                            xaxis: 'x' + (index),\r\n                                            yaxis: 'y' + (index),\r\n                                            mode: 'lines',\r\n                                            name: 'Red',\r\n                                            fill: 'tozeroy',\r\n                                            line: {\r\n                                                color: this.indexToColor(i),\r\n                                                width: 3\r\n                                            }\r\n                                        })\r\n\r\n                                    }\r\n                                }\r\n\r\n                            } else {\r\n                                if (categorical_columns.includes(features[i])) {\r\n                                    let column_items = items.map(m => m[i]);\r\n                                    let unique_classes = [...new Set(column_items)];\r\n                                    let class_frequencies = []\r\n                                    for (let i = 0; i < unique_classes.length; i++) {\r\n                                        const class_label = unique_classes[i];\r\n                                        class_frequencies.push(column_items.filter(m => m === class_label).length)\r\n                                    }\r\n                                    traces.push({\r\n                                        x: unique_classes,\r\n                                        y: class_frequencies,\r\n                                        type: 'bar',\r\n                                        name: 'Trace 1',\r\n                                        xaxis: 'x' + (index),\r\n                                        yaxis: 'y' + (index),\r\n                                    })\r\n                                } else {\r\n                                    subsets.push(items.map(m => m[i]));\r\n                                    for (let i = 0; i < subsets.length; i++) {\r\n                                        if (subsets[i].length > 2) {\r\n                                            let ys = [];\r\n                                            let default_bandwidth = this.nrd(subsets[i]).toFixed(2);\r\n                                            breaks = ss.equalIntervalBreaks(subsets[i], 100);\r\n                                            kde = ss.kernelDensityEstimation(subsets[i], 'gaussian', 'nrd');\r\n                                            let data = [];\r\n                                            breaks.forEach((item) => {\r\n                                                ys.push(kde(item, default_bandwidth));\r\n                                                data.push([item, ys[ys.length - 1]]);\r\n                                            });\r\n                                            allData.push(data);\r\n                                        } else {\r\n                                            allData.push([]);\r\n                                        }\r\n                                    }\r\n                                    traces.push({\r\n                                        type: 'scatter',\r\n                                        x: allData[0].map(m => m[0]),\r\n                                        y: allData[0].map(m => m[1]),\r\n                                        mode: 'lines',\r\n                                        fill: 'tozeroy',\r\n                                        xaxis: 'x' + (index),\r\n                                        yaxis: 'y' + (index),\r\n                                        name: 'Red',\r\n                                        line: {\r\n                                            color: 'rgb(219, 64, 82)',\r\n                                            width: 3\r\n                                        }\r\n                                    })\r\n                                }\r\n\r\n                            }\r\n                        }\r\n                        else if (i === features.length - 1) {\r\n                            traces.push({\r\n                                y: items.map(m => m[i]),\r\n                                x: items.map(m => m[j]),\r\n                                color: colors,\r\n                                marker: {\r\n                                    colorscale: 'Portland',\r\n                                    color: is_classification ? colors : labels,\r\n                                    size: 2,\r\n                                },\r\n                                type: 'scattergl',\r\n                                mode: 'markers',\r\n                                xaxis: 'x' + (index),\r\n                                yaxis: 'y' + (index),\r\n                            })\r\n                        } else if (j >= features.length - number_of_categoricals) {\r\n                            if (!is_classification) {\r\n                                traces.push({\r\n                                    x: [],\r\n                                    y: [],\r\n                                    mode: 'lines',\r\n                                    name: 'Trace 1'\r\n                                })\r\n                            } else {\r\n                                let boxplot_labels = [...new Set(items.map(m => m[j]))]\r\n                                for (let m = 0; m < unique_labels.length; m++) {\r\n                                    for (let n = 0; n < boxplot_labels.length; n++) {\r\n                                        let box_items = items.filter(item => item[j] === boxplot_labels[n] && item[features.length - 1] === unique_labels[m])\r\n                                        if (box_items) {\r\n                                            traces.push({\r\n                                                orientation: 'v',\r\n                                                offsetgroup: \"1\",\r\n\r\n                                                name: boxplot_labels[n],\r\n                                                y: box_items.map(item => item[i]),\r\n                                                marker: {\r\n                                                    color: this.indexToColor(m)\r\n                                                },\r\n                                                type: 'box',\r\n                                                xaxis: 'x' + (index),\r\n                                                yaxis: 'y' + (index),\r\n                                            })\r\n                                        }\r\n\r\n                                    }\r\n\r\n                                }\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (j > i) {\r\n                                let arr1 = items.map(m => m[i])\r\n                                let arr2 = items.map(m => m[j])\r\n                                traces.push({\r\n                                    x: [1.5],\r\n                                    y: [1.5],\r\n                                    text: [jStat.corrcoeff(arr1, arr2).toFixed(2)],\r\n                                    mode: 'text',\r\n                                    textfont: {\r\n                                        size: 12, // Font size for the text\r\n                                        color: 'black'\r\n                                    },\r\n                                    xaxis: 'x' + (index),\r\n                                    yaxis: 'y' + (index),\r\n                                    type: 'scatter'\r\n                                });\r\n\r\n                            } else {\r\n                                traces.push({\r\n                                    y: items.map(m => m[i]),\r\n                                    x: items.map(m => m[j]),\r\n                                    color: colors,\r\n\r\n                                    type: 'scattergl',\r\n                                    mode: 'markers',\r\n                                    marker: {\r\n                                        colorscale: 'Portland',\r\n                                        color: is_classification ? colors : labels,\r\n                                        size: 2,\r\n                                    },\r\n                                    xaxis: 'x' + (index),\r\n                                    yaxis: 'y' + (index),\r\n                                })\r\n                            }\r\n                        }\r\n                        index++\r\n                    }\r\n\r\n                }\r\n\r\n                var layout = {\r\n                    width: features.length * 100,\r\n                    height: features.length * 100,\r\n                    spacing: 0,\r\n                    showlegend: false,\r\n                    boxmode: \"group\",\r\n                    grid: { rows: features.length, columns: features.length, pattern: 'independent' },\r\n                    margin: { r: 10, t: 10, pad: 5 },\r\n\r\n                };\r\n                for (var i = 0; i < features.length; i++) {\r\n                    for (var j = 0; j < features.length; j++) {\r\n                        var xAxisKey = 'xaxis' + ((i * features.length) + j + 1);\r\n                        var yAxisKey = 'yaxis' + ((i * features.length) + j + 1);\r\n                        let fontSize = 10;\r\n                        layout[xAxisKey] = {\r\n                            showgrid: false,\r\n                            showticklabels: false,\r\n                            tickfont: {\r\n                                size: fontSize\r\n                            },\r\n                        };\r\n                        layout[yAxisKey] = {\r\n                            showgrid: false,\r\n                            showticklabels: false,\r\n                            tickfont: {\r\n                                size: fontSize\r\n                            },\r\n                        };\r\n                        if (i === features.length - 1) {\r\n                            layout[xAxisKey] = {\r\n                                tickfont: {\r\n                                    size: fontSize\r\n                                },\r\n                                title: {\r\n                                    text: features[j], font: {\r\n                                        size: fontSize\r\n                                    },\r\n                                }\r\n                            };\r\n\r\n                        }\r\n                        if (j === 0) {\r\n                            layout[yAxisKey] = {\r\n                                tickfont: {\r\n                                    size: fontSize\r\n                                },\r\n                                title: {\r\n                                    text: features[i], font: {\r\n                                        size: fontSize\r\n                                    },\r\n                                }\r\n                            };\r\n                        }\r\n                    }\r\n                }\r\n\r\n                Plotly.react('scatterplot_mtx', traces, layout, {\r\n                    staticPlot: true\r\n                })\r\n                resolve()\r\n            }, 1000);\r\n        })\r\n    }\r\n\r\n    KNNPerformancePlot(results, optimalTrainSpec, optimalTestSpec, id) {\r\n        let traces = []\r\n        traces.push({\r\n            x: results.map(m => m.k),\r\n            y: results.filter(n => n.metric === 'manhattan').map(m => Number((m.evaluation.accuracy / 100).toFixed(2))),\r\n            mode: 'lines',\r\n            name: 'manhattan test set',\r\n            line: {\r\n                color: 'rgb(55, 128, 191)',\r\n                width: 2\r\n            }\r\n        });\r\n\r\n        traces.push({\r\n            x: results.map(m => m.k),\r\n            y: results.filter(n => n.metric === 'euclidean').map(m => Number((m.evaluation.accuracy / 100).toFixed(2))),\r\n            mode: 'lines',\r\n            name: 'euclidean test set',\r\n            line: {\r\n                color: 'rgb(219, 64, 82)',\r\n                width: 2\r\n            }\r\n        });\r\n        traces.push({\r\n            x: results.map(m => m.k),\r\n            y: results.filter(n => n.metric === 'manhattan').map(m => Number((m.evaluation_train.accuracy / 100).toFixed(2))),\r\n            mode: 'lines',\r\n            name: 'manhattan train set',\r\n            line: {\r\n                color: 'rgb(55, 128, 191)',\r\n                width: 1\r\n            }\r\n        });\r\n        traces.push({\r\n            x: results.map(m => m.k),\r\n            y: results.filter(n => n.metric === 'euclidean').map(m => Number((m.evaluation_train.accuracy / 100).toFixed(2))),\r\n            mode: 'lines',\r\n            name: 'euclidean train set',\r\n            line: {\r\n                color: 'rgb(219, 64, 82)',\r\n                width: 1\r\n            }\r\n        });\r\n        var min_y = Number.POSITIVE_INFINITY;\r\n        var max_y = Number.NEGATIVE_INFINITY;\r\n        traces.forEach(trace => {\r\n            let min = Math.min(...trace.y)\r\n            let max = Math.max(...trace.y)\r\n            if (min < min_y) {\r\n                min_y = min\r\n            }\r\n            if (max > max_y) {\r\n                max_y = max\r\n            }\r\n\r\n        })\r\n        var layout = {\r\n            showlegend: true,\r\n            legend: {\r\n                \"orientation\": \"h\",\r\n                font: {\r\n                    family: 'sans-serif',\r\n                    size: 8,\r\n                    color: '#000'\r\n                },\r\n            },\r\n            xaxis: {\r\n                linecolor: 'black',\r\n                linewidth: 1,\r\n                mirror: true,\r\n                title: {\r\n                    text: 'K',\r\n                },\r\n            },\r\n            yaxis: {\r\n                linecolor: 'black',\r\n                linewidth: 1,\r\n                mirror: true,\r\n                title: {\r\n                    text: 'Accuracy',\r\n                }\r\n            },\r\n            shapes: [\r\n                {\r\n                    type: 'line',\r\n                    x0: optimalTrainSpec.k,\r\n                    y0: min_y,\r\n                    x1: optimalTrainSpec.k,\r\n                    y1: max_y,\r\n                    line: {\r\n                        color: 'rgb(55, 128, 191)',\r\n                        width: 1\r\n                    }\r\n                }, {\r\n                    type: 'line',\r\n                    x0: optimalTestSpec.k,\r\n                    y0: min_y,\r\n                    x1: optimalTestSpec.k,\r\n                    y1: max_y,\r\n                    line: {\r\n                        color: 'rgb(55, 128, 191)',\r\n                        width: 1\r\n                    }\r\n                },]\r\n        };\r\n        Plotly.newPlot(\"knn_table_\" + id, traces, layout);\r\n    }\r\n    KNNPerformancePlotRegression(results, optimalTrainSpec, optimalTestSpec, id) {\r\n        let traces = []\r\n        traces.push({\r\n            x: results.map(m => m.k),\r\n            y: results.filter(n => n.metric === 'manhattan').map(m => Number((m.evaluation).toFixed(2))),\r\n            mode: 'lines',\r\n            name: 'manhattan test set',\r\n            line: {\r\n                color: 'rgb(55, 128, 191)',\r\n                width: 2\r\n            }\r\n        });\r\n\r\n        traces.push({\r\n            x: results.map(m => m.k),\r\n            y: results.filter(n => n.metric === 'euclidean').map(m => Number((m.evaluation).toFixed(2))),\r\n            mode: 'lines',\r\n            name: 'euclidean test set',\r\n            line: {\r\n                color: 'rgb(219, 64, 82)',\r\n                width: 2\r\n            }\r\n        });\r\n        traces.push({\r\n            x: results.map(m => m.k),\r\n            y: results.filter(n => n.metric === 'manhattan').map(m => Number((m.evaluation_train).toFixed(2))),\r\n            mode: 'lines',\r\n            name: 'manhattan train set',\r\n            line: {\r\n                color: 'rgb(55, 128, 191)',\r\n                width: 1\r\n            }\r\n        });\r\n        traces.push({\r\n            x: results.map(m => m.k),\r\n            y: results.filter(n => n.metric === 'euclidean').map(m => Number((m.evaluation_train).toFixed(2))),\r\n            mode: 'lines',\r\n            name: 'euclidean train set',\r\n            line: {\r\n                color: 'rgb(219, 64, 82)',\r\n                width: 1\r\n            }\r\n        });\r\n        var min_y = Number.POSITIVE_INFINITY;\r\n        var max_y = Number.NEGATIVE_INFINITY;\r\n        traces.forEach(trace => {\r\n            let min = Math.min(...trace.y)\r\n            let max = Math.max(...trace.y)\r\n            if (min < min_y) {\r\n                min_y = min\r\n            }\r\n            if (max > max_y) {\r\n                max_y = max\r\n            }\r\n\r\n        })\r\n        var layout = {\r\n            showlegend: true,\r\n            legend: {\r\n                \"orientation\": \"h\",\r\n                font: {\r\n                    family: 'sans-serif',\r\n                    size: 8,\r\n                    color: '#000'\r\n                },\r\n            },\r\n            xaxis: {\r\n                title: {\r\n                    text: 'K',\r\n                },\r\n            },\r\n            yaxis: {\r\n                title: {\r\n                    text: 'MSE',\r\n                }\r\n            },\r\n            shapes: [\r\n                {\r\n                    type: 'line',\r\n                    x0: optimalTrainSpec.k,\r\n                    y0: min_y,\r\n                    x1: optimalTrainSpec.k,\r\n                    y1: max_y,\r\n                    line: {\r\n                        color: 'rgb(55, 128, 191)',\r\n                        width: 1\r\n                    }\r\n                }, {\r\n                    type: 'line',\r\n                    x0: optimalTestSpec.k,\r\n                    y0: min_y,\r\n                    x1: optimalTestSpec.k,\r\n                    y1: max_y,\r\n                    line: {\r\n                        color: 'rgb(55, 128, 191)',\r\n                        width: 1\r\n                    }\r\n                },]\r\n        };\r\n        Plotly.newPlot(\"knn_table_\" + id, traces, layout);\r\n    }\r\n    async correlationHeatmap(id, correlations, names, title) {\r\n        var data = [\r\n            {\r\n                z: correlations,\r\n                x: names,\r\n                y: names,\r\n                type: 'heatmap',\r\n                hoverongaps: false,\r\n                colorscale: 'YlGnBu',\r\n                showscale: false\r\n\r\n            }\r\n        ];\r\n        var layout = {\r\n            responsive: true,\r\n            annotations: [],\r\n            xaxis: {\r\n                ticks: '',\r\n                side: 'top'\r\n            },\r\n            yaxis: {\r\n                ticks: '',\r\n                ticksuffix: ' ',\r\n                width: 700,\r\n                height: 700,\r\n                autosize: false\r\n            }\r\n        };\r\n        for (var i = 0; i < names.length; i++) {\r\n            for (var j = 0; j < names.length; j++) {\r\n                var currentValue = correlations[i][j];\r\n                let textColor\r\n                if (currentValue != 0.0) {\r\n                    textColor = 'black';\r\n                } else {\r\n                    textColor = 'black';\r\n                }\r\n                var result = {\r\n                    xref: 'x1',\r\n                    yref: 'y1',\r\n                    x: names[i],\r\n                    y: names[j],\r\n                    text: currentValue.toFixed(2),\r\n                    font: {\r\n                        family: 'Arial',\r\n                        size: 8,\r\n                        color: textColor\r\n                    },\r\n                    showarrow: false,\r\n                };\r\n                layout.annotations.push(result);\r\n            }\r\n        }\r\n\r\n        await Plotly.newPlot(id, data, layout);\r\n    }\r\n    PFIBoxplot(id, importances, columns) {\r\n        let traces = []\r\n        importances.forEach((importance, index) => {\r\n            traces.push(\r\n                {\r\n                    x: Array.from(importance),\r\n                    type: 'box',\r\n                    name: columns[index],\r\n                    marker: { color: '#43a047' },\r\n\r\n                }\r\n            )\r\n        });\r\n        var layout = {\r\n            autosize: true,\r\n\r\n            title: 'Permutation Feature Importance',\r\n            xaxis: {\r\n                linecolor: 'black',\r\n                linewidth: 1,\r\n                mirror: true,\r\n                title: {\r\n                    text: 'Imporetance',\r\n                },\r\n            },\r\n            yaxis: {\r\n                linecolor: 'black',\r\n                linewidth: 1,\r\n                mirror: true\r\n            },\r\n        };\r\n\r\n        Plotly.newPlot('pfi_boxplot_' + id, traces, layout, { responsive: true });\r\n    }\r\n    plotPDP(id, averages, grid, labels, column) {\r\n\r\n        let traces = []\r\n        averages.forEach((average, index) => {\r\n            traces.push(\r\n                {\r\n                    x: grid,\r\n                    y: Array.from(average),\r\n                    mode: 'line',\r\n                    name: labels[index],\r\n                    marker: { color: this.indexToColor(index) }\r\n                }\r\n            )\r\n        });\r\n        var layout = {\r\n            autosize: true,\r\n            title: 'Partial Dependence Plot',\r\n            xaxis: {\r\n                linecolor: 'black',\r\n                linewidth: 1,\r\n                mirror: true,\r\n                title: {\r\n                    text: column,\r\n                },\r\n            },\r\n            yaxis: {\r\n                linecolor: 'black',\r\n                linewidth: 1,\r\n                mirror: true,\r\n                title: {\r\n                    text: 'Feature',\r\n                }\r\n            },\r\n        };\r\n\r\n        Plotly.newPlot('pdp_plot_' + id, traces, layout, { responsive: true });\r\n    }\r\n    plotROC(id, fprs, tprs, labels) {\r\n\r\n        let traces = []\r\n        fprs.forEach((fpr, index) => {\r\n            traces.push(\r\n                {\r\n                    x: fpr,\r\n                    y: tprs[index],\r\n                    mode: 'line',\r\n                    name: labels[index],\r\n                    marker: { color: this.indexToColor(index) }\r\n                }\r\n            )\r\n        });\r\n        var layout = {\r\n            autosize: true,\r\n            xaxis: {\r\n                linecolor: 'black',\r\n                linewidth: 1,\r\n                mirror: true,\r\n                title: {\r\n                    text: 'false positive rate',\r\n                },\r\n            },\r\n            yaxis: {\r\n                linecolor: 'black',\r\n                linewidth: 1,\r\n                mirror: true,\r\n                title: {\r\n                    text: 'true positive rate',\r\n                }\r\n            },\r\n        };\r\n\r\n        Plotly.newPlot('roc_plot_' + id, traces, layout, { responsive: true });\r\n    }\r\n}","/* eslint-disable no-unused-vars */\r\n/* eslint-disable no-undef */\r\n\r\nimport { MinMaxScaler, StandardScaler } from 'danfojs/dist/danfojs-base';\r\nimport { calculateRSquared, calculateMSE, encode_name } from './utils';\r\nimport { FeatureCategories, Settings } from \"./settings.js\";\r\nimport Plotly from 'danfojs/node_modules/plotly.js-dist-min';\r\n\r\nexport default class UI {\r\n    constructor(parser, chart_controller) {\r\n        this.data_parser = parser\r\n        this.chart_controller = chart_controller\r\n    }\r\n\r\n    get_model_settings() {\r\n        let model_settings = {};\r\n        let model_name = parseInt(document.getElementById('model_name').value);\r\n        const target = document.getElementById(\"target\").value;\r\n        let is_classification = document.getElementById(target).value !== FeatureCategories.Numerical;\r\n        var model;\r\n        if (is_classification) {\r\n            for (const m in Settings.classification) {\r\n                if (Settings.classification[m].value === model_name) {\r\n                    model_name = m\r\n                    model_settings.name = Settings.classification[m].label\r\n                    model = Settings.classification[model_name];\r\n                    break;\r\n                }\r\n            }\r\n        } else {\r\n            for (const m in Settings.regression) {\r\n                if (Settings.regression[m].value === model_name) {\r\n                    model_name = m\r\n                    model_settings.name = Settings.regression[m].label\r\n                    model = Settings.regression[model_name];\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        model_name = parseInt(document.getElementById('model_name').value);\r\n        for (const option in model?.options) {\r\n            if (model.options[option].type === \"select\") {\r\n                let option_value = document.getElementById(option + \"_\" + model_name)?.value;\r\n                model_settings[option] = option_value ?? model.options[option].default\r\n            } else {\r\n                if (model.options[option].type === \"number\") {\r\n                    let option_value = document.getElementById(option + \"_\" + model_name)?.value;\r\n                    model_settings[option] = !option_value ? model.options[option].default : parseFloat(option_value)\r\n                } else {\r\n                    let option_value = document.getElementById(option + \"_\" + model_name)?.value;\r\n                    model_settings[option] = option_value ?? model.options[option].default\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        return model_settings\r\n    }\r\n\r\n    scale_data(dataset, column, normalization_type) {\r\n        switch (normalization_type) {\r\n            case \"1\": {\r\n                let scaler = new MinMaxScaler()\r\n                scaler.fit(dataset[column])\r\n                dataset.addColumn(column, scaler.transform(dataset[column]), { inplace: true })\r\n                break;\r\n            }\r\n            case \"2\":\r\n                dataset.addColumn(column, dataset[column].apply((x) => x * x), { inplace: true })\r\n                break;\r\n            case \"3\":\r\n                dataset.addColumn(column, dataset[column].apply((x) => Math.log(x)), { inplace: true })\r\n                break;\r\n            case \"4\": {\r\n                let scaler = new StandardScaler()\r\n                scaler.fit(dataset[column])\r\n                dataset.addColumn(column, scaler.transform(dataset[column]), { inplace: true })\r\n                break;\r\n            }\r\n            default:\r\n                break;\r\n        }\r\n\r\n    }\r\n\r\n\r\n    // createDatasetPropsDropdown(items) {\r\n    //     const myClass = this\r\n    //     //feature selection\r\n    //     $('#props').empty()\r\n    //     $('#normalizations').empty()\r\n    //     $('#features-selection').empty()\r\n    //     $('#features').empty()\r\n    //     $('#props').append(this.createTargetDropdown(items))\r\n    //     $('#features-selection').append(`<div class=\"column is-6\"><button id =\"feature_selection_modal\" class=\"button is-warning is-small\" >Select Features</button></div>`)\r\n    //     document.querySelector('#feature_selection_modal').addEventListener('click', function (e) {\r\n    //         var features_dropdown = document.getElementById(\"config_modal\")\r\n    //         var props = document.getElementById(\"props\")\r\n    //         var props_feature_selection_button = document.getElementById(\"feature_selection_modal\")\r\n\r\n    //         if (window.getComputedStyle(features_dropdown).display !== \"none\") {\r\n    //             props_feature_selection_button.innerText = \"Select Features\"\r\n    //             features_dropdown.style.display = \"none\"\r\n    //             props.style.display = \"block\"\r\n    //             const redraw_plots_data_analysis = new CustomEvent(\"update_graphs\");\r\n    //             props_feature_selection_button.dispatchEvent(redraw_plots_data_analysis)\r\n    //             return\r\n    //         }\r\n    //         props_feature_selection_button.innerText = \"Config model\"\r\n    //         features_dropdown.style.display = \"block\"\r\n    //         props.style.display = \"none\"\r\n\r\n    //     });\r\n    //     $(\"#features-selection\").append(`\r\n    //             <div id=\"config_modal\" style=\"display:none;overflow-y:scroll;max-height: 600px;height:500px\">\r\n    //                 <table class=\"table is-narrow is-size-7\" \r\n    //                 <thead>\r\n    //                 <tr>\r\n    //                   <th><input id=\"select_all\" value=\"1\" name=\"selectall\" type=\"checkbox\" checked=\"checked\" /></th>\r\n    //                   <th>Name</th>\r\n    //                   <th>Scale</th>\r\n    //                 </tr>\r\n    //               </thead>\r\n    //               <tbody id=\"features\">\r\n    //               </tbody>\r\n    //                 </table>\r\n    //             </div>\r\n    //         </div>\r\n    //         `)\r\n    //     document.querySelector('#select_all').addEventListener('click', function (e) {\r\n    //         if ($(\"#select_all\").prop('checked')) {\r\n    //             $('.features-filter').prop('checked', true);\r\n    //         } else {\r\n    //             $('.features-filter').prop('checked', false);\r\n    //         }\r\n    //     });\r\n    //     const default_target = items.columns[items.columns.length - 1]\r\n    //     items.columns.forEach(column => {\r\n    //         let key = encode_name(column)\r\n    //         $('#features').append(`\r\n    //             <tr>\r\n    //                 <td>\r\n    //                 <label class=\"checkbox my-2\">\r\n    //                 <input id=\"${key + \"-checkbox\"}\" type=\"checkbox\" value=\"1\" class=\"features-filter\" checked=\"checked\">\r\n    //                 </label>\r\n    //                 </td>\r\n    //                 <td class=\"mt-1\">\r\n    //                 ${column}\r\n    //                 </td>\r\n    //                 <td>\r\n    //                 <div class=\"select is-small is-fullwidth mb-1\">\r\n    //                     <select id=\"${key}\">\r\n    //                         <option value=\"${FeatureCategories.Numerical}\">Numerical</option>\r\n    //                         <option value=\"${FeatureCategories.Nominal}\">Nominal</option>\r\n    //                         <option value=\"${FeatureCategories.Ordinal}\">Ordinal</option>\r\n    //                     </select>\r\n    //                 </div>\r\n    //                 </td>\r\n    //             </tr>\r\n    //             `);\r\n    //         $('#' + key).on('change', function (e) {\r\n    //             const type = e.target.value\r\n    //             if (key === document.getElementById(\"target\").value) {\r\n    //                 $('#algorithm').empty()\r\n    //                 if (type === 'Numerical') {\r\n    //                     $('#algorithm').append(myClass.updateAlgorithmsSelect(1));\r\n    //                 } else {\r\n    //                     $('#algorithm').append(myClass.updateAlgorithmsSelect(2));\r\n    //                 }\r\n    //             }\r\n    //         });\r\n    //         const id = column\r\n    //         if (items.column(column).dtype !== 'string') {\r\n    //             $('#' + key).val(FeatureCategories.Numerical)\r\n    //         } else {\r\n    //             $('#' + key).val(FeatureCategories.Ordinal)\r\n    //         }\r\n    //     });\r\n\r\n\r\n\r\n\r\n\r\n\r\n    //     // $(document).on('change', '#' + default_target, function (e) {\r\n    //     //     $(\"#algorithm\").empty();\r\n    //     //     $(\"#algorithm\").append(myClass.updateAlgorithmsSelect(e.target.value == 1 ? 1 : 2))\r\n    //     // });\r\n    //     $(\"#model_options\").empty();\r\n    //     $('#algorithm').on('change', function () {\r\n    //         $(\"#model_options\").empty();\r\n    //     });\r\n    //     $('#props').append(`\r\n    //         <div class=\"column is-12\">\r\n    //             <div class=\"label is-size-7\">Seed</div>\r\n    //             <input\r\n    //             id=\"seed\"\r\n    //             required\r\n    //             min=\"0\"\r\n    //             class=\"input is-info is-small\"\r\n    //             type=\"number\"\r\n    //             placeholder=\"Seed\"\r\n    //             value = \"123\"\r\n    //             />\r\n    //         </div>`);\r\n    //     $('#props').append(`\r\n    //         <div class=\"column is-12\">\r\n    //             <div class=\"label is-size-7\">Imputation\r\n    //                 <span id=\"imputation_help\" class=\"icon has-text-success\">\r\n    //                     <i class=\"fas fa-info-circle\"></i>\r\n    //                 </span>\r\n    //             </div>\r\n    //             <div class=\"select is-small is-fullwidth mb-1\">\r\n    //                 <select id=\"imputation\">\r\n    //                     <option value=\"1\">Delete rows</option>\r\n    //                     <option value=\"2\">Mean and Mode</option>\r\n    //                     <option value=\"3\">Linear regression</option>\r\n    //                     <option value=\"4\">random forest</option>\r\n    //                 </select>\r\n    //             </div>\r\n    //         </div>\r\n    //         `);\r\n    //     $('#props').append(`\r\n    //         <div class=\"column is-12\">\r\n    //             <div class=\"label is-size-7\">Cross Validation\r\n    //             <span id=\"cv_help\" class=\"icon has-text-success\">\r\n    //                 <i class=\"fas fa-info-circle\"></i>\r\n    //             </span>\r\n    //             </div>\r\n    //             <div class=\"select is-fullwidth is-small mb-1\">\r\n    //                 <select id=\"cross_validation\">\r\n    //                     <option value=\"1\">70 % training - 30 % test</option>\r\n    //                     <option value=\"2\">No</option>\r\n    //                     <option value=\"3\">K-fold</option>\r\n    //                 </select>\r\n    //             </div>\r\n    //         </div>\r\n    //         `)\r\n    //     $('#target').val(default_target)\r\n\r\n\r\n    //     $('#target').on('change', function (e) {\r\n    //         const redraw_plots_data_analysis = new CustomEvent(\"update_graphs\");\r\n    //         var props_feature_selection_button = document.getElementById(\"feature_selection_modal\")\r\n    //         props_feature_selection_button.dispatchEvent(redraw_plots_data_analysis)\r\n    //         const type = document.getElementById(e.target.value).value\r\n    //         $('#algorithm').empty()\r\n    //         if (type === 'Numerical') {\r\n    //             $('#algorithm').append(myClass.updateAlgorithmsSelect(1));\r\n    //         } else {\r\n    //             $('#algorithm').append(myClass.updateAlgorithmsSelect(2));\r\n    //         }\r\n    //     });\r\n\r\n\r\n\r\n\r\n    //     //modle options\r\n    //     $('#algorithm').on('change', function (e) {\r\n    //         const model_type = items.column(default_target).dtype !== 'string' ? 1 : 2;\r\n    //         const label = model_type == 1 ? \"regression\" : \"classification\"\r\n    //         for (const key in Settings[label]) {\r\n    //             if (Settings.hasOwnProperty.call(Settings[label], key)) {\r\n    //                 const item = Settings[label][key];\r\n    //             }\r\n    //         }\r\n    //     });\r\n    //     if (items.column(default_target).dtype !== 'string') {\r\n    //         $('#props').append(this.createAlgorithmsSelect(1));\r\n    //     } else {\r\n    //         $('#props').append(this.createAlgorithmsSelect(2));\r\n    //     }\r\n    //     $(\"#props\").append(`\r\n    //         <div class=\"column is-3\">\r\n    //         <button class=\"button is-small is-success\" id=\"config_modal_button\">\r\n    //         <span class=\"icon is-small\">\r\n    //         <i class=\"fas fa-cog\"></i>\r\n    //         </span>\r\n    //         </button>\r\n    //         </div>\r\n    //         <div class=\"column is-12\" id=\"settings\" style=\"display:none\">\r\n    //         </div>`)\r\n    //     $(\"#model_name\").on(\"change\", () => {\r\n    //         document.getElementById(\"settings\").innerHTML = \"\"\r\n    //         document.getElementById(\"settings\").style.display = \"none\";\r\n\r\n    //     })\r\n    //     document.querySelector('#config_modal_button').addEventListener('click', function (e) {\r\n    //         let model_name = document.getElementById('model_name').value;\r\n    //         const target = document.getElementById(\"target\").value;\r\n    //         let is_classification = document.getElementById(target).value !== FeatureCategories.Numerical;\r\n    //         var model;\r\n    //         if (is_classification) {\r\n    //             for (const key in Settings.classification) {\r\n    //                 if (Object.hasOwnProperty.call(Settings.classification, key)) {\r\n    //                     const element = Settings.classification[key];\r\n    //                     if (element.value === parseInt(model_name)) {\r\n    //                         model = Settings.classification[key];\r\n    //                     }\r\n    //                 }\r\n    //             }\r\n    //         } else {\r\n    //             for (const key in Settings.regression) {\r\n    //                 if (Object.hasOwnProperty.call(Settings.regression, key)) {\r\n    //                     const element = Settings.regression[key];\r\n    //                     if (element.value === parseInt(model_name)) {\r\n    //                         model = Settings.regression[key];\r\n    //                     }\r\n    //                 }\r\n    //             }\r\n    //         }\r\n    //         var options_modal_content = document.getElementById(\"settings\");\r\n    //         if (window.getComputedStyle(options_modal_content).display !== \"none\") {\r\n    //             options_modal_content.innerHTML = \"\"\r\n    //             options_modal_content.style.display = \"none\"\r\n    //             return\r\n    //         }\r\n    //         options_modal_content.innerHTML = \"\"\r\n    //         for (const key in model.options) {\r\n    //             options_modal_content.style.display = \"block\"\r\n    //             if (Object.hasOwnProperty.call(model.options, key)) {\r\n    //                 const option_type = model.options[key][\"type\"]\r\n    //                 const placeholder = model.options[key][\"placeholder\"]\r\n    //                 if (option_type === \"number\" || option_type === \"text\") {\r\n    //                     $('#settings').append(`\r\n    //                         <div class=\"column is-12\">\r\n    //                             <div class=\"field is-horizontal\">\r\n    //                                 <div class=\"field-label is-small\">\r\n    //                                 <label class=\"label is-size-7\">${key}</label>\r\n    //                                 </div>\r\n    //                                 <div class=\"field-body\">\r\n    //                                 <div class=\"control\">\r\n    //                                     <input id=\"${key + \"_\" + model_name}\" class=\"input is-small\" type=\"${option_type}\" placeholder=\"${placeholder ?? \"\"}\">\r\n    //                                 </div>\r\n    //                                 </div>\r\n    //                             </div>\r\n    //                         </div>\r\n    //                         `)\r\n    //                     if (model.options[key][\"default\"]) {\r\n    //                         document.getElementById(key + \"_\" + model_name).value = model.options[key][\"default\"]\r\n    //                     }\r\n    //                 } else if (option_type === \"select\") {\r\n    //                     console.log(model.options[key][\"for\"]);\r\n\r\n    //                     let result = \"\"\r\n    //                     let options = model.options[key][\"values\"]\r\n    //                     result = `\r\n    //                         <div class=\"column is-12\">\r\n    //                             <div class=\"field is-horizontal\">\r\n    //                                 <div class=\"field-label is-small\">\r\n    //                                    <label class=\"label is-size-7 mr-1\">${key}</label>\r\n    //                                 </div>\r\n    //                                 <div class=\"field-body\">\r\n    //                                     <div class=\"select is-small\">\r\n    //                                         <select id=\"${key + \"_\" + model_name}\">\r\n    //                                 </div>\r\n    //                         `\r\n    //                     for (let i = 0; i < options.length; i++) {\r\n    //                         result += `<option value=\"${options[i]?.value}\">${options[i].label}</option>`\r\n    //                     }\r\n    //                     result += \"</select></div></div></div>\"\r\n    //                     $('#settings').append(result)\r\n\r\n    //                 }\r\n    //             }\r\n    //         }\r\n    //     });\r\n    //     $('#props').append(`<div class=\"column is-6\"><button class=\"button is-info mt-2\" id=\"train-button\">train</button></div>`);\r\n\r\n    //     // $('#kde_select').append(this.createFeaturesDropdown(rowMetadata))\r\n    // }\r\n\r\n    createAlgorithmsSelect(category) {\r\n        let result = '<div id=\"algorithm\" class=\"column is-9\"><div class=\"select is-small mb-1\"> <select id=\"model_name\" class=\"select\">'\r\n        const label = category == 1 ? \"regression\" : \"classification\"\r\n        for (const key in Settings[label]) {\r\n            if (Settings.hasOwnProperty.call(Settings[label], key)) {\r\n                const item = Settings[label][key];\r\n                result += `<option value=\"${item.value}\">${item.label}</option>`\r\n            }\r\n        }\r\n        result += '</select></div></div>'\r\n\r\n        return result\r\n    }\r\n    updateAlgorithmsSelect(category) {\r\n        let result = '<div class=\"select is-small mb-1\"> <select id=\"model_name\" class=\"select\">'\r\n        const label = category == 1 ? \"regression\" : \"classification\"\r\n        for (const key in Settings[label]) {\r\n            if (Settings.hasOwnProperty.call(Settings[label], key)) {\r\n                const item = Settings[label][key];\r\n                result += `<option value=\"${item.value}\">${item.label}</option>`\r\n            }\r\n        }\r\n        result += '</select></div>'\r\n        return result\r\n    }\r\n\r\n    find_selected_columns(columns, get_all = false) {\r\n        const selected_columns = [];\r\n        columns.forEach(column => {\r\n            let key = encode_name(column)\r\n            if (document.getElementById(key + '-checkbox').checked || get_all) {\r\n                selected_columns.push(column);\r\n            }\r\n        });\r\n        return selected_columns;\r\n    }\r\n    find_selected_columns_types(columns, include_target = true) {\r\n        if (include_target === false) {\r\n            const target = document.getElementById(\"target\").value;\r\n            columns = columns.filter(column => column !== target)\r\n        }\r\n        const column_types = []\r\n        columns.forEach(column => {\r\n            let key = encode_name(column)\r\n            column_types.push({\r\n                name: column,\r\n                type: document.getElementById(key).value\r\n            })\r\n        });\r\n        return column_types\r\n    }\r\n    createTargetDropdown(items) {\r\n        let result = '<div  class=\"column is-12\"><div class=\"label is-size-7\">Target</div><div class=\"select is-fullwidth is-small mb-1\"> <select id=\"target\">'\r\n        items.columns.forEach(column => {\r\n            let key = encode_name(column)\r\n            result += `<option value=\"${key}\">${key}</option>`\r\n\r\n        });\r\n        result += '</select></div></div>'\r\n        return result\r\n    }\r\n    createFeaturesDropdown(items) {\r\n        let result = '<div  class=\"column is-4\"><h4>Target</h4><div class=\"select mb-1\"> <select class=\"select\" id=\"kde_feature\">'\r\n        for (const key in items) {\r\n            result += `<option value=\"${key}\">${key}</option>`\r\n        }\r\n        result += '</select></div></div>'\r\n        return result\r\n    }\r\n    insertSpaces(string) {\r\n        string = string.replace(/([a-z])([A-Z])/g, '$1 $2');\r\n        string = string.replace(/([A-Z])([A-Z][a-z])/g, '$1 $2')\r\n        return string;\r\n    }\r\n    renderDatasetStats(data, continuousFeatures, categoricalFeatures) {\r\n        //build numerical feature table table\r\n        let continuousFeaturesStats = []\r\n        let categoricalFeaturesStats = []\r\n\r\n        const continuousHeaders =\r\n            [{ field: 'name', label: '#' }, { field: 'min', label: 'Min' }, { field: 'max', label: 'Max' }, { field: 'median', label: 'Median' }\r\n                , { field: 'std', label: 'std' }, { field: 'missingVlauesCount', label: '# NAs' }\r\n            ];\r\n        const categoricalHeaders =\r\n            [{ field: 'name', label: '#' }, { field: 'shape', label: 'Shape' }, { field: 'mode', label: 'Mode' }, { field: 'percentage', label: 'Percentage' }\r\n                , { field: 'missingVlauesCount', label: '# NAs' }\r\n            ];\r\n\r\n        for (let i = 0; i < continuousFeatures.length; i++) {\r\n            const column = continuousFeatures[i];\r\n            continuousFeaturesStats.push({\r\n                name: column,\r\n                min: data.column(column).min(),\r\n                max: data.column(column).max(),\r\n                median: data.column(column).median().toFixed(2),\r\n                mean: data.column(column).mean().toFixed(2),\r\n                std: data.column(column).std().toFixed(2),\r\n                missingVlauesCount: data.column(column).isNa().sum()\r\n            })\r\n        }\r\n\r\n\r\n        categoricalFeatures.forEach((column, i) => {\r\n            const shape = [...new Set(data.column(column).values)];\r\n            const category_info = this.getCategoricalMode(data.column(column).values)\r\n            categoricalFeaturesStats.push({\r\n                name: column,\r\n                shape: shape.length,\r\n                mode: category_info['mode'],\r\n                percentage: ((category_info[category_info['mode']] / category_info['total'])).toFixed(2),\r\n                missingVlauesCount: data.column(column).isNa().sum()\r\n            })\r\n\r\n        });\r\n        return [\r\n            continuousHeaders,\r\n            continuousFeaturesStats,\r\n            categoricalHeaders,\r\n            categoricalFeaturesStats,\r\n        ]\r\n\r\n    }\r\n    getCategoricalMode(arr) {\r\n        if (arr.length === 0) {\r\n            return null;\r\n        }\r\n\r\n        const categoryCount = {};\r\n        categoryCount['total'] = 0\r\n        categoryCount['mode'] = ''\r\n        for (let i = 0; i < arr.length; i++) {\r\n            const category = arr[i];\r\n            if (category === null || category === undefined) {\r\n                continue\r\n            }\r\n            categoryCount['total']++\r\n            if (category in categoryCount) {\r\n                categoryCount[category]++;\r\n            } else {\r\n                categoryCount[category] = 1;\r\n            }\r\n        }\r\n\r\n        let modeCategory = null;\r\n        let modeCount = 0;\r\n        for (const category in categoryCount) {\r\n            if (category === 'total') {\r\n                continue\r\n            }\r\n            if (categoryCount[category] > modeCount) {\r\n                modeCategory = category;\r\n                modeCount = categoryCount[category];\r\n            }\r\n        }\r\n        categoryCount['mode'] = modeCategory;\r\n        return categoryCount;\r\n    }\r\n\r\n    get_numeric_columns(dataset, filter) {\r\n        let selected_columns = this.find_selected_columns(dataset.columns, !filter)\r\n        let selected_columns_types = this.find_selected_columns_types(selected_columns);\r\n        selected_columns = selected_columns.filter(column => {\r\n            let i = selected_columns_types.findIndex(col => col.name === column)\r\n            if (selected_columns_types[i]?.type === FeatureCategories.Numerical) {\r\n                return true;\r\n            }\r\n            return false;\r\n        })\r\n        let numericColumns = []\r\n        dataset.columns.forEach(column => {\r\n            if (dataset.column(column).dtype !== 'string' && column !== \"Id\" && selected_columns.includes(column)) {\r\n                numericColumns.push(column)\r\n            }\r\n        });\r\n        return numericColumns\r\n    }\r\n    get_categorical_columns(dataset, filter) {\r\n        let selected_columns = this.find_selected_columns(dataset.columns, !filter)\r\n        let selected_columns_types = this.find_selected_columns_types(selected_columns);\r\n        selected_columns = selected_columns.filter(column => {\r\n            let i = selected_columns_types.findIndex(col => col.name === column)\r\n            if (i !== -1 && selected_columns_types[i]?.type !== FeatureCategories.Numerical) {\r\n                return true;\r\n            }\r\n            return false;\r\n        })\r\n        let categorical_columns = []\r\n        dataset.columns.forEach(column => {\r\n            if (column !== \"Id\" && selected_columns.includes(column)) {\r\n                categorical_columns.push(column)\r\n            }\r\n        });\r\n        return categorical_columns\r\n    }\r\n    column_types(columns) {\r\n        let selected_columns = this.find_selected_columns(columns, false)\r\n        return this.find_selected_columns_types(selected_columns);\r\n    }\r\n    async visualize(dataset, len, file_name) {\r\n        const current_class = this\r\n        this.renderDatasetStats(dataset);\r\n        let numericColumns = this.get_numeric_columns(dataset, true)\r\n        let categorical_columns = this.get_categorical_columns(dataset, true)\r\n        const target = document.getElementById(\"target\").value;\r\n        let columns = [...new Set(numericColumns.concat(categorical_columns))];\r\n\r\n        const filterd_dataset = dataset.loc({ columns: columns })\r\n        filterd_dataset.dropNa({ axis: 1, inplace: true })\r\n        numericColumns = numericColumns.filter(m => m !== target)\r\n        let is_classification = document.getElementById(target).value !== FeatureCategories.Numerical;\r\n        //draw kdes\r\n        let limit = 0\r\n        if (numericColumns.length > 0 && limit < 10) {\r\n            document.getElementById(\"container\").innerHTML = \"\";\r\n            numericColumns.forEach(col => {\r\n                if (col !== target) {\r\n                    this.chart_controller.draw_kde(filterd_dataset, col, target, \"nrd\", is_classification);\r\n                }\r\n            });\r\n            limit++;\r\n        }\r\n        limit = 0\r\n        //draw categories barplot\r\n        if (categorical_columns.length > 0 && limit < 10) {\r\n            document.getElementById(\"categories_barplots\").innerHTML = \"\";\r\n            categorical_columns.forEach(col => {\r\n                if (col !== target) {\r\n                    this.chart_controller.draw_categorical_barplot(filterd_dataset.loc({ columns: [col] }).values, target, col);\r\n                }\r\n            });\r\n            limit++;\r\n        }\r\n        if (is_classification) {\r\n            let labels = dataset.column(target).values;\r\n            let unique_labels = [...new Set(labels)];\r\n            let counts = [];\r\n            for (let i = 0; i < unique_labels.length; i++) {\r\n                counts.push(labels.filter(m => m === unique_labels[i]).length);\r\n            }\r\n            this.chart_controller.classification_target_chart(counts, unique_labels, file_name, \"target_chart\", target);\r\n        } else {\r\n            this.chart_controller.regression_target_chart(dataset.column(target).values, \"target_chart\", target);\r\n        }\r\n        let features = []\r\n\r\n        numericColumns = this.get_numeric_columns(dataset, true)\r\n        categorical_columns = this.get_categorical_columns(dataset, true)\r\n        // features = Object.values(numericColumns).concat(Object.values(categorical_columns))\r\n\r\n        dataset = this.data_parser.handle_missing_values(dataset)\r\n        // this.chart_controller.ScatterplotMatrix(dataset.loc({ columns: features }).values, features, dataset.column(target).values, categorical_columns.length,\r\n        //     is_classification, numericColumns, categorical_columns, dataset).then(() => {\r\n        //         document.getElementById('splom_update').addEventListener('click', async function (e) {\r\n        //             console.log('update');\r\n        //             Plotly.purge('scatterplot_mtx');\r\n        //             $('#scatterplot_mtx').empty()\r\n        //             await current_class.visualize(dataset);\r\n        //         });\r\n        //     })\r\n\r\n    }\r\n\r\n\r\n    // async createSampleDataTable(dataset) {\r\n    //     let cols = []\r\n    //     let column_names = dataset.columns\r\n    //     for (let i = 0; i < column_names.length; i++) {\r\n    //         cols.push({ title: column_names[i] })\r\n    //     }\r\n    //     new DataTable('#sample_data_table', {\r\n    //         responsive: true,\r\n    //         columns: cols,\r\n    //         data: dataset.head(5).values,\r\n    //         info: false,\r\n    //         search: false,\r\n    //         ordering: false,\r\n    //         dom: '<\"my-class\">',\r\n    //         initComplete: function (settings, json) {\r\n    //             $('.my-class').html('Sample Data');\r\n    //         },\r\n    //         searching: false,\r\n    //         paging: false,\r\n    //         bDestroy: true,\r\n    //     });\r\n\r\n    // }\r\n    toggle_loading_progress(show = false) {\r\n        let element = document.getElementById(\"progress\");\r\n        if (!show) {\r\n            element.style.display = \"block\";\r\n        } else {\r\n            element.style.display = \"none\";\r\n        }\r\n\r\n    }\r\n    // show_settings(settings, numeric_columns, categorical_columns, target, dataset_name, i) {\r\n    //     let columns = numeric_columns.concat(categorical_columns)\r\n    //     let column_types = [];\r\n    //     for (let i = 0; i < columns.length; i++) {\r\n    //         const column = columns[i];\r\n    //         column_types.push({ column: column, type: document.getElementById(column + '--normal') })\r\n    //     }\r\n    //     let columns_transformation = '';\r\n    //     for (let i = 0; i < columns.length; i++) {\r\n    //         const column_name = encode_name(columns[i]);\r\n    //         let normalization_type = document.getElementById(column_name + '--normal')?.value;\r\n    //         if (normalization_type && normalization_type !== \"0\") {\r\n    //             columns_transformation += columns[i] + ': ' + normalization_type + ' '\r\n    //         }\r\n    //     }\r\n\r\n    //     let content = `\r\n    //     <div class=\"column is-12\">\r\n    //     <div class=\"notification\">\r\n    //     <p class=\"title my-1 is-5\">${settings.name}</p>\r\n    //     <div class=\"columns is-multiline is-gapless\">`;\r\n    //     for (const key in settings) {\r\n    //         if (key !== 'name') {\r\n    //             if (Object.hasOwnProperty.call(settings, key)) {\r\n    //                 const element = settings[key];\r\n    //                 content += `<div class=\"column is-12 \"><p><strong>${key}</strong>: ${element}</p></div>`\r\n    //             }\r\n    //         }\r\n\r\n    //     }\r\n    //     content += `<div class=\"column is-12 \"><p><strong>Dataset name :</strong> ${dataset_name}</p></div>`\r\n    //     content += `<div class=\"column is-12 \"><p><strong>Target :</strong> ${target}</p></div>`\r\n    //     content += `<div class=\"column is-12 \"><p><strong>Continuous featues :</strong> ${numeric_columns}</p></div>`\r\n    //     content += `<div class=\"column is-12 \"><p><strong>Categorical featues :</strong> ${categorical_columns}</p></div>`\r\n    //     content += `<div class=\"column is-12 \"><p><strong>Transformations :</strong> ${columns_transformation}</p></div>`\r\n    //     content += `<div class=\"column is-12 \">\r\n    //     <button class=\"button is-danger\" id=\"remove_${i}\"> Remove results </button>\r\n    //     </div>`\r\n\r\n    //     content += `</div></div></div>`\r\n    //     $(\"#tabs_info li[data-index='\" + i + \"'] #results_\" + i + \"\").append(content);\r\n\r\n    //     document.getElementById(\"remove_\" + i).addEventListener('click', () => {\r\n    //         $('#' + 'tab_' + i).remove();\r\n    //         if (document.getElementById(target).value !== FeatureCategories.Numerical) {\r\n    //             Plotly.purge('pca_results_' + i)\r\n    //             $('#predictions_table_' + i).DataTable().destroy();\r\n    //             $('#' + 'info_' + i).remove();\r\n    //         } else {\r\n    //             Plotly.purge('regression_y_yhat_' + i)\r\n    //             $('#predictions_table_' + i).DataTable().destroy();\r\n    //             $('#' + 'info_' + i).remove();\r\n    //         }\r\n\r\n    //     });\r\n    // }\r\n    // create_model_result_tab(index) {\r\n    //     $(\"#tabs_content\").append(`\r\n    //     <li data-index=\"${index}\" id=\"tab_${index}\">\r\n    //        <a>${index}</a>\r\n    //     </li>`)\r\n    //     $(\"#tabs_info\").append(`\r\n    //     <li data-index=\"${index}\" id=\"info_${index}\"  class=\" tabs-li\">\r\n    //     <div id=\"results_${index}\" class=\"columns is-multiline\"></div>\r\n    //     </li>`)\r\n    //     $(\"#tabs_content li\").removeClass(\"is-active\");\r\n    //     $(\"#tabs_info li\").removeClass(\"is-active\");\r\n    //     $(\"#tabs_info li[data-index='\" + index + \"']\").addClass(\"is-active\");\r\n    //     $(\"#tabs_content li[data-index='\" + index + \"']\").addClass(\"is-active\");\r\n    // }\r\n\r\n    init_tooltips(tippy) {\r\n        tippy('#kde_help', {\r\n            interactive: true,\r\n            popperOptions: {\r\n                positionFixed: true,\r\n            },\r\n            content: 'Default bandwidth method :Silverman’s rule of thumb',\r\n        });\r\n        tippy('#normalization_help', {\r\n            interactive: true,\r\n            popperOptions: {\r\n                positionFixed: true,\r\n            },\r\n            content: '<p>not functional yet</p><p>standard scaler uses z = (x - u) / s</p><p>Transform features by scaling each feature to a given range</p>',\r\n            allowHTML: true,\r\n        });\r\n        tippy('#imputation_help', {\r\n            interactive: true,\r\n            popperOptions: {\r\n                positionFixed: true,\r\n            },\r\n            content: 'currently we are just deleting rows with missing values',\r\n            allowHTML: true,\r\n        });\r\n        tippy('#cv_help', {\r\n            interactive: true,\r\n            popperOptions: {\r\n                positionFixed: true,\r\n            },\r\n            content: 'option 1 and 2 are working',\r\n            allowHTML: true,\r\n        });\r\n    }\r\n\r\n    // init_tabs_events() {\r\n    //     $(\"#tabs_content\").on(\"click\", \"li\", function () {\r\n    //         var index = $(this).data(\"index\");\r\n    //         $(\"#tabs_content li\").not(this).removeClass(\"is-active\");\r\n    //         $(\"#tabs_info li\").removeClass(\"is-active\");\r\n    //         $(\"#tabs_info li[data-index='\" + index + \"']\").addClass(\"is-active\");\r\n    //         $(this).toggleClass(\"is-active \");\r\n    //     });\r\n    //     $(\".tabs ul li\").click(function () {\r\n    //         window.dispatchEvent(new Event('resize'));\r\n    //     });\r\n    // }\r\n    predictions_table_regression(x, y, predictions, tab_index) {\r\n        let table_columns = [];\r\n        x.addColumn(\"y\", y, { inplace: true });\r\n        x.addColumn(\"predictions: \", predictions, { inplace: true });\r\n        x.columns.forEach(element => {\r\n            table_columns.push({ title: element });\r\n        });\r\n        new DataTable('#predictions_table_' + tab_index, {\r\n            pageLength: 10,\r\n            responsive: false,\r\n            paging: true,\r\n            columnDefs: [\r\n                {\r\n                    render: function (data, type, row) {\r\n                        return data.toFixed(2);\r\n                    },\r\n                    targets: \"_all\",\r\n                }\r\n            ],\r\n            bPaginate: true,\r\n            columns: table_columns,\r\n            data: x.values,\r\n            bDestroy: true,\r\n        });\r\n    }\r\n    removeTable(tableId) {\r\n        $(tableId).DataTable().destroy()\r\n\r\n    }\r\n    predictions_table(x, y, predictions, probs = null, tab_index = 0) {\r\n        let table_columns = [];\r\n        if (probs !== null) {\r\n            x.addColumn(\"probs\", probs, { inplace: true });\r\n        }\r\n        x.addColumn(\"y\", y, { inplace: true });\r\n        x.addColumn(\"predictions: \", predictions, { inplace: true });\r\n        x.columns.forEach(element => {\r\n            table_columns.push({ title: element });\r\n        });\r\n        new DataTable('#predictions_table_' + tab_index, {\r\n            pageLength: 10,\r\n            responsive: false,\r\n            paging: true,\r\n            \"bPaginate\": true,\r\n            columns: table_columns,\r\n            data: x.values,\r\n            bDestroy: true,\r\n            columnDefs: [\r\n                {\r\n                    render: function (data, type, row) {\r\n                        for (let i = 0; i < data.length; i++) {\r\n                            data[i] = data[i].toFixed(2);\r\n                        }\r\n                        return data\r\n                    },\r\n                    targets: [-3]\r\n                },\r\n                {\r\n                    render: function (data, type, row) {\r\n                        return data.toFixed(2);\r\n                    },\r\n                    targets: [...Array(table_columns.length - 3).keys()]\r\n                }\r\n            ],\r\n            rowCallback: function (row, data, index) {\r\n                var prediction = data[table_columns.length - 1];\r\n                var y = data[table_columns.length - 2];\r\n                if (prediction !== y) {\r\n                    $(row).addClass('is-danger');\r\n                }\r\n            }\r\n        });\r\n    }\r\n    yhat_plot(y_test, predictions, container, title = '') {\r\n        Plotly.newPlot(container, [{\r\n            x: y_test,\r\n            y: predictions,\r\n            type: 'scatter',\r\n            name: \"y\",\r\n            mode: 'markers',\r\n            marker: {\r\n                color: 'black',\r\n                size: 2\r\n            },\r\n        }, {\r\n            x: y_test,\r\n            y: y_test,\r\n            mode: 'lines',\r\n            type: 'scatter',\r\n            line: { color: 'red', dash: 'dash' },\r\n            name: 'y = x line'\r\n        }], {\r\n            title: {\r\n                text: title,\r\n                font: {\r\n                    family: 'sans-serif',\r\n                    size: 10\r\n                },\r\n                xref: 'paper',\r\n                x: 0.05,\r\n            },\r\n            showlegend: false,\r\n            xaxis: {\r\n                linecolor: 'black',\r\n                linewidth: 1,\r\n                mirror: true,\r\n                title: {\r\n                    text: 'y',\r\n                    font: {\r\n                        family: 'sans-serif',\r\n                        size: 14,\r\n                        color: '#7f7f7f'\r\n                    }\r\n                },\r\n            },\r\n            yaxis: {\r\n                linecolor: 'black',\r\n                linewidth: 1,\r\n                mirror: true,\r\n                title: {\r\n                    text: 'predictions',\r\n                    font: {\r\n                        family: 'sans-serif',\r\n                        size: 14,\r\n                        color: '#7f7f7f'\r\n                    }\r\n                }\r\n            },\r\n            margin: {\r\n                l: 40,\r\n                r: 10,\r\n                b: 40,\r\n                t: 20,\r\n                pad: 0\r\n            }\r\n        }, {\r\n            responsive: true, staticPlot: false,\r\n        });\r\n    }\r\n    residual_plot(y, residuals, container, title = '') {\r\n        Plotly.newPlot(container, [{\r\n            x: y,\r\n            y: residuals,\r\n            type: 'scatter',\r\n            name: \"y\",\r\n            mode: 'markers',\r\n            marker: {\r\n                color: 'black',\r\n                size: 2\r\n            },\r\n        }], {\r\n            title: {\r\n                text: title,\r\n                font: {\r\n                    family: 'sans-serif',\r\n                    size: 10\r\n                },\r\n                xref: 'paper',\r\n                x: 0.05,\r\n            },\r\n            showlegend: false,\r\n            xaxis: {\r\n                linecolor: 'black',\r\n                linewidth: 1,\r\n                mirror: true,\r\n                title: {\r\n                    text: 'y',\r\n                    font: {\r\n                        family: 'sans-serif',\r\n                        size: 14,\r\n                        color: '#7f7f7f'\r\n                    }\r\n                },\r\n            },\r\n            yaxis: {\r\n                linecolor: 'black',\r\n                linewidth: 1,\r\n                mirror: true,\r\n                title: {\r\n                    text: 'residuals',\r\n                    font: {\r\n                        family: 'sans-serif',\r\n                        size: 14,\r\n                        color: '#7f7f7f'\r\n                    }\r\n                }\r\n            },\r\n            margin: {\r\n                l: 40,\r\n                r: 10,\r\n                b: 40,\r\n                t: 20,\r\n                pad: 0\r\n            }\r\n        }, { responsive: true, });\r\n    }\r\n}","\r\nimport ChartController from '@/helpers/charts';\r\nimport { tensorflow } from 'danfojs/dist/danfojs-base';\r\nimport UI from '@/helpers/ui';\r\nimport { evaluate_classification } from '@/helpers/utils';\r\nimport { metrics } from './utils.js';\r\n\r\nexport class ClassificationModel {\r\n\r\n    constructor() {\r\n        this.chartController = new ChartController();\r\n        this.ui = new UI(null, null)\r\n        this.task = null;\r\n        this.predictions = [];\r\n        this.plots = [];\r\n        this.tables = [];\r\n        this.id = null;\r\n    }\r\n    async train(x, y, x_test, y_test) {\r\n        throw new Error('Not implemented', x, y, x_test, y_test)\r\n    }\r\n    async evaluateModel(y, predictions, uniqueClasses) {\r\n        return await metrics(y, predictions, uniqueClasses);\r\n    }\r\n    async visualize(x_test, y_test, uniqueLabels, predictions, encoder) {\r\n        const evaluation_result = evaluate_classification(predictions, y_test, encoder);\r\n        const classes = encoder.inverseTransform(Object.values(encoder.$labels));\r\n        await this.chartController.plotConfusionMatrix(tensorflow.tensor(predictions), tensorflow.tensor(y_test), classes, Object.values(encoder.$labels), this.id);\r\n        await this.chartController.classificationPCA(x_test.values, encoder.inverseTransform(y_test), evaluation_result, uniqueLabels, this.id);\r\n        this.ui.predictions_table(x_test, encoder.inverseTransform(y_test), encoder.inverseTransform(predictions), null, this.id);\r\n        this.plots.push('pca_results_' + this.id);\r\n        this.tables.push('#predictions_table_' + this.id);\r\n\r\n    }\r\n}","\r\n/* eslint-disable no-undef */\r\n/* eslint-disable no-unused-vars */\r\n\r\n\r\nimport Plotly from 'danfojs/node_modules/plotly.js-dist-min';\r\nimport { ClassificationModel } from '../model';\r\n\r\nexport default class LinearRegression extends ClassificationModel {\r\n    constructor(options) {\r\n        super();\r\n        this.options = options;\r\n        this.model = null;\r\n        this.summary = null;\r\n        this.model_stats_matrix = null;\r\n\r\n    }\r\n\r\n    async train(x_train, y_train, x_test, y_test, labels, categorical_columns) {\r\n        this.context = {\r\n            X_train: x_train,\r\n            y_train: y_train,\r\n            y_test: y_test,\r\n            X_test: x_test,\r\n            regularization_type: this.options.regularization.value === \"Lasso\" ? 1 : 0,\r\n            labels: labels\r\n        };\r\n\r\n        const webR = window.webr;\r\n        await webR.init();\r\n        await webR.installPackages(['jsonlite', 'ggplot2', 'plotly', 'nnet', 'tidyr', 'dplyr', 'ggrepel', 'glmnet', 'modelsummary'], { quiet: true });\r\n        await webR.objs.globalEnv.bind('xx', x_train);\r\n        await webR.objs.globalEnv.bind('x_test', x_test);\r\n\r\n        await webR.objs.globalEnv.bind('y', y_train);\r\n        await webR.objs.globalEnv.bind('names', labels);\r\n        await webR.objs.globalEnv.bind('categorical_columns', categorical_columns?.length === 0 ? ['empty'] : categorical_columns);\r\n\r\n        await webR.objs.globalEnv.bind('is_lasso', this.context.regularization_type);\r\n\r\n\r\n        const plotlyData = await webR.evalR(`\r\n                    library(plotly)\r\n                    library(ggplot2)\r\n                    library(tidyr)\r\n                    library(dplyr)\r\n                    library(ggrepel)\r\n                    library(modelsummary)\r\n                    library(glmnet)\r\n\r\n                    # Select all columns except the first as predictors. \r\n                    x <- as.matrix(xx)  \r\n                    colnames(x) <- names\r\n                    scale_df <- as.data.frame(x)\r\n                    y <- as.factor(y)\r\n                    cols_to_scale <- setdiff(names, categorical_columns)\r\n                    scale_df[cols_to_scale] <- scale(scale_df[cols_to_scale])\r\n                    if(is_lasso){\r\n                        cvfit = cv.glmnet(as.matrix(scale_df), y, alpha = 1, family = \"multinomial\", type.multinomial = \"ungrouped\")\r\n                    }else{\r\n                       cvfit = cv.glmnet(as.matrix(scale_df), y, alpha = 0, family = \"multinomial\", type.multinomial = \"ungrouped\")\r\n                    }\r\n                    betas = as.matrix(cvfit$glmnet.fit$beta)\r\n                    lambdas = cvfit$lambda\r\n                    names(lambdas) = colnames(betas)\r\n                    \r\n                    \r\n                    p <- as.data.frame(betas) %>% \r\n                      tibble::rownames_to_column(\"variable\") %>% \r\n                      pivot_longer(-variable) %>% \r\n                      mutate(lambda=lambdas[name]) %>% \r\n                    ggplot(aes(x=lambda,y=value,col=variable)) + \r\n                      geom_line() + \r\n                      geom_label_repel(data=~subset(.x,lambda==min(lambda)),\r\n                                       aes(label=variable),nudge_x=-0.5) +\r\n                      geom_vline(xintercept=c(cvfit$lambda.1se,cvfit$lambda.min),\r\n                                linetype=\"dashed\")+\r\n                    scale_color_discrete(name = \"variable\") +  \r\n                      scale_x_log10()\r\n                    \r\n                    df = with(cvfit,\r\n                            data.frame(lambda = lambdas,MSE = cvm,MSEhi=cvup,MSElow=cvlo))\r\n\r\n            \r\n                    p2 <-ggplot(df,aes(x=lambda,y=MSE)) + \r\n                    geom_point(col=\"#f05454\") + \r\n                    scale_x_log10(\"lambda\") + \r\n                    geom_errorbar(aes(ymin = MSElow,ymax=MSEhi),col=\"#30475e\") + \r\n                    geom_vline(xintercept=c(cvfit$lambda.1se,cvfit$lambda.min),\r\n                                linetype=\"dashed\")+\r\n                    theme_bw()\r\n\r\n \r\n                    list(plotly_json(p, pretty = FALSE))\r\n                    `);\r\n        let results = await plotlyData.toArray()\r\n\r\n        this.summary = {\r\n            params: await results[2].toArray(),\r\n            bse: await results[4].toArray(),\r\n            pvalues: await results[3].toArray(),\r\n            predictions: await results[5].toArray(),\r\n            predictions1se: await results[21].toArray(),\r\n            predictionsmin: await results[22].toArray(),\r\n            residuals_ols: await results[18].toArray(),\r\n            residuals_1se: await results[19].toArray(),\r\n            residuals_min: await results[20].toArray(),\r\n            aic: await results[6].toNumber(),\r\n            bic: await results[7].toNumber(),\r\n            r2: await results[8].toNumber(),\r\n            best_fit_min: {\r\n                r2: await results[25].toNumber(),\r\n                aic: await results[26].toNumber(),\r\n                names: await results[16].toArray(),\r\n                coefs: await results[9].toArray(),\r\n                bse: await results[11].toArray(),\r\n                pvalues: await results[10].toArray(),\r\n            },\r\n            best_fit_1se: {\r\n                r2: await results[23].toNumber(),\r\n                aic: await results[24].toNumber(),\r\n                names: await results[17].toArray(),\r\n                coefs: await results[12].toArray(),\r\n                bse: await results[14].toArray(),\r\n                pvalues: await results[13].toArray(),\r\n            },\r\n        };\r\n        this.model_stats_matrix = [];\r\n        let cols = [...labels]\r\n        cols.unshift(\"intercept\")\r\n        let min_ols_columns = this.summary['best_fit_min'].names;\r\n\r\n        min_ols_columns.unshift('intercept');\r\n        let se_ols_columns = this.summary['best_fit_1se'].names;\r\n        se_ols_columns.unshift('intercept');\r\n\r\n        for (let i = 0; i < cols.length; i++) {\r\n            let row = [];\r\n            row.push(cols[i])\r\n            row.push(this.summary['params'][i]?.toFixed(2) ?? ' ')\r\n            row.push(this.summary['bse'][i]?.toFixed(2) ?? ' ')\r\n            row.push(this.summary['pvalues'][i]?.toFixed(2) ?? ' ')\r\n            let index = min_ols_columns.findIndex(m => m === cols[i])\r\n            if (index !== -1) {\r\n                row.push(this.summary['best_fit_min']['coefs'][index]?.toFixed(2) ?? ' ')\r\n                row.push(this.summary['best_fit_min']['bse'][index]?.toFixed(2) ?? ' ')\r\n                row.push(this.summary['best_fit_min']['pvalues'][index]?.toFixed(2) ?? ' ')\r\n            } else {\r\n                row.push(' ')\r\n                row.push(' ')\r\n                row.push(' ')\r\n            }\r\n            index = se_ols_columns.findIndex(m => m === cols[i])\r\n            if (index !== -1) {\r\n                row.push(this.summary['best_fit_1se']['coefs'][index]?.toFixed(2) ?? ' ')\r\n                row.push(this.summary['best_fit_1se']['bse'][index]?.toFixed(2) ?? ' ')\r\n                row.push(this.summary['best_fit_1se']['pvalues'][index]?.toFixed(2) ?? ' ')\r\n            } else {\r\n                row.push(' ')\r\n                row.push(' ')\r\n                row.push(' ')\r\n            }\r\n            this.model_stats_matrix.push(row)\r\n        }\r\n        this.model_stats_matrix.reverse()\r\n        let reg_plot = JSON.parse(await results[0].toString())\r\n        reg_plot.layout.legend[\"orientation\"] = 'h'\r\n        reg_plot.layout['showlegend'] = false;\r\n\r\n        let coefs_plot = JSON.parse(await results[15].toString())\r\n        coefs_plot.layout.legend = {\r\n            x: 0,\r\n            y: 1,\r\n            traceorder: 'normal',\r\n            font: {\r\n                family: 'sans-serif',\r\n                size: 8,\r\n                color: '#000'\r\n            },\r\n        };\r\n        this.summary.coefs_plot = coefs_plot;\r\n        this.summary.regularization_plot = reg_plot;\r\n        this.summary.regularization_plot.layout['autosize'] = true\r\n        this.summary.regularization_plot.layout['staticPlot'] = true\r\n        this.summary.regularization_plot.layout['responsive'] = true\r\n        this.summary.errors_plot = JSON.parse(await results[1].toString());\r\n        this.summary.qqplot_ols_plot = JSON.parse(await results[27].toString());\r\n        this.summary.qqplot_1se_plot = JSON.parse(await results[28].toString());\r\n        this.summary.qqplot_min_plot = JSON.parse(await results[29].toString());\r\n\r\n        return this.summary['predictions'];\r\n    }\r\n    async visualize(x_test, y_test, uniqueLabels, predictions, encoder) {\r\n        let current = this;\r\n        return new Promise((resolve) => {\r\n            setTimeout(() => {\r\n                new DataTable('#metrics_table_' + current.id, {\r\n                    responsive: false,\r\n                    \"footerCallback\": function (row, data, start, end, display) {\r\n                        var api = this.api();\r\n                        $(api.column(2).footer()).html(\r\n                            'R2 : ' + current.summary.r2.toFixed(2) + ' AIC: ' + current.summary.aic.toFixed(2)\r\n                        );\r\n                        $(api.column(5).footer()).html(\r\n                            'R2 : ' + current.summary['best_fit_min'].r2.toFixed(2) + ' AIC: ' + current.summary['best_fit_min'].aic.toFixed(2)\r\n                        );\r\n                        $(api.column(8).footer()).html(\r\n                            'R2 : ' + current.summary['best_fit_1se'].r2.toFixed(2) + ' AIC: ' + current.summary['best_fit_1se'].aic.toFixed(2)\r\n                        );\r\n                    },\r\n                    data: current.model_stats_matrix,\r\n                    info: false,\r\n                    search: false,\r\n                    ordering: false,\r\n                    searching: false,\r\n                    paging: false,\r\n                    bDestroy: true,\r\n                });\r\n\r\n                Plotly.newPlot('parameters_plot_' + current.id, current.summary.coefs_plot, { staticPlot: false });\r\n                Plotly.newPlot('regularization_' + current.id, current.summary.regularization_plot, { staticPlot: true });\r\n                Plotly.newPlot('errors_' + current.id, current.summary.errors_plot, { staticPlot: true });\r\n                Plotly.newPlot('qqplot_ols_' + current.id, current.summary.qqplot_ols_plot, { staticPlot: true });\r\n                Plotly.newPlot('qqplot_min_' + current.id, current.summary.qqplot_min_plot, { staticPlot: true });\r\n                Plotly.newPlot('qqplot_1se_' + current.id, current.summary.qqplot_1se_plot, { staticPlot: true });\r\n                current.ui.yhat_plot(y_test, this.summary['predictions'], 'regression_y_yhat_' + + current.id, 'OLS predictions')\r\n                current.ui.yhat_plot(y_test, this.summary['predictionsmin'], 'regression_y_yhat_min_' + + current.id, 'OLS min predictions')\r\n                current.ui.yhat_plot(y_test, this.summary['predictions1se'], 'regression_y_yhat_1se_' + + current.id, 'OLS 1se predictions')\r\n                current.ui.residual_plot(y_test, this.summary['residuals_ols'], 'regression_residual_' + + current.id, 'OLS residuals')\r\n                current.ui.residual_plot(y_test, this.summary['residuals_min'], 'regression_residual_min_' + + current.id, 'OLS min residuals')\r\n                current.ui.residual_plot(y_test, this.summary['residuals_1se'], 'regression_residual_1se_' + + current.id, 'OLS 1se residuals')\r\n                this.ui.predictions_table_regression(x_test, y_test, predictions, this.id);\r\n                resolve('resolved');\r\n            }, 1000);\r\n        });\r\n\r\n    }\r\n}","\r\nimport ChartController from '@/helpers/charts';\r\nimport UI from '@/helpers/ui';\r\nimport { calculateMSE, calculateRSquared } from './utils.js';\r\n\r\nexport class RegressionModel {\r\n\r\n    constructor() {\r\n        this.chartController = new ChartController();\r\n        this.ui = new UI(null, null)\r\n        this.task = null;\r\n        this.predictions = [];\r\n        this.id = null;\r\n        this.plots = [];\r\n        this.tables = [];\r\n    }\r\n    async train(x, y, x_test, y_test) {\r\n        throw new Error('Not implemented', x, y, x_test, y_test)\r\n    }\r\n    async evaluateModel(y, predictions) {\r\n        return [calculateMSE(y, predictions), calculateRSquared(y, predictions)];\r\n    }\r\n    async visualize(x_test, y_test, _, predictions) {\r\n        let current = this;\r\n        return new Promise((resolve) => {\r\n            setTimeout(() => {\r\n                let y = y_test\r\n                let residuals = [];\r\n                predictions.forEach((element, i) => {\r\n                    residuals.push(y[i] - element)\r\n                });\r\n                current.ui.yhat_plot(y, predictions, 'regression_y_yhat_' + current.id, 'OLS predictions')\r\n                current.ui.residual_plot(predictions, residuals, 'errors_' + current.id, 'Residuals')\r\n                this.ui.predictions_table_regression(x_test, y_test, predictions, this.id);\r\n                this.plots.push('regression_y_yhat_' + current.id);\r\n                this.plots.push('errors_' + current.id);\r\n                this.tables.push('#predictions_table_' + this.id);\r\n                resolve('resolved');\r\n            }, 500);\r\n        });\r\n    }\r\n}","\r\n/* eslint-disable no-undef */\r\n/* eslint-disable no-unused-vars */\r\n\r\n\r\nimport Plotly from 'danfojs/node_modules/plotly.js-dist-min';\r\nimport { RegressionModel } from '../regression_model';\r\n\r\nexport default class LinearRegression extends RegressionModel {\r\n    constructor(options) {\r\n        super();\r\n        this.options = options;\r\n        this.model = null;\r\n        this.summary = null;\r\n        this.model_stats_matrix = null;\r\n\r\n    }\r\n\r\n    async train(x_train, y_train, x_test, y_test, labels, categorical_columns) {\r\n        this.context = {\r\n            X_train: x_train,\r\n            y_train: y_train,\r\n            y_test: y_test,\r\n            X_test: x_test,\r\n            regularization_type: this.options.regularization.value === \"Lasso\" ? 1 : 0,\r\n            labels: labels\r\n        };\r\n\r\n        const webR = window.webr;\r\n        await webR.init();\r\n        await webR.installPackages(['jsonlite', 'iml', 'ggplot2', 'plotly', 'tidyr', 'dplyr', 'ggrepel', 'glmnet', 'modelsummary'], { quiet: true });\r\n        await webR.objs.globalEnv.bind('xx', x_train);\r\n        await webR.objs.globalEnv.bind('x_test', x_test);\r\n\r\n        await webR.objs.globalEnv.bind('y', y_train);\r\n        await webR.objs.globalEnv.bind('names', labels);\r\n        await webR.objs.globalEnv.bind('categorical_columns', categorical_columns?.length === 0 ? ['empty'] : categorical_columns);\r\n\r\n        await webR.objs.globalEnv.bind('is_lasso', this.context.regularization_type);\r\n\r\n\r\n        const plotlyData = await webR.evalR(`\r\n                    library(plotly)\r\n                    library(ggplot2)\r\n                    library(tidyr)\r\n                    library(iml)\r\n                    library(dplyr)\r\n                    library(ggrepel)\r\n                    library(modelsummary)\r\n                    library(glmnet)\r\n\r\n                    # Select all columns except the first as predictors. \r\n                    x <- as.matrix(xx)  \r\n                    colnames(x) <- names\r\n                    scale_df <- as.data.frame(x)\r\n\r\n                    cols_to_scale <- setdiff(names, categorical_columns)\r\n                    scale_df[cols_to_scale] <- scale(scale_df[cols_to_scale])\r\n                    scaled_y <- scale(y)\r\n                    base_model = cv.glmnet(as.matrix(scale_df), scaled_y)\r\n                    weights <- 1 / abs(coef(base_model)[-1])\r\n                    if(is_lasso){\r\n                        cvfit = cv.glmnet(as.matrix(scale_df), scaled_y, alpha = 1,penalty.factor = weights)\r\n                    }else{\r\n                       cvfit = cv.glmnet(as.matrix(scale_df), scaled_y, alpha = 0)\r\n                    }\r\n                    betas = as.matrix(cvfit$glmnet.fit$beta)\r\n                    lambdas = cvfit$lambda\r\n                    names(lambdas) = colnames(betas)\r\n                    \r\n                    \r\n                    p <- as.data.frame(betas) %>% \r\n                      tibble::rownames_to_column(\"variable\") %>% \r\n                      pivot_longer(-variable) %>% \r\n                      mutate(lambda=lambdas[name]) %>% \r\n                    ggplot(aes(x=lambda,y=value,col=variable)) + \r\n                      geom_line() + \r\n                      geom_label_repel(data=~subset(.x,lambda==min(lambda)),\r\n                                       aes(label=variable),nudge_x=-0.5) +\r\n                      geom_vline(xintercept=c(cvfit$lambda.1se,cvfit$lambda.min),\r\n                                linetype=\"dashed\")+\r\n                      scale_x_log10()+ labs(y = \"Coefficients\") + theme_bw()\r\n                    df = with(cvfit,\r\n                            data.frame(lambda = lambdas,MSE = cvm,MSEhi=cvup,MSElow=cvlo))\r\n\r\n                    p2<-ggplot(df,aes(x=lambda,y=MSE)) + \r\n                    geom_point(col=\"#f05454\") + \r\n                    scale_x_log10(\"lambda\") + \r\n                    geom_errorbar(aes(ymin = MSElow,ymax=MSEhi),col=\"#30475e\") + \r\n                    geom_vline(xintercept=c(cvfit$lambda.1se,cvfit$lambda.min),\r\n                                linetype=\"dashed\")+\r\n                    theme_bw()\r\n\r\n \r\n                    model <- lm(y ~ ., data = as.data.frame(x))\r\n                    x <- as.matrix(x_test)  \r\n                    colnames(x) <- names\r\n                    predictions <- predict(model, newdata = as.data.frame(x))\r\n                    # Get coefficients, p-values, and standard errors\r\n                    coefs <- coef(model)\r\n                    pvals <- summary(model)$coefficients[,4]\r\n                    std_error <- summary(model)$coefficients[,2]\r\n                    aic_value <- AIC(model)\r\n                    bic_value <- BIC(model)\r\n                    rsquared <- summary(model)$r.squared\r\n                    residuals_ols <- resid(model)\r\n                    fitted_values_ols <- fitted(model)\r\n\r\n\r\n                    best_lambda <- cvfit$lambda.min\r\n                    x <- as.matrix(xx) \r\n                    colnames(x) <- names\r\n                    # Get the coefficients for the best lambda\r\n                    best_model <- glmnet(x, y, alpha =is_lasso, lambda = best_lambda)\r\n                    coefficients <- as.matrix(coef(best_model))\r\n                    nonzero_coef <- coefficients[coefficients != 0]\r\n                    nonzero_features <- rownames(coefficients)[coefficients != 0 & rownames(coefficients) != \"(Intercept)\"]\r\n\r\n                    X_reduced <- x[, nonzero_features]\r\n                    linear_model_min_features <- nonzero_features\r\n\r\n                    # Fit a linear regression model using the non-zero features\r\n                    linear_model_min <- lm(y ~ ., data = as.data.frame(X_reduced))\r\n                    coefs_min <- coef(linear_model_min)\r\n                    pvals_min <- summary(linear_model_min)$coefficients[,4]\r\n                    std_error_min <- summary(linear_model_min)$coefficients[,2]\r\n                    aic_min <- AIC(linear_model_min)\r\n                    rsquared_min <- summary(linear_model_min)$r.squared\r\n                    best_lambda <- cvfit$lambda.1se\r\n                    best_model <- glmnet(x, y, alpha =is_lasso, lambda = best_lambda)\r\n                    coefficients <- as.matrix(coef(best_model))\r\n                    residuals_min <- resid(linear_model_min)\r\n                    fitted_values_min <- fitted(linear_model_min)\r\n\r\n\r\n                    x <- as.matrix(x_test)  \r\n                    colnames(x) <- names\r\n                    x <- x[, nonzero_features]\r\n                    predictions_min <- predict(linear_model_min, newdata = as.data.frame(x))\r\n                    x <- as.matrix(xx)  \r\n                    colnames(x) <- names\r\n                    nonzero_coef <- coefficients[coefficients != 0]\r\n                    \r\n                    nonzero_features <- rownames(coefficients)[coefficients != 0 & rownames(coefficients) != \"(Intercept)\"]\r\n                    X_reduced <- x[, nonzero_features]\r\n                    linear_model_1se_features <- nonzero_features\r\n                    linear_model_1se <- lm(y ~ ., data = as.data.frame(X_reduced))\r\n                    coefs_1se <- coef(linear_model_1se)\r\n                    print(coefs_1se)\r\n                    pvals_1se <- summary(linear_model_1se)$coefficients[,4]\r\n                    aic_1se<- AIC(linear_model_1se)\r\n                    rsquared_1se <- summary(linear_model_1se)$r.squared\r\n                    std_error_1se <- summary(linear_model_1se)$coefficients[,2]\r\n                    residuals_1se <- resid(linear_model_1se)\r\n                    fitted_values_1se <- fitted(linear_model_1se)\r\n                    x <- as.matrix(x_test)  \r\n                    colnames(x) <- names\r\n                    x <- x[, nonzero_features]\r\n                    predictions_1se <- predict(linear_model_1se, newdata = as.data.frame(x))\r\n\r\n\r\n                    models <- list(\r\n                        \"OLS\" = model,\r\n                        \"Min OLS\" = linear_model_min,\r\n                        \"1se OLS\" = linear_model_1se\r\n                        )\r\n                    z <- modelplot(models =models,coef_omit = 'Interc')\r\n                    qqplot_ols <-ggplot(data.frame(residuals = residuals_ols), aes(sample = residuals_ols)) +\r\n                        stat_qq() +\r\n                        stat_qq_line(col = \"red\") +\r\n                        labs(title = \"QQ Plot of Residuals\",\r\n                            x = \"Theoretical Quantiles\",\r\n                            y = \"Sample Quantiles\") +\r\n                        theme_bw()\r\n                    qqplot_1se <-ggplot(data.frame(residuals = residuals_1se), aes(sample = residuals_1se)) +\r\n                        stat_qq() +\r\n                        stat_qq_line(col = \"red\") +\r\n                        labs(title = \"QQ Plot of Residuals\",\r\n                            x = \"Theoretical Quantiles\",\r\n                            y = \"Sample Quantiles\") +\r\n                        theme_bw()\r\n                    qqplot_min <-ggplot(data.frame(residuals = residuals_min), aes(sample = residuals_min)) +\r\n                        stat_qq() +\r\n                        stat_qq_line(col = \"red\") +\r\n                        labs(title = \"QQ Plot of Residuals\",\r\n                            x = \"Theoretical Quantiles\",\r\n                            y = \"Sample Quantiles\") +\r\n                        theme_bw()\r\n                        \r\n\r\n\r\n\r\n                    list(plotly_json(p, pretty = FALSE),plotly_json(p2, pretty = FALSE),coefs,\r\n                    pvals,std_error,predictions,aic_value,bic_value,rsquared\r\n                    ,coefs_min,pvals_min,std_error_min\r\n                    ,coefs_1se,pvals_1se,std_error_1se,plotly_json(z, pretty = FALSE),linear_model_min_features,linear_model_1se_features\r\n                    ,residuals_ols,residuals_1se,residuals_min,predictions_1se,predictions_min,rsquared_1se,aic_1se,rsquared_min,aic_min\r\n                    ,plotly_json(qqplot_ols, pretty = FALSE)\r\n                    ,plotly_json(qqplot_1se, pretty = FALSE)\r\n                    ,plotly_json(qqplot_min, pretty = FALSE)\r\n                    \r\n                    )\r\n                    `);\r\n        let results = await plotlyData.toArray()\r\n\r\n        this.summary = {\r\n            params: await results[2].toArray(),\r\n            bse: await results[4].toArray(),\r\n            pvalues: await results[3].toArray(),\r\n            predictions: await results[5].toArray(),\r\n            predictions1se: await results[21].toArray(),\r\n            predictionsmin: await results[22].toArray(),\r\n            residuals_ols: await results[18].toArray(),\r\n            residuals_1se: await results[19].toArray(),\r\n            residuals_min: await results[20].toArray(),\r\n            aic: await results[6].toNumber(),\r\n            bic: await results[7].toNumber(),\r\n            r2: await results[8].toNumber(),\r\n            best_fit_min: {\r\n                r2: await results[25].toNumber(),\r\n                aic: await results[26].toNumber(),\r\n                names: await results[16].toArray(),\r\n                coefs: await results[9].toArray(),\r\n                bse: await results[11].toArray(),\r\n                pvalues: await results[10].toArray(),\r\n            },\r\n            best_fit_1se: {\r\n                r2: await results[23].toNumber(),\r\n                aic: await results[24].toNumber(),\r\n                names: await results[17].toArray(),\r\n                coefs: await results[12].toArray(),\r\n                bse: await results[14].toArray(),\r\n                pvalues: await results[13].toArray(),\r\n            },\r\n        };\r\n        this.model_stats_matrix = [];\r\n        let cols = [...labels]\r\n        cols.unshift(\"intercept\")\r\n        let min_ols_columns = this.summary['best_fit_min'].names;\r\n\r\n        min_ols_columns.unshift('intercept');\r\n        let se_ols_columns = this.summary['best_fit_1se'].names;\r\n        se_ols_columns.unshift('intercept');\r\n\r\n        for (let i = 0; i < cols.length; i++) {\r\n            let row = [];\r\n            row.push(cols[i])\r\n            row.push(this.summary['params'][i]?.toFixed(2) ?? ' ')\r\n            row.push(this.summary['bse'][i]?.toFixed(2) ?? ' ')\r\n            row.push(this.summary['pvalues'][i]?.toFixed(2) ?? ' ')\r\n            let index = min_ols_columns.findIndex(m => m === cols[i])\r\n            if (index !== -1) {\r\n                row.push(this.summary['best_fit_min']['coefs'][index]?.toFixed(2) ?? ' ')\r\n                row.push(this.summary['best_fit_min']['bse'][index]?.toFixed(2) ?? ' ')\r\n                row.push(this.summary['best_fit_min']['pvalues'][index]?.toFixed(2) ?? ' ')\r\n            } else {\r\n                row.push(' ')\r\n                row.push(' ')\r\n                row.push(' ')\r\n            }\r\n            index = se_ols_columns.findIndex(m => m === cols[i])\r\n            if (index !== -1) {\r\n                row.push(this.summary['best_fit_1se']['coefs'][index]?.toFixed(2) ?? ' ')\r\n                row.push(this.summary['best_fit_1se']['bse'][index]?.toFixed(2) ?? ' ')\r\n                row.push(this.summary['best_fit_1se']['pvalues'][index]?.toFixed(2) ?? ' ')\r\n            } else {\r\n                row.push(' ')\r\n                row.push(' ')\r\n                row.push(' ')\r\n            }\r\n            this.model_stats_matrix.push(row)\r\n        }\r\n        this.model_stats_matrix.reverse()\r\n        let reg_plot = JSON.parse(await results[0].toString())\r\n\r\n        reg_plot.layout['showlegend'] = false;\r\n        reg_plot.layout.legend = {\r\n            font: {\r\n                family: 'sans-serif',\r\n                size: 8,\r\n                color: '#000'\r\n            },\r\n        };\r\n        let coefs_plot = JSON.parse(await results[15].toString())\r\n        coefs_plot.layout.legend = {\r\n            x: 0,\r\n            y: 1,\r\n            traceorder: 'normal',\r\n            font: {\r\n                family: 'sans-serif',\r\n                size: 8,\r\n                color: '#000'\r\n            },\r\n        };\r\n        this.summary.coefs_plot = coefs_plot;\r\n        this.summary.coefs_plot.layout.xaxis.title.font = {\r\n            size: 10\r\n        };\r\n        this.summary.regularization_plot = reg_plot;\r\n        this.summary.errors_plot = JSON.parse(await results[1].toString());\r\n        this.summary.qqplot_ols_plot = JSON.parse(await results[27].toString());\r\n        this.summary.qqplot_1se_plot = JSON.parse(await results[28].toString());\r\n        this.summary.qqplot_min_plot = JSON.parse(await results[29].toString());\r\n        this.summary.qqplot_ols_plot.layout.title.font = {\r\n            family: 'sans-serif',\r\n            size: 10\r\n        };\r\n        this.summary.qqplot_ols_plot.data[0].marker.size = 2;\r\n        this.summary.qqplot_ols_plot.layout.xaxis.title.font = {\r\n            family: 'sans-serif',\r\n            size: 10\r\n        };\r\n        this.summary.qqplot_ols_plot.layout.yaxis.title.font = {\r\n            family: 'sans-serif',\r\n            size: 10\r\n        };\r\n        this.summary.qqplot_1se_plot.layout.title.font = {\r\n            family: 'sans-serif',\r\n            size: 10\r\n        };\r\n        this.summary.qqplot_1se_plot.data[0].marker.size = 2;\r\n\r\n        this.summary.qqplot_1se_plot.layout.xaxis.title.font = {\r\n            family: 'sans-serif',\r\n            size: 10\r\n        };\r\n        this.summary.qqplot_1se_plot.layout.yaxis.title.font = {\r\n            family: 'sans-serif',\r\n            size: 10\r\n        };\r\n        this.summary.qqplot_min_plot.layout.title.font = {\r\n            family: 'sans-serif',\r\n            size: 10\r\n        };\r\n        this.summary.qqplot_min_plot.layout.xaxis.title.font = {\r\n            family: 'sans-serif',\r\n            size: 10\r\n        };\r\n        this.summary.qqplot_min_plot.layout.yaxis.title.font = {\r\n            family: 'sans-serif',\r\n            size: 10\r\n        };\r\n        this.summary.qqplot_min_plot.data[0].marker.size = 2;\r\n        return this.summary['predictions'];\r\n    }\r\n    async visualize(x_test, y_test, uniqueLabels, predictions, encoder) {\r\n        await super.visualize(x_test, y_test, uniqueLabels, predictions)\r\n        let current = this;\r\n        new DataTable('#metrics_table_' + current.id, {\r\n            responsive: false,\r\n            \"footerCallback\": function (row, data, start, end, display) {\r\n                var api = this.api();\r\n                $(api.column(2).footer()).html(\r\n                    'R2 : ' + current.summary.r2.toFixed(2) + ' AIC: ' + current.summary.aic.toFixed(2)\r\n                );\r\n                $(api.column(5).footer()).html(\r\n                    'R2 : ' + current.summary['best_fit_min'].r2.toFixed(2) + ' AIC: ' + current.summary['best_fit_min'].aic.toFixed(2)\r\n                );\r\n                $(api.column(8).footer()).html(\r\n                    'R2 : ' + current.summary['best_fit_1se'].r2.toFixed(2) + ' AIC: ' + current.summary['best_fit_1se'].aic.toFixed(2)\r\n                );\r\n            },\r\n            data: current.model_stats_matrix,\r\n            info: false,\r\n            search: false,\r\n            ordering: false,\r\n            searching: false,\r\n            paging: false,\r\n            bDestroy: true,\r\n            columnDefs: [\r\n                {\r\n                    \"targets\": 3,\r\n                    \"createdCell\": function (td, cellData, rowData, row, col) {\r\n                        if (rowData[3] <= 0.05) {\r\n                            $(td).css('color', 'red')\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    \"targets\": 6,\r\n                    \"createdCell\": function (td, cellData, rowData, row, col) {\r\n                        if (rowData[6] <= 0.05) {\r\n                            $(td).css('color', 'red')\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    \"targets\": 9,\r\n                    \"createdCell\": function (td, cellData, rowData, row, col) {\r\n                        if (rowData[9] <= 0.05) {\r\n                            $(td).css('color', 'red')\r\n                        }\r\n                    }\r\n                }\r\n            ],\r\n        });\r\n\r\n        await Plotly.newPlot('parameters_plot_' + current.id, current.summary.coefs_plot, { autosize: true });\r\n        await Plotly.newPlot('regularization_' + current.id, current.summary.regularization_plot, { autosize: true });\r\n        await Plotly.newPlot('errors_' + current.id, current.summary.errors_plot, { autosize: true });\r\n        await Plotly.newPlot('qqplot_ols_' + current.id, current.summary.qqplot_ols_plot, { autosize: true });\r\n        await Plotly.newPlot('qqplot_min_' + current.id, current.summary.qqplot_min_plot, { autosize: true });\r\n        await Plotly.newPlot('qqplot_1se_' + current.id, current.summary.qqplot_1se_plot, { autosize: true });\r\n        current.ui.yhat_plot(y_test, this.summary['predictions'], 'regression_y_yhat_' + current.id, 'OLS predictions')\r\n        current.ui.yhat_plot(y_test, this.summary['predictionsmin'], 'regression_y_yhat_min_' + current.id, 'OLS min predictions')\r\n        current.ui.yhat_plot(y_test, this.summary['predictions1se'], 'regression_y_yhat_1se_' + current.id, 'OLS 1se predictions')\r\n        current.ui.residual_plot(y_test, this.summary['residuals_ols'], 'regression_residual_' + current.id, 'OLS residuals')\r\n        current.ui.residual_plot(y_test, this.summary['residuals_min'], 'regression_residual_min_' + current.id, 'OLS min residuals')\r\n        current.ui.residual_plot(y_test, this.summary['residuals_1se'], 'regression_residual_1se_' + current.id, 'OLS 1se residuals')\r\n        this.ui.predictions_table_regression(x_test, y_test, predictions, this.id);\r\n        window.dispatchEvent(new Event('resize'));\r\n\r\n    }\r\n}","import { asyncRun } from \"@/helpers/py-worker\";\r\nimport { RegressionModel } from \"../regression_model\";\r\n\r\n\r\nexport default class BSplineRegression extends RegressionModel {\r\n    constructor(options) {\r\n        super();\r\n        this.options = options;\r\n        this.model = null;\r\n    }\r\n    async train(x_train, y_train, x_test, y_test, labels) {\r\n        this.context = {\r\n            X_train: x_train,\r\n            y_train: y_train,\r\n            X_test: x_test,\r\n            y_test: y_test,\r\n            knots: +this.options.knots.value,\r\n            degree: +this.options.degree.value,\r\n            labels: labels\r\n\r\n        };\r\n        const script = `\r\n        import numpy as np\r\n        from patsy import dmatrix\r\n        import statsmodels.formula.api as smf\r\n        import statsmodels.api as sm\r\n        from sklearn.preprocessing import SplineTransformer\r\n        import pandas as pd\r\n        from sklearn import linear_model\r\n        from sklearn.metrics import mean_squared_error\r\n        from sklearn.pipeline import make_pipeline\r\n        from js import X_train,y_train,X_test,knots,degree,labels,y_test\r\n        from sklearn.inspection import partial_dependence\r\n        from sklearn.inspection import permutation_importance\r\n\r\n\r\n        model = make_pipeline(\r\n            SplineTransformer(n_knots=knots, degree=degree), \r\n            linear_model.LinearRegression()\r\n            )\r\n        model.fit(X_train, y_train)\r\n        pred_train = model.predict(X_train)\r\n        rmse_train = mean_squared_error(y_train, pred_train, squared=True)\r\n        # Test data\r\n        pred_test = model.predict(X_test)\r\n\r\n        pdp_results = partial_dependence(model, X_train, [0])\r\n        fi = permutation_importance(model,X_test,y_test)\r\n            \r\n        pred_test,pdp_results[\"average\"],list(pdp_results[\"grid_values\"][0]), list(fi.importances)\r\n        `;\r\n        try {\r\n            const { results, error } = await asyncRun(script, this.context);\r\n            if (results) {\r\n                this.predictions = Array.from(results[0]);\r\n                this.pdp_averages = Array.from(results[1]);\r\n                this.pdp_grid = Array.from(results[2]);\r\n                this.importances = Array.from(results[3]);\r\n                return Array.from(results[0]);\r\n            } else if (error) {\r\n                console.log(\"pyodideWorker error: \", error);\r\n            }\r\n        } catch (e) {\r\n            console.log(\r\n                `Error in pyodideWorker at ${e.filename}, Line: ${e.lineno}, ${e.message}`,\r\n            );\r\n        }\r\n    }\r\n    async visualize(x_test, y_test, uniqueLabels, predictions, encoder, columns) {\r\n        await super.visualize(x_test, y_test, uniqueLabels, predictions, encoder)\r\n        this.chartController.PFIBoxplot(this.id, this.importances, columns);\r\n        this.chartController.plotPDP(this.id, this.pdp_averages, this.pdp_grid, uniqueLabels, columns[0]);\r\n    }\r\n}","import { ClassificationModel } from \"../model\";\r\nimport { asyncRun } from \"@/helpers/py-worker\";\r\nconst SVM_TYPES = {\r\n    C_SVC: '0', // C support vector classification\r\n    NU_SVC: '1', // NU support vector classification\r\n    ONE_CLASS: '2', // ONE CLASS classification\r\n    EPSILON_SVR: '3', // Epsilon support vector regression\r\n    NU_SVR: '4' // Nu support vector regression\r\n};\r\n\r\n\r\nconst KERNEL_TYPES = {\r\n    LINEAR: '0',\r\n    POLYNOMIAL: '1',\r\n    RBF: '2', // Radial basis function\r\n    SIGMOID: '3',\r\n    PRECOMPUTED: '4'\r\n};\r\nexport default class SupportVectorMachine extends ClassificationModel {\r\n    constructor(opt) {\r\n        super();\r\n        // eslint-disable-next-line no-unused-vars\r\n        let options = {\r\n            kernel: KERNEL_TYPES[opt.kernel.value.toUpperCase()],\r\n            type: SVM_TYPES.C_SVC,\r\n            coef0: opt.bias.value,\r\n            gamma: opt.gamma.value,\r\n            degree: opt.degree.value,\r\n            quiet: true\r\n        }\r\n    }\r\n    async train(x_train, y_train, x_test, y_test) {\r\n\r\n        this.context = {\r\n            X_train: x_train,\r\n            y_train: y_train,\r\n            X_test: x_test,\r\n            y_test: y_test,\r\n\r\n        };\r\n        const script = `\r\n        from sklearn import svm\r\n        from js import X_train,y_train,X_test,y_test\r\n        from sklearn.inspection import partial_dependence\r\n        from sklearn.inspection import permutation_importance\r\n\r\n        model = svm.SVC(kernel=\"linear\")\r\n        model.fit(X_train, y_train)\r\n        y_pred = model.predict(X_test)\r\n\r\n        pdp_results = partial_dependence(model, X_train, [0])\r\n        fi = permutation_importance(model,X_test,y_test)\r\n        y_pred,pdp_results[\"average\"],list(pdp_results[\"grid_values\"][0]), list(fi.importances)\r\n    `;\r\n        try {\r\n            const { results, error } = await asyncRun(script, this.context);\r\n            if (results) {\r\n                this.predictions = Array.from(results[0]);\r\n                this.pdp_averages = Array.from(results[1]);\r\n                this.pdp_grid = Array.from(results[2]);\r\n                this.importances = Array.from(results[3]);\r\n                return Array.from(results[0]);\r\n            } else if (error) {\r\n                console.log(\"pyodideWorker error: \", error);\r\n            }\r\n        } catch (e) {\r\n            console.log(\r\n                `Error in pyodideWorker at ${e.filename}, Line: ${e.lineno}, ${e.message}`,\r\n            );\r\n        }\r\n    }\r\n    async visualize(x_test, y_test, uniqueLabels, predictions, encoder, columns) {\r\n        await super.visualize(x_test, y_test, uniqueLabels, predictions, encoder)\r\n        this.chartController.PFIBoxplot(this.id, this.importances, columns);\r\n        this.chartController.plotPDP(this.id, this.pdp_averages, this.pdp_grid, uniqueLabels, columns[0]);\r\n    }\r\n}","import { RegressionModel } from \"../regression_model\";\r\nimport { asyncRun } from \"@/helpers/py-worker\";\r\nconst SVM_TYPES = {\r\n    C_SVC: '0', // C support vector classification\r\n    NU_SVC: '1', // NU support vector classification\r\n    ONE_CLASS: '2', // ONE CLASS classification\r\n    EPSILON_SVR: '3', // Epsilon support vector regression\r\n    NU_SVR: '4' // Nu support vector regression\r\n};\r\n\r\n\r\nconst KERNEL_TYPES = {\r\n    LINEAR: '0',\r\n    POLYNOMIAL: '1',\r\n    RBF: '2', // Radial basis function\r\n    SIGMOID: '3',\r\n    PRECOMPUTED: '4'\r\n};\r\nexport default class SupportVectorMachineRegression extends RegressionModel {\r\n    constructor(opt) {\r\n        super();\r\n        // eslint-disable-next-line no-unused-vars\r\n        let options = {\r\n            kernel: KERNEL_TYPES[opt.kernel.value.toUpperCase()],\r\n            type: SVM_TYPES.C_SVC,\r\n            coef0: opt.bias.value,\r\n            gamma: opt.gamma.value,\r\n            degree: opt.degree.value,\r\n            quiet: true\r\n        }\r\n    }\r\n    async train(x_train, y_train, x_test, y_test) {\r\n\r\n        this.context = {\r\n            X_train: x_train,\r\n            y_train: y_train,\r\n            X_test: x_test,\r\n            y_test: y_test,\r\n\r\n        };\r\n        const script = `\r\n        from sklearn import svm\r\n        from js import X_train,y_train,X_test,y_test\r\n        from sklearn.inspection import partial_dependence\r\n        from sklearn.inspection import permutation_importance\r\n\r\n        model = svm.SVR(kernel=\"linear\")\r\n        model.fit(X_train, y_train)\r\n        y_pred = model.predict(X_test)\r\n\r\n        pdp_results = partial_dependence(model, X_train, [0])\r\n        fi = permutation_importance(model,X_test,y_test)\r\n        y_pred,pdp_results[\"average\"],list(pdp_results[\"grid_values\"][0]), list(fi.importances)\r\n    `;\r\n        try {\r\n            const { results, error } = await asyncRun(script, this.context);\r\n            if (results) {\r\n                this.predictions = Array.from(results[0]);\r\n                this.pdp_averages = Array.from(results[1]);\r\n                this.pdp_grid = Array.from(results[2]);\r\n                this.importances = Array.from(results[3]);\r\n                return Array.from(results[0]);\r\n            } else if (error) {\r\n                console.log(\"pyodideWorker error: \", error);\r\n            }\r\n        } catch (e) {\r\n            console.log(\r\n                `Error in pyodideWorker at ${e.filename}, Line: ${e.lineno}, ${e.message}`,\r\n            );\r\n        }\r\n    }\r\n    async visualize(x_test, y_test, uniqueLabels, predictions, encoder, columns) {\r\n        await super.visualize(x_test, y_test, uniqueLabels, predictions, encoder)\r\n        this.chartController.PFIBoxplot(this.id, this.importances, columns);\r\n        this.chartController.plotPDP(this.id, this.pdp_averages, this.pdp_grid, uniqueLabels, columns[0]);\r\n    }\r\n}","\r\nimport { KNeighborsClassifier } from 'scikitjs'\r\nimport { ClassificationModel } from '../model';\r\nimport { evaluate_classification } from '@/helpers/utils';\r\nimport { LabelEncoder } from 'danfojs/dist/danfojs-base';\r\n\r\nexport default class KNNModel extends ClassificationModel {\r\n    constructor(options) {\r\n        super();\r\n        this.options = options\r\n        this.model = null;\r\n\r\n    }\r\n    async fit(x_train, y_train, metric, k = 3) {\r\n        this.model = new KNeighborsClassifier({ nNeighbors: k, metric: metric })\r\n        await this.model.fit(x_train, y_train);\r\n    }\r\n    predict(x_test) {\r\n        if (this.model === null || this.model === undefined) {\r\n            throw \"model not found.\"\r\n        }\r\n        var predictions = window.tf.tidy(() => {\r\n            let results = this.model.predict(x_test);\r\n            return Array.from(results.dataSync())\r\n        })\r\n        return predictions\r\n    }\r\n    async train(x_train, y_train, x_test, y_test) {\r\n        this.results = []\r\n        let encoder = new LabelEncoder()\r\n        encoder.fit(y_train)\r\n        let encoded_y_train = encoder.transform(y_train)\r\n        let encoded_y_test = encoder.transform(y_test)\r\n        let metrics = ['manhattan', 'euclidean']\r\n        for (let i = 0; i < metrics.length; i++) {\r\n            const metric = metrics[i];\r\n            for (let k = this.options.min.value; k <= this.options.max.value; k++) {\r\n                await this.fit(x_train, encoded_y_train, metric, k)\r\n                let predictions_test = this.predict(x_test)\r\n                let predictions_train = this.predict(x_train)\r\n                let pobas = this.predict_probas(x_test)\r\n                let evaluation_test = evaluate_classification(predictions_test, encoded_y_test, encoder)\r\n                let evaluation_train = evaluate_classification(predictions_train, encoded_y_train, encoder)\r\n                this.results.push({ k: k, predictions: predictions_test, evaluation: evaluation_test, evaluation_train: evaluation_train, probas: pobas, metric: metric })\r\n            }\r\n        }\r\n\r\n        this.optimalTestSpec = this.results[0];\r\n        this.optimalTrainSpec = this.results[0];\r\n\r\n        this.results.forEach(element => {\r\n            if (element.evaluation.accuracy > this.optimalTestSpec.evaluation.accuracy) {\r\n                this.optimalTestSpec = element\r\n            }\r\n            if (element.evaluation_train.accuracy > this.optimalTrainSpec.evaluation_train.accuracy) {\r\n                this.optimalTrainSpec = element\r\n            }\r\n        });\r\n\r\n        return this.optimalTestSpec.predictions\r\n    }\r\n    predict_probas(x_test) {\r\n        if (this.model === null || this.model === undefined) {\r\n            throw \"model not found.\"\r\n        }\r\n        var predictions = window.tf.tidy(() => {\r\n            let results = this.model.predictProba(x_test);\r\n            return Array.from(results.arraySync())\r\n        })\r\n        return predictions\r\n    }\r\n    async visualize(x_test, y_test, uniqueLabels, predictions, encoder) {\r\n        await super.visualize(x_test, y_test, uniqueLabels, predictions, encoder)\r\n        this.chartController.KNNPerformancePlot(this.results, this.optimalTrainSpec, this.optimalTestSpec, this.id);\r\n        this.plots.push('knn_table_' + this.id);\r\n\r\n    }\r\n\r\n}","\r\nimport { KNeighborsRegressor } from 'scikitjs'\r\nimport { RegressionModel } from '../regression_model'\r\nimport { calculateMSE } from '../utils';\r\n\r\nexport default class KNNRegressor extends RegressionModel {\r\n    constructor(options) {\r\n        super();\r\n        this.options = options\r\n        this.model = null\r\n\r\n    }\r\n    async fit(x_train, y_train, metric, k = 3) {\r\n        this.model = new KNeighborsRegressor({ nNeighbors: k, metric: metric })\r\n        await this.model.fit(x_train, y_train);\r\n    }\r\n    async train(x_train, y_train, x_test, y_test) {\r\n        this.results = []\r\n\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                setTimeout(async () => {\r\n                    try {\r\n                        let metrics = ['manhattan', 'euclidean']\r\n                        for (let i = 0; i < metrics.length; i++) {\r\n                            const metric = metrics[i];\r\n                            for (let k = this.options.min.value; k <= this.options.max.value; k++) {\r\n                                await this.fit(x_train, y_train, metric, k)\r\n                                let predictions_test = this.predict(x_test)\r\n                                let predictions_train = this.predict(x_train)\r\n                                let evaluation_test = calculateMSE(predictions_test, y_test)\r\n                                let evaluation_train = calculateMSE(predictions_train, y_train)\r\n                                this.results.push({ k: k, predictions: predictions_test, evaluation: evaluation_test, evaluation_train: evaluation_train, metric: metric })\r\n                            }\r\n                        }\r\n                        this.optimalTestSpec = this.results[0];\r\n                        this.optimalTrainSpec = this.results[0];\r\n                        this.results.forEach(element => {\r\n                            if (element.evaluation > this.optimalTestSpec.evaluation) {\r\n                                this.optimalTestSpec = element\r\n                            }\r\n                            if (element.evaluation_train > this.optimalTrainSpec.evaluation_train) {\r\n                                this.optimalTrainSpec = element\r\n                            }\r\n                        });\r\n                        resolve(this.optimalTestSpec.predictions)\r\n                    } catch (error) {\r\n                        console.log(this.options);\r\n                        reject(error)\r\n                    }\r\n\r\n                }, 500)\r\n            } catch (error) {\r\n                reject(error)\r\n            }\r\n        })\r\n    }\r\n    async visualize(x_test, y_test, _, predictions) {\r\n        await super.visualize(x_test, y_test, _, predictions)\r\n        this.chartController.KNNPerformancePlotRegression(this.results, this.optimalTrainSpec, this.optimalTestSpec, this.id)\r\n    }\r\n    predict(x_test) {\r\n\r\n        if (this.model === null || this.model === undefined) {\r\n            throw \"model not found.\"\r\n        }\r\n        var ans = window.tf.tidy(() => {\r\n            let results = this.model.predict(x_test);\r\n            return Array.from(results.dataSync())\r\n        })\r\n        return ans\r\n    }\r\n}","import { asyncRun } from \"@/helpers/py-worker\";\r\nimport { ClassificationModel } from \"../model\";\r\n\r\n\r\nexport default class RandomForest extends ClassificationModel {\r\n    constructor(options, chartController) {\r\n        super(chartController)\r\n        this.options = options;\r\n        this.model = null;\r\n        this.predictions = []\r\n    }\r\n    async train(x_train, y_train, x_test, y_test) {\r\n        this.context = {\r\n            X_train: x_train,\r\n            y_train: y_train,\r\n            X_test: x_test,\r\n            y_test: y_test,\r\n\r\n            rf_type: this.options.criteria.value,\r\n            max_features: this.options.features.value,\r\n            num_estimators: this.options.estimators.value <= 0 || !this.options.estimators.value ? 100 : +this.options.estimators.value,\r\n            max_depth: this.options.depth.value <= 0 ? 5 : +this.options.depth.value\r\n        };\r\n        const script = `\r\n            from sklearn.model_selection import train_test_split\r\n            from sklearn.ensemble import RandomForestClassifier\r\n            from sklearn.metrics import accuracy_score\r\n            from sklearn.inspection import partial_dependence\r\n            from sklearn.inspection import permutation_importance\r\n            from js import X_train,y_train,X_test,y_test,rf_type,max_features,num_estimators,max_depth\r\n\r\n            classifier = RandomForestClassifier(criterion=rf_type,max_features = max_features,n_estimators=num_estimators,max_depth = max_depth, random_state=42)\r\n            classifier.fit(X_train, y_train)\r\n            y_pred = classifier.predict(X_test)\r\n\r\n            pdp_results = partial_dependence(classifier, X_train, [0])\r\n            fi = permutation_importance(classifier,X_test,y_test)\r\n            \r\n            y_pred,pdp_results[\"average\"],list(pdp_results[\"grid_values\"][0]), list(fi.importances)\r\n        `;\r\n        try {\r\n            const { results, error } = await asyncRun(script, this.context);\r\n            if (results) {\r\n                this.predictions = Array.from(results[0]);\r\n                this.pdp_averages = Array.from(results[1]);\r\n                this.pdp_grid = Array.from(results[2]);\r\n                this.importances = Array.from(results[3]);\r\n\r\n            } else if (error) {\r\n                console.log(\"pyodideWorker error: \", error);\r\n            }\r\n        } catch (e) {\r\n            console.log(\r\n                `Error in pyodideWorker at ${e.filename}, Line: ${e.lineno}, ${e.message}`,\r\n            );\r\n        }\r\n        return this.predictions\r\n    }\r\n    async visualize(x_test, y_test, uniqueLabels, predictions, encoder, columns) {\r\n        await super.visualize(x_test, y_test, uniqueLabels, predictions, encoder)\r\n        this.chartController.PFIBoxplot(this.id, this.importances, columns);\r\n        this.chartController.plotPDP(this.id, this.pdp_averages, this.pdp_grid, uniqueLabels, columns[0]);\r\n    }\r\n    predict() {\r\n        return this.predictions;\r\n    }\r\n}","\r\n/* eslint-disable no-undef */\r\n/* eslint-disable no-unused-vars */\r\n\r\nimport { asyncRun } from \"@/helpers/py-worker\";\r\nimport { RegressionModel } from \"../regression_model\";\r\n\r\n\r\nexport default class RandomForestRegressor extends RegressionModel {\r\n    constructor(options) {\r\n        super();\r\n        this.options = options;\r\n        this.model = null;\r\n\r\n    }\r\n    async train(x_train, y_train, x_test, y_test) {\r\n        this.context = {\r\n            X_train: x_train,\r\n            y_train: y_train,\r\n            X_test: x_test,\r\n            y_test: y_test,\r\n            rf_type: this.options.criteria.value,\r\n            max_features: this.options.features.value,\r\n            num_estimators: this.options.estimators.value <= 0 || !this.options.estimators.value ? 100 : +this.options.estimators.value,\r\n            max_depth: this.options.depth.value <= 0 ? 5 : +this.options.depth.value\r\n        };\r\n        const script = `\r\n            from sklearn.model_selection import train_test_split\r\n            from sklearn.ensemble import RandomForestRegressor\r\n            from sklearn.metrics import accuracy_score\r\n            from js import X_train,y_train,X_test,y_test,rf_type,max_features,num_estimators,max_depth\r\n            from sklearn.inspection import partial_dependence\r\n            from sklearn.inspection import permutation_importance\r\n\r\n            model = RandomForestRegressor(criterion=rf_type,max_features = max_features,n_estimators=num_estimators,max_depth = max_depth, random_state=42)\r\n            model.fit(X_train, y_train)\r\n            y_pred = model.predict(X_test)\r\n\r\n            pdp_results = partial_dependence(model, X_train, [0])\r\n            fi = permutation_importance(model,X_test,y_test)\r\n            \r\n            y_pred,pdp_results[\"average\"],list(pdp_results[\"grid_values\"][0]), list(fi.importances)\r\n            \r\n        `;\r\n        try {\r\n            const { results, error } = await asyncRun(script, this.context);\r\n            if (results) {\r\n                this.predictions = Array.from(results[0]);\r\n                this.pdp_averages = Array.from(results[1]);\r\n                this.pdp_grid = Array.from(results[2]);\r\n                this.importances = Array.from(results[3]);\r\n                return Array.from(results[0]);\r\n            } else if (error) {\r\n                console.log(\"pyodideWorker error: \", error);\r\n            }\r\n        } catch (e) {\r\n            console.log(\r\n                `Error in pyodideWorker at ${e.filename}, Line: ${e.lineno}, ${e.message}`,\r\n            );\r\n        }\r\n\r\n    }\r\n\r\n    predict(x_test) {\r\n        const result = this.model.predict(x_test);\r\n        return result\r\n    }\r\n    async visualize(x_test, y_test, uniqueLabels, predictions, encoder, columns) {\r\n        await super.visualize(x_test, y_test, uniqueLabels, predictions, encoder)\r\n        this.chartController.PFIBoxplot(this.id, this.importances, columns);\r\n        this.chartController.plotPDP(this.id, this.pdp_averages, this.pdp_grid, uniqueLabels, columns[0]);\r\n    }\r\n}","import { asyncRun } from \"@/helpers/py-worker\";\r\nimport { ClassificationModel } from '../model';\r\n\r\nexport default class NaiveBayes extends ClassificationModel {\r\n    constructor(options) {\r\n        super();\r\n        this.options = options\r\n        this.model = null\r\n    }\r\n    async train(x_train, y_train, x_test, y_test) {\r\n        // const priors = this.options.priors.value ? this.options.priors?.value.split(',').map((m) => parseFloat(m)) : undefined\r\n        this.context = {\r\n            nb_type: this.options.type.value === \"Multinomial\" ? 0 : this.options.type.value === \"Gaussian\" ? 1 : 2,\r\n            priors: this.options.priors.value,\r\n            smoothing: +this.options.laplace.value,\r\n            num_classes: [...new Set(y_train)].length,\r\n            X_train: x_train,\r\n            y_train: y_train,\r\n            y_test: y_test,\r\n            X_test: x_test,\r\n        };\r\n        const script = `\r\n            from sklearn.naive_bayes import BernoulliNB\r\n            from sklearn.naive_bayes import MultinomialNB\r\n            from js import X_train,y_train,X_test,nb_type,priors,smoothing,y_test,num_classes\r\n            from sklearn.naive_bayes import GaussianNB\r\n            from sklearn.inspection import partial_dependence\r\n            from sklearn.inspection import permutation_importance\r\n            from sklearn.metrics import roc_auc_score\r\n            from sklearn.metrics import roc_curve\r\n            from sklearn.preprocessing import LabelBinarizer\r\n            if priors is not None and priors.strip():\r\n                priors = [float(x) for x in priors.split(',')]\r\n            else:\r\n                priors = None\r\n            print(\"priors\",priors)\r\n            if nb_type == 0:\r\n                model = MultinomialNB(class_prior=priors , alpha = smoothing)\r\n            if nb_type == 1:\r\n                model = GaussianNB(priors=priors)\r\n            else:\r\n                model = BernoulliNB(class_prior=priors , alpha = smoothing)\r\n            model.fit(X_train, y_train)\r\n            y_pred = model.predict(X_test)\r\n            probas = model.predict_proba(X_test)\r\n            pdp_results = partial_dependence(model, X_train, [0])\r\n            fi = permutation_importance(model,X_test,y_test)\r\n            tprs=[]\r\n            fprs=[]\r\n\r\n            label_binrize = LabelBinarizer().fit(y_train)\r\n            y_test_one_hot = label_binrize.transform(y_test)\r\n            \r\n            try:\r\n                curve = roc_curve(y_test,probas)\r\n            except:\r\n                for i in range(num_classes):\r\n                    fpr,tpr,_ = roc_curve(y_test_one_hot[:,i],probas[:,i])\r\n                    fprs.append(fpr)\r\n                    tprs.append(tpr)\r\n            y_pred,pdp_results[\"average\"],list(pdp_results[\"grid_values\"][0]), list(fi.importances),fprs,tprs\r\n        `;\r\n        try {\r\n            const { results, error } = await asyncRun(script, this.context);\r\n            if (results) {\r\n                console.log(\"pyodideWorker return results: \", results);\r\n                this.predictions = Array.from(results[0]);\r\n                this.pdp_averages = Array.from(results[1]);\r\n                this.pdp_grid = Array.from(results[2]);\r\n                this.importances = Array.from(results[3]);\r\n                this.fpr = Array.from(results[4]);\r\n                this.tpr = Array.from(results[5]);\r\n\r\n            } else if (error) {\r\n                console.log(\"pyodideWorker error: \", error);\r\n            }\r\n        } catch (e) {\r\n            console.log(\r\n                `Error in pyodideWorker at ${e.filename}, Line: ${e.lineno}, ${e.message}`,\r\n            );\r\n        }\r\n        return this.predictions;\r\n    }\r\n    async visualize(x_test, y_test, uniqueLabels, predictions, encoder, columns) {\r\n        await super.visualize(x_test, y_test, uniqueLabels, predictions, encoder)\r\n        this.chartController.PFIBoxplot(this.id, this.importances, columns);\r\n        this.chartController.plotPDP(this.id, this.pdp_averages, this.pdp_grid, uniqueLabels, columns[0]);\r\n        this.chartController.plotROC(this.id, this.fpr, this.tpr, uniqueLabels);\r\n\r\n    }\r\n}","import { asyncRun } from \"@/helpers/py-worker\";\r\nimport { ClassificationModel } from \"../model\";\r\nexport default class DiscriminantAnalysis extends ClassificationModel {\r\n    constructor(options) {\r\n        super();\r\n        this.options = options\r\n        this.context = {\r\n            X_train: [0.8, 0.4, 1.2, 3.7, 2.6, 5.8],\r\n            y_train: [0.8, 0.4, 1.2, 3.7, 2.6, 5.8],\r\n            X_test: [0.8, 0.4, 1.2, 3.7, 2.6, 5.8],\r\n        };\r\n    }\r\n    async train(x, y, x_test, y_test) {\r\n        this.context = {\r\n            lda_type: this.options.type.value,\r\n            priors: this.options.priors.value,\r\n            X_train: x,\r\n            y_train: y,\r\n            X_test: x_test,\r\n            y_test: y_test,\r\n\r\n        };\r\n        const script = `\r\n        from sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis\r\n        from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\r\n        from js import X_train,y_train,X_test,lda_type,priors,y_test\r\n        from sklearn.inspection import partial_dependence\r\n        from sklearn.inspection import permutation_importance\r\n\r\n\r\n        if priors is not None and priors.strip():\r\n            priors = [float(x) for x in priors.split(',')]\r\n        else:\r\n            priors = None\r\n        print(\"priors\",priors)\r\n        if lda_type == 0:\r\n            model = LinearDiscriminantAnalysis(priors=priors)\r\n        else:\r\n            model = QuadraticDiscriminantAnalysis(priors=priors)\r\n        model.fit(X_train, y_train)\r\n        y_pred = model.predict(X_test)\r\n        pdp_results = partial_dependence(model, X_train, [0])\r\n        fi = permutation_importance(model,X_test,y_test)\r\n        y_pred,pdp_results[\"average\"],list(pdp_results[\"grid_values\"][0]), list(fi.importances)\r\n    `;\r\n        try {\r\n            const { results, error } = await asyncRun(script, this.context);\r\n            if (results) {\r\n                this.predictions = Array.from(results[0]);\r\n                this.pdp_averages = Array.from(results[1]);\r\n                this.pdp_grid = Array.from(results[2]);\r\n                this.importances = Array.from(results[3]);\r\n                return Array.from(results[0]);\r\n            } else if (error) {\r\n                console.log(\"pyodideWorker error: \", error);\r\n            }\r\n        } catch (e) {\r\n            console.log(\r\n                `Error in pyodideWorker at ${e.filename}, Line: ${e.lineno}, ${e.message}`,\r\n            );\r\n        }\r\n    }\r\n    async visualize(x_test, y_test, uniqueLabels, predictions, encoder, columns) {\r\n        await super.visualize(x_test, y_test, uniqueLabels, predictions, encoder)\r\n        this.chartController.PFIBoxplot(this.id, this.importances, columns);\r\n        this.chartController.plotPDP(this.id, this.pdp_averages, this.pdp_grid, uniqueLabels, columns[0]);\r\n    }\r\n\r\n}\r\n","\r\n/* eslint-disable no-undef */\r\n/* eslint-disable no-unused-vars */\r\n\r\n\r\nimport Plotly from 'danfojs/node_modules/plotly.js-dist-min';\r\nimport { RegressionModel } from '../regression_model';\r\n\r\nexport default class PolynomialRegression extends RegressionModel {\r\n    constructor(options) {\r\n        super();\r\n        this.options = options;\r\n        this.model = null;\r\n        this.summary = null;\r\n        this.model_stats_matrix = null;\r\n\r\n    }\r\n\r\n    async train(x_train, y_train, x_test, y_test, labels, categorical_columns) {\r\n\r\n        let regularization_type = this.options?.regularization?.value === \"Lasso\" ? 1 : 0;\r\n        let degree = +this.options?.degree?.value;\r\n\r\n        const webR = window.webr;\r\n        await webR.init();\r\n        await webR.installPackages(['jsonlite', 'ggplot2', 'plotly', 'tidyr', 'dplyr', 'ggrepel', 'glmnet', 'modelsummary'], { quiet: true });\r\n        await webR.objs.globalEnv.bind('xx', x_train);\r\n        await webR.objs.globalEnv.bind('x_test', x_test);\r\n\r\n        await webR.objs.globalEnv.bind('y', y_train);\r\n        await webR.objs.globalEnv.bind('degree', degree);\r\n        await webR.objs.globalEnv.bind('names', labels);\r\n        await webR.objs.globalEnv.bind('categorical_columns', categorical_columns?.length === 0 ? ['empty'] : categorical_columns);\r\n\r\n        await webR.objs.globalEnv.bind('is_lasso', regularization_type);\r\n\r\n\r\n        const plotlyData = await webR.evalR(`\r\n                    library(plotly)\r\n                    library(ggplot2)\r\n                    library(tidyr)\r\n                    library(dplyr)\r\n                    library(ggrepel)\r\n                    library(modelsummary)\r\n                    library(glmnet)\r\n\r\n                    # Select all columns except the first as predictors. \r\n                    add_powers <- function(df, degree,columns) {\r\n                            new_df <- df  # Copy the original data frame\r\n                            for (col in columns) {\r\n                                new_col_name <- paste0(col, \"_\", degree)\r\n                                new_df[[new_col_name]] <- df[[col]]^degree\r\n                            }\r\n                            return(new_df)\r\n                            }\r\n                        \r\n                    x <- as.matrix(xx)  \r\n                    colnames(x) <- names\r\n                    cols_numerical <- setdiff(names, categorical_columns)\r\n                    df_main <- add_powers(as.data.frame(x), degree,cols_numerical)\r\n                    scale_df <- add_powers(as.data.frame(x), degree,cols_numerical)\r\n                    all_column_names <- colnames(scale_df)\r\n                    cols_to_scale <- setdiff(all_column_names, categorical_columns)\r\n                    scale_df[cols_to_scale] <- scale(scale_df[cols_to_scale])\r\n                    \r\n                    x <- as.matrix(x_test)  \r\n                    colnames(x) <- names\r\n                    df_test <- add_powers(as.data.frame(x), degree,cols_numerical)\r\n                    base_model = cv.glmnet(as.matrix(scale_df), y)\r\n                    weights <- 1 / abs(coef(base_model)[-1])\r\n                    x <- as.matrix(df_main)\r\n                    if(is_lasso){\r\n                        cvfit = cv.glmnet(as.matrix(scale_df), y, alpha = 1)\r\n                    }else{\r\n                       cvfit = cv.glmnet(as.matrix(scale_df), y, alpha = 0)\r\n                    }\r\n                    betas = as.matrix(cvfit$glmnet.fit$beta)\r\n                    lambdas = cvfit$lambda\r\n                    names(lambdas) = colnames(betas)\r\n                    \r\n                    \r\n                    p <- as.data.frame(betas) %>% \r\n                      tibble::rownames_to_column(\"variable\") %>% \r\n                      pivot_longer(-variable) %>% \r\n                      mutate(lambda=lambdas[name]) %>% \r\n                    ggplot(aes(x=lambda,y=value,col=variable)) + \r\n                      geom_line() + \r\n                      geom_label_repel(data=~subset(.x,lambda==min(lambda)),\r\n                                       aes(label=variable),nudge_x=-0.5) +\r\n                      geom_vline(xintercept=c(cvfit$lambda.1se,cvfit$lambda.min),\r\n                                linetype=\"dashed\")+\r\n                      scale_x_log10() +\r\n                      labs(y = \"Coefficient\") +\r\n                    theme_bw()\r\n                    \r\n                    df = with(cvfit,\r\n                            data.frame(lambda = lambdas,MSE = cvm,MSEhi=cvup,MSElow=cvlo))\r\n\r\n                    p2<-ggplot(df,aes(x=lambda,y=MSE)) + \r\n                    geom_point(col=\"#f05454\") + \r\n                    scale_x_log10(\"lambda\") + \r\n                    geom_errorbar(aes(ymin = MSElow,ymax=MSEhi),col=\"#30475e\") + \r\n                    geom_vline(xintercept=c(cvfit$lambda.1se,cvfit$lambda.min),\r\n                                linetype=\"dashed\")+\r\n                    theme_bw()\r\n\r\n \r\n                    model <- lm(y ~ ., data = as.data.frame(x))\r\n                    x <- as.matrix(df_test)  \r\n                    predictions <- predict(model, newdata = as.data.frame(x))\r\n                    # Get coefficients, p-values, and standard errors\r\n                    coefs <- coef(model)\r\n                    pvals <- summary(model)$coefficients[,4]\r\n                    std_error <- summary(model)$coefficients[,2]\r\n                    aic_value <- AIC(model)\r\n                    bic_value <- BIC(model)\r\n                    rsquared <- summary(model)$r.squared\r\n                    residuals_ols <- resid(model)\r\n                    fitted_values_ols <- fitted(model)\r\n\r\n\r\n                    best_lambda <- cvfit$lambda.min\r\n                    x <- as.matrix(df_main) \r\n                    # Get the coefficients for the best lambda\r\n                    best_model <- glmnet(x, y, alpha =is_lasso, lambda = best_lambda)\r\n                    coefficients <- as.matrix(coef(best_model))\r\n                    \r\n                    nonzero_coef <- coefficients[coefficients != 0]\r\n                    \r\n                    nonzero_features <- rownames(coefficients)[coefficients != 0 & rownames(coefficients) != \"(Intercept)\"]\r\n                    X_reduced <- x[, nonzero_features]\r\n                    linear_model_min_features <- nonzero_features\r\n                    # Fit a linear regression model using the non-zero features\r\n                    linear_model_min <- lm(y ~ ., data = as.data.frame(X_reduced))\r\n                    coefs_min <- coef(linear_model_min)\r\n                    pvals_min <- summary(linear_model_min)$coefficients[,4]\r\n                    std_error_min <- summary(linear_model_min)$coefficients[,2]\r\n                    aic_min <- AIC(linear_model_min)\r\n                    rsquared_min <- summary(linear_model_min)$r.squared\r\n                    best_lambda <- cvfit$lambda.1se\r\n                    best_model <- glmnet(x, y, alpha =is_lasso, lambda = best_lambda)\r\n                    coefficients <- as.matrix(coef(best_model))\r\n                    residuals_min <- resid(linear_model_min)\r\n                    fitted_values_min <- fitted(linear_model_min)\r\n                    x <- as.matrix(df_test)  \r\n                    x <- x[, nonzero_features]\r\n                    predictions_min <- predict(linear_model_min, newdata = as.data.frame(x))\r\n                    x <- as.matrix(df_main)  \r\n                    nonzero_coef <- coefficients[coefficients != 0]\r\n                    \r\n                    nonzero_features <- rownames(coefficients)[coefficients != 0 & rownames(coefficients) != \"(Intercept)\"]\r\n                    X_reduced <- x[, nonzero_features]\r\n                    linear_model_1se_features <- nonzero_features\r\n                    linear_model_1se <- lm(y ~ ., data = as.data.frame(X_reduced))\r\n                    coefs_1se <- coef(linear_model_1se)\r\n                    print(coefs_1se)\r\n                    pvals_1se <- summary(linear_model_1se)$coefficients[,4]\r\n                    aic_1se<- AIC(linear_model_1se)\r\n                    rsquared_1se <- summary(linear_model_1se)$r.squared\r\n                    std_error_1se <- summary(linear_model_1se)$coefficients[,2]\r\n                    residuals_1se <- resid(linear_model_1se)\r\n                    fitted_values_1se <- fitted(linear_model_1se)\r\n                    x <- as.matrix(df_test)  \r\n                    x <- x[, nonzero_features]\r\n                    predictions_1se <- predict(linear_model_1se, newdata = as.data.frame(x))\r\n                    models <- list(\r\n                        \"OLS\" = model,\r\n                        \"Min OLS\" = linear_model_min,\r\n                        \"1se OLS\" = linear_model_1se\r\n                        )\r\n                    z <- modelplot(models =models,coef_omit = 'Interc')\r\n                    qqplot_ols <-ggplot(data.frame(residuals = residuals_ols), aes(sample = residuals_ols)) +\r\n                        stat_qq() +\r\n                        stat_qq_line(col = \"red\") +\r\n                        labs(title = \"QQ Plot of Residuals\",\r\n                            x = \"Theoretical Quantiles\",\r\n                            y = \"Sample Quantiles\") +\r\n                        theme_bw()\r\n                    qqplot_1se <-ggplot(data.frame(residuals = residuals_1se), aes(sample = residuals_1se)) +\r\n                        stat_qq() +\r\n                        stat_qq_line(col = \"red\") +\r\n                        labs(title = \"QQ Plot of Residuals\",\r\n                            x = \"Theoretical Quantiles\",\r\n                            y = \"Sample Quantiles\") +\r\n                        theme_bw()\r\n                    qqplot_min <-ggplot(data.frame(residuals = residuals_min), aes(sample = residuals_min)) +\r\n                        stat_qq() +\r\n                        stat_qq_line(col = \"red\") +\r\n                        labs(title = \"QQ Plot of Residuals\",\r\n                            x = \"Theoretical Quantiles\",\r\n                            y = \"Sample Quantiles\") +\r\n                        theme_bw()\r\n                    list(plotly_json(p, pretty = FALSE),plotly_json(p2, pretty = FALSE),coefs,\r\n                    pvals,std_error,predictions,aic_value,bic_value,rsquared\r\n                    ,coefs_min,pvals_min,std_error_min\r\n                    ,coefs_1se,pvals_1se,std_error_1se,plotly_json(z, pretty = FALSE),linear_model_min_features,linear_model_1se_features\r\n                    ,residuals_ols,residuals_1se,residuals_min,predictions_1se,predictions_min,rsquared_1se,aic_1se,rsquared_min,aic_min\r\n                    ,plotly_json(qqplot_ols, pretty = FALSE)\r\n                    ,plotly_json(qqplot_1se, pretty = FALSE)\r\n                    ,plotly_json(qqplot_min, pretty = FALSE)\r\n                    ,all_column_names\r\n                    )\r\n                    `);\r\n        let results = await plotlyData.toArray()\r\n\r\n        this.summary = {\r\n            params: await results[2].toArray(),\r\n            bse: await results[4].toArray(),\r\n            pvalues: await results[3].toArray(),\r\n            predictions: await results[5].toArray(),\r\n            predictions1se: await results[21].toArray(),\r\n            predictionsmin: await results[22].toArray(),\r\n            residuals_ols: await results[18].toArray(),\r\n            residuals_1se: await results[19].toArray(),\r\n            residuals_min: await results[20].toArray(),\r\n            aic: await results[6].toNumber(),\r\n            bic: await results[7].toNumber(),\r\n            r2: await results[8].toNumber(),\r\n            best_fit_min: {\r\n                r2: await results[25].toNumber(),\r\n                aic: await results[26].toNumber(),\r\n                names: await results[16].toArray(),\r\n                coefs: await results[9].toArray(),\r\n                bse: await results[11].toArray(),\r\n                pvalues: await results[10].toArray(),\r\n            },\r\n            best_fit_1se: {\r\n                r2: await results[23].toNumber(),\r\n                aic: await results[24].toNumber(),\r\n                names: await results[17].toArray(),\r\n                coefs: await results[12].toArray(),\r\n                bse: await results[14].toArray(),\r\n                pvalues: await results[13].toArray(),\r\n            },\r\n            columnNames: await results[30].toArray()\r\n        };\r\n        this.model_stats_matrix = [];\r\n        let cols = this.summary.columnNames\r\n        cols.unshift(\"intercept\")\r\n        let min_ols_columns = this.summary['best_fit_min'].names;\r\n\r\n        min_ols_columns.unshift('intercept');\r\n        let se_ols_columns = this.summary['best_fit_1se'].names;\r\n        se_ols_columns.unshift('intercept');\r\n\r\n        for (let i = 0; i < cols.length; i++) {\r\n            let row = [];\r\n            row.push(cols[i])\r\n            row.push(this.summary['params'][i]?.toFixed(2) ?? ' ')\r\n            row.push(this.summary['bse'][i]?.toFixed(2) ?? ' ')\r\n            row.push(this.summary['pvalues'][i]?.toFixed(2) ?? ' ')\r\n            let index = min_ols_columns.findIndex(m => m === cols[i])\r\n            if (index !== -1) {\r\n                row.push(this.summary['best_fit_min']['coefs'][index]?.toFixed(2) ?? ' ')\r\n                row.push(this.summary['best_fit_min']['bse'][index]?.toFixed(2) ?? ' ')\r\n                row.push(this.summary['best_fit_min']['pvalues'][index]?.toFixed(2) ?? ' ')\r\n            } else {\r\n                row.push(' ')\r\n                row.push(' ')\r\n                row.push(' ')\r\n            }\r\n            index = se_ols_columns.findIndex(m => m === cols[i])\r\n            if (index !== -1) {\r\n                row.push(this.summary['best_fit_1se']['coefs'][index]?.toFixed(2) ?? ' ')\r\n                row.push(this.summary['best_fit_1se']['bse'][index]?.toFixed(2) ?? ' ')\r\n                row.push(this.summary['best_fit_1se']['pvalues'][index]?.toFixed(2) ?? ' ')\r\n            } else {\r\n                row.push(' ')\r\n                row.push(' ')\r\n                row.push(' ')\r\n            }\r\n            this.model_stats_matrix.push(row)\r\n        }\r\n        this.model_stats_matrix.reverse()\r\n        let reg_plot = JSON.parse(await results[0].toString())\r\n        reg_plot.layout['showlegend'] = true;\r\n        reg_plot.layout['autosize'] = true;\r\n        reg_plot.layout['responsive'] = true;\r\n\r\n        reg_plot.layout.legend = {\r\n            font: {\r\n                family: 'sans-serif',\r\n                size: 8,\r\n                color: '#000'\r\n            },\r\n        };\r\n        let coefs_plot = JSON.parse(await results[15].toString())\r\n        coefs_plot.layout.legend = {\r\n            x: 0,\r\n            y: 1,\r\n            traceorder: 'normal',\r\n            font: {\r\n                family: 'sans-serif',\r\n                color: '#000'\r\n            },\r\n        };\r\n        this.summary.coefs_plot = coefs_plot;\r\n        this.summary.coefs_plot.layout['autosize'] = true;\r\n        this.summary.coefs_plot.layout['responsive'] = true;\r\n        this.summary.coefs_plot.layout.xaxis.title.font = {\r\n            size: 10\r\n        };\r\n        this.summary.regularization_plot = reg_plot;\r\n        this.summary.errors_plot = JSON.parse(await results[1].toString());\r\n        this.summary.qqplot_ols_plot = JSON.parse(await results[27].toString());\r\n        this.summary.qqplot_1se_plot = JSON.parse(await results[28].toString());\r\n        this.summary.qqplot_min_plot = JSON.parse(await results[29].toString());\r\n\r\n        this.summary.qqplot_ols_plot.layout.title.font = {\r\n            family: 'sans-serif',\r\n            size: 10\r\n        };\r\n        this.summary.qqplot_ols_plot.data[0].marker.size = 2;\r\n        this.summary.qqplot_ols_plot.layout.xaxis.title.font = {\r\n            family: 'sans-serif',\r\n            size: 10\r\n        };\r\n        this.summary.qqplot_ols_plot.layout.yaxis.title.font = {\r\n            family: 'sans-serif',\r\n            size: 10\r\n        };\r\n        this.summary.qqplot_1se_plot.layout.title.font = {\r\n            family: 'sans-serif',\r\n            size: 10\r\n        };\r\n        this.summary.qqplot_1se_plot.data[0].marker.size = 2;\r\n\r\n        this.summary.qqplot_1se_plot.layout.xaxis.title.font = {\r\n            family: 'sans-serif',\r\n            size: 10\r\n        };\r\n        this.summary.qqplot_1se_plot.layout.yaxis.title.font = {\r\n            family: 'sans-serif',\r\n            size: 10\r\n        };\r\n        this.summary.qqplot_min_plot.layout.title.font = {\r\n            family: 'sans-serif',\r\n            size: 10\r\n        };\r\n        this.summary.qqplot_min_plot.layout.xaxis.title.font = {\r\n            family: 'sans-serif',\r\n            size: 10\r\n        };\r\n        this.summary.qqplot_min_plot.layout.yaxis.title.font = {\r\n            family: 'sans-serif',\r\n            size: 10\r\n        };\r\n        this.summary.qqplot_min_plot.data[0].marker.size = 2;\r\n        return this.summary['predictions'];\r\n    }\r\n    async visualize(x_test, y_test, uniqueLabels, predictions, encoder) {\r\n        await super.visualize(x_test, y_test, uniqueLabels, predictions)\r\n        let current = this;\r\n\r\n        new DataTable('#metrics_table_' + current.id, {\r\n            responsive: false,\r\n            \"footerCallback\": function (row, data, start, end, display) {\r\n                var api = this.api();\r\n                $(api.column(2).footer()).html(\r\n                    'R2 : ' + current.summary.r2.toFixed(2) + ' AIC: ' + current.summary.aic.toFixed(2)\r\n                );\r\n                $(api.column(5).footer()).html(\r\n                    'R2 : ' + current.summary['best_fit_min'].r2.toFixed(2) + ' AIC: ' + current.summary['best_fit_min'].aic.toFixed(2)\r\n                );\r\n                $(api.column(8).footer()).html(\r\n                    'R2 : ' + current.summary['best_fit_1se'].r2.toFixed(2) + ' AIC: ' + current.summary['best_fit_1se'].aic.toFixed(2)\r\n                );\r\n            },\r\n            data: current.model_stats_matrix,\r\n            info: false,\r\n            search: false,\r\n            ordering: false,\r\n            searching: false,\r\n            paging: false,\r\n            bDestroy: true,\r\n            columnDefs: [\r\n                {\r\n                    \"targets\": 3,\r\n                    \"createdCell\": function (td, cellData, rowData, row, col) {\r\n                        if (rowData[3] <= 0.05) {\r\n                            $(td).css('color', 'red')\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    \"targets\": 6,\r\n                    \"createdCell\": function (td, cellData, rowData, row, col) {\r\n                        if (rowData[6] <= 0.05) {\r\n                            $(td).css('color', 'red')\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    \"targets\": 9,\r\n                    \"createdCell\": function (td, cellData, rowData, row, col) {\r\n                        if (rowData[9] <= 0.05) {\r\n                            $(td).css('color', 'red')\r\n                        }\r\n                    }\r\n                }\r\n            ],\r\n        });\r\n\r\n        Plotly.newPlot('regularization_' + current.id, current.summary.regularization_plot);\r\n        Plotly.newPlot('parameters_plot_' + current.id, current.summary.coefs_plot);\r\n        Plotly.newPlot('errors_' + current.id, current.summary.errors_plot);\r\n        Plotly.newPlot('qqplot_ols_' + current.id, current.summary.qqplot_ols_plot);\r\n        Plotly.newPlot('qqplot_min_' + current.id, current.summary.qqplot_min_plot);\r\n        Plotly.newPlot('qqplot_1se_' + current.id, current.summary.qqplot_1se_plot);\r\n        current.ui.yhat_plot(y_test, this.summary['predictions'], 'regression_y_yhat_' + + current.id, 'OLS predictions')\r\n        current.ui.yhat_plot(y_test, this.summary['predictionsmin'], 'regression_y_yhat_min_' + + current.id, 'OLS min predictions')\r\n        current.ui.yhat_plot(y_test, this.summary['predictions1se'], 'regression_y_yhat_1se_' + + current.id, 'OLS 1se predictions')\r\n        current.ui.residual_plot(y_test, this.summary['residuals_ols'], 'regression_residual_' + + current.id, 'OLS residuals')\r\n        current.ui.residual_plot(y_test, this.summary['residuals_min'], 'regression_residual_min_' + + current.id, 'OLS min residuals')\r\n        current.ui.residual_plot(y_test, this.summary['residuals_1se'], 'regression_residual_1se_' + + current.id, 'OLS 1se residuals')\r\n        this.ui.predictions_table_regression(x_test, y_test, predictions, this.id);\r\n        window.dispatchEvent(new Event('resize'));\r\n    }\r\n\r\n}","import { asyncRun } from \"@/helpers/py-worker\";\r\n\r\n\r\nexport default class KernelRegression {\r\n    constructor(options) {\r\n        this.options = options;\r\n        this.model = null;\r\n\r\n    }\r\n    async train(x_train, y_train, x_test, _, labels) {\r\n        this.context = {\r\n            X_train: x_train,\r\n            y_train: y_train,\r\n            X_test: x_test,\r\n            types: this.options.types,\r\n            labels: labels\r\n        };\r\n        const script = `\r\n        import numpy as np\r\n        import statsmodels.api as sm\r\n        from js import X_train,y_train,X_test,labels,types\r\n        from statsmodels.nonparametric.kernel_regression import KernelReg\r\n        import pandas as pd\r\n\r\n        df_test = pd.DataFrame(X_test,columns=labels)\r\n        x_test = df_test.iloc[:,:]\r\n\r\n        df_train = pd.DataFrame(X_train,columns=labels)\r\n        x_train = df_train.iloc[:,:]\r\n\r\n        model = KernelReg(endog=np.array(y_train), exog=x_train, var_type=types)\r\n        \r\n        preds = model.fit(x_test)\r\n\r\n        \r\n        preds\r\n        `;\r\n        try {\r\n            const { results, error } = await asyncRun(script, this.context);\r\n            if (results) {\r\n                return results;\r\n            } else if (error) {\r\n                console.log(\"pyodideWorker error: \", error);\r\n            }\r\n        } catch (e) {\r\n            console.log(\r\n                `Error in pyodideWorker at ${e.filename}, Line: ${e.lineno}, ${e.message}`,\r\n            );\r\n        }\r\n\r\n    }\r\n    predict(x_test) {\r\n        const result = this.model.predict(x_test);\r\n        return result\r\n    }\r\n}","import { asyncRun } from \"@/helpers/py-worker\";\r\nimport { ClassificationModel } from '../model';\r\nexport default class Boosting extends ClassificationModel {\r\n    constructor(opt, chartControler) {\r\n        super(chartControler);\r\n        let options = {\r\n            booster: opt.booster.value ?? \"gbtree\",\r\n            objective: \"multi:softmax\",\r\n            max_depth: +opt.depth.value,\r\n            eta: +opt.eta.value,\r\n            estimators: opt.estimators.value ?? 200\r\n        }\r\n        this.options = options\r\n    }\r\n    async train(x, y, x_test, y_test) {\r\n        this.context = {\r\n            X_train: x,\r\n            y_train: y,\r\n            X_test: x_test,\r\n            y_test: y_test,\r\n            objective: this.options.objective,\r\n            max_depth: this.options.max_depth,\r\n            eta: this.options.eta,\r\n            estimators: this.options.estimators,\r\n\r\n        };\r\n        const script = `\r\n\r\n        from js import X_train,y_train,X_test,y_test,objective,max_depth,eta,estimators\r\n        from sklearn.inspection import partial_dependence\r\n        from sklearn.inspection import permutation_importance\r\n        from sklearn.ensemble import GradientBoostingClassifier\r\n        import pandas as pd\r\n\r\n        model = GradientBoostingClassifier()\r\n        model.fit(X_train, y_train)\r\n        y_pred = model.predict(X_test)\r\n\r\n        pdp_results = partial_dependence(model, X_train, [0])\r\n        fi = permutation_importance(model,X_test,y_test)\r\n        y_pred,pdp_results[\"average\"],list(pdp_results[\"grid_values\"][0]), list(fi.importances)\r\n\r\n    `;\r\n        try {\r\n            const { results, error } = await asyncRun(script, this.context);\r\n            if (results) {\r\n                this.predictions = Array.from(results[0]);\r\n                this.pdp_averages = Array.from(results[1]);\r\n                this.pdp_grid = Array.from(results[2]);\r\n                this.importances = Array.from(results[3]);\r\n                return Array.from(results[0]);\r\n            } else if (error) {\r\n                console.log(\"pyodideWorker error: \", error);\r\n            }\r\n        } catch (e) {\r\n            console.log(\r\n                `Error in pyodideWorker at ${e.filename}, Line: ${e.lineno}, ${e.message}`,\r\n            );\r\n        }\r\n    }\r\n    async visualize(x_test, y_test, uniqueLabels, predictions, encoder, columns) {\r\n        await super.visualize(x_test, y_test, uniqueLabels, predictions, encoder)\r\n        this.chartController.PFIBoxplot(this.id, this.importances, columns);\r\n        this.chartController.plotPDP(this.id, this.pdp_averages, this.pdp_grid, uniqueLabels, columns[0]);\r\n    }\r\n}\r\n","\r\nimport { RegressionModel } from '../regression_model';\r\nimport { asyncRun } from \"@/helpers/py-worker\";\r\n\r\n\r\nexport default class BoostingRegression extends RegressionModel {\r\n    constructor(opt, chartControler) {\r\n        super(chartControler);\r\n        let options = {\r\n            booster: opt.booster.value ?? \"gbtree\",\r\n            objective: \"multi:softmax\",\r\n            max_depth: +opt.depth.value,\r\n            eta: +opt.eta.value,\r\n            estimators: opt.estimators.value ?? 200\r\n        }\r\n        this.options = options\r\n    }\r\n    async train(x, y, x_test, y_test) {\r\n        this.context = {\r\n            X_train: x,\r\n            y_train: y,\r\n            X_test: x_test,\r\n            y_test: y_test,\r\n            objective: this.options.objective,\r\n            max_depth: this.options.max_depth,\r\n            eta: this.options.eta,\r\n            estimators: this.options.estimators,\r\n\r\n        };\r\n        const script = `\r\n\r\n        from js import X_train,y_train,X_test,y_test,objective,max_depth,eta,estimators\r\n        from sklearn.inspection import partial_dependence\r\n        from sklearn.inspection import permutation_importance\r\n        from sklearn.ensemble import GradientBoostingRegressor\r\n        import pandas as pd\r\n\r\n        model = GradientBoostingRegressor()\r\n        model.fit(X_train, y_train)\r\n        y_pred = model.predict(X_test)\r\n\r\n        pdp_results = partial_dependence(model, X_train, [0])\r\n        fi = permutation_importance(model,X_test,y_test)\r\n        y_pred,pdp_results[\"average\"],list(pdp_results[\"grid_values\"][0]), list(fi.importances)\r\n\r\n    `;\r\n        try {\r\n            const { results, error } = await asyncRun(script, this.context);\r\n            if (results) {\r\n                this.predictions = Array.from(results[0]);\r\n                this.pdp_averages = Array.from(results[1]);\r\n                this.pdp_grid = Array.from(results[2]);\r\n                this.importances = Array.from(results[3]);\r\n                return Array.from(results[0]);\r\n            } else if (error) {\r\n                console.log(\"pyodideWorker error: \", error);\r\n            }\r\n        } catch (e) {\r\n            console.log(\r\n                `Error in pyodideWorker at ${e.filename}, Line: ${e.lineno}, ${e.message}`,\r\n            );\r\n        }\r\n    }\r\n    async visualize(x_test, y_test, uniqueLabels, predictions, encoder, columns) {\r\n        await super.visualize(x_test, y_test, uniqueLabels, predictions, encoder)\r\n        this.chartController.PFIBoxplot(this.id, this.importances, columns);\r\n        this.chartController.plotPDP(this.id, this.pdp_averages, this.pdp_grid, uniqueLabels, columns[0]);\r\n    }\r\n\r\n}","import { Settings } from \"@/helpers/settings\";\r\nimport LogisticRegression from \"./classification/logistic_regression\";\r\nimport LinearRegression from \"./regression/linear_regression\";\r\nimport BSplineRegression from \"./regression/bspline_regression\";\r\nimport SupportVectorMachine from './classification/svm';\r\nimport SupportVectorMachineRegression from './regression/svm';\r\n\r\nimport KNNModel from './classification/knn';\r\nimport KNNRegressor from './regression/knn_regressor';\r\nimport RandomForest from \"./classification/random_forest\";\r\nimport RandomForestRegressor from \"./regression/random_forest\";\r\nimport NaiveBayes from \"./classification/NaiveBayes\";\r\nimport DiscriminantAnalysis from \"./classification/lda\";\r\nimport PolynomialRegression from \"./regression/polynomial_regression\";\r\nimport KernelRegression from \"./regression/kernel_regression\";\r\nimport Boosting from \"./classification/boosting\";\r\nimport BoostingRegression from \"./regression/boosting\";\r\n\r\n\r\n\r\nexport var ModelFactory = function () {\r\n    this.createModel = (modelName, options) => {\r\n        console.log(options);\r\n        switch (modelName) {\r\n            case Settings.classification.logistic_regression.value:\r\n                return new LogisticRegression(options);\r\n            case Settings.classification.k_nearest_neighbour.value:\r\n                return new KNNModel(options);\r\n            case Settings.classification.random_forest.value:\r\n                return new RandomForest(options);\r\n            case Settings.classification.support_vector_machine.value:\r\n                return new SupportVectorMachine(options);\r\n            case Settings.classification.boosting.value:\r\n                return new Boosting(options);\r\n            case Settings.regression.boosting.value:\r\n                return new BoostingRegression(options);\r\n            case Settings.classification.discriminant_analysis.value:\r\n                return new DiscriminantAnalysis(options);\r\n            case Settings.classification.naive_bayes.value:\r\n                return new NaiveBayes(options);\r\n            case Settings.regression.linear_regression.value:\r\n                return new LinearRegression(options);\r\n            case Settings.regression.k_nearest_neighbour.value:\r\n                return new KNNRegressor(options);\r\n            case Settings.regression.support_vector_machine.value:\r\n                return new SupportVectorMachineRegression(options);\r\n            case Settings.regression.random_forest.value:\r\n                return new RandomForestRegressor(options);\r\n            case Settings.regression.polynomial_regression.value:\r\n                return new PolynomialRegression(options);\r\n            case Settings.regression.kernel_regression.value:\r\n                return new KernelRegression(options);\r\n            case Settings.regression.bspline_regression.value:\r\n                return new BSplineRegression(options);\r\n            default:\r\n                throw new Error(\"Model not supported.\");\r\n        }\r\n    }\r\n}","<!-- eslint-disable no-unused-vars -->\r\n<template>\r\n    <div class=\"column is-2\">\r\n        <button @click=\"impute()\">Impute</button>\r\n        <section v-if=\"!configureFeatures\">\r\n            <upload-component @uploaded=\"generateTargetDropdown\"></upload-component>\r\n            <div class=\"column is-12\">\r\n                <b-field>\r\n                    <b-button @click=\"configureFeatures = true\" size=\"is-small\" type=\"is-primary is-light\"\r\n                        icon-pack=\"fas\" icon-left=\"cog\">Select Features {{ featureSettings.filter(feature =>\r\n                            feature.selected).length }}</b-button>\r\n                </b-field>\r\n                <b-field label=\"Seed\" :label-position=\"'on-border'\">\r\n                    <b-input v-model=\"seed\" size=\"is-small\" placeholder=\"Seed\" type=\"number\" min=\"0\">\r\n                    </b-input>\r\n                </b-field>\r\n                <b-field label=\"Target\" :label-position=\"'on-border'\">\r\n                    <b-select :expanded=\"true\" v-model=\"modelTarget\" size=\"is-small\">\r\n                        <option v-for=\"option in columns\" :value=\"option\" :key=\"option\">\r\n                            {{ option }}\r\n                        </option>\r\n                    </b-select>\r\n                </b-field>\r\n                <b-field label=\"Imputation\" :label-position=\"'on-border'\">\r\n                    <b-select :expanded=\"true\" v-model=\"imputationOption\" size=\"is-small\">\r\n                        <option v-for=\"option in imputationOptions\" :value=\"option.id\" :key=\"option.id\">\r\n                            {{ option.label }}\r\n                        </option>\r\n                    </b-select>\r\n                </b-field>\r\n                <b-field label=\"Cross Validation\" :label-position=\"'on-border'\">\r\n                    <b-select :expanded=\"true\" v-model=\"crossValidationOption\" size=\"is-small\">\r\n                        <option v-for=\"option in crossValidationOptions\" :value=\"option.id\" :key=\"option.id\">\r\n                            {{ option.label }}\r\n                        </option>\r\n                    </b-select>\r\n                </b-field>\r\n                <b-field label=\"Model\" :label-position=\"'on-border'\">\r\n                    <b-select :disabled=\"tuneModel\" :expanded=\"true\" v-model=\"modelOption\" size=\"is-small\">\r\n                        <option v-for=\"option in modelOptions\" :value=\"option.id\" :key=\"option.id\">\r\n                            {{ option.label }}\r\n                        </option>\r\n                    </b-select>\r\n                    <b-button @click=\"configureModel\" size=\"is-small\" icon-pack=\"fas\"\r\n                        :icon-left=\"!this.tuneModel ? 'cog' : 'arrow-left'\"></b-button>\r\n                </b-field>\r\n                <section v-if=\"tuneModel\" class=\"mx-1\">\r\n                    <b-field v-for=\"(option, i) in modelConfigurations\" :key=\"i\" :label=\"option.label\"\r\n                        :label-position=\"'on-border'\">\r\n                        <b-select v-model=\"option.value\" :expanded=\"true\" size=\"is-small\"\r\n                            v-if=\"option.type === 'select'\">\r\n                            <option v-for=\"(item, index) in option.values\" :value=\"item.value\" :key=\"index\">\r\n                                {{ item.label }}\r\n                            </option>\r\n                        </b-select>\r\n                        <b-input size=\"is-small\" v-model=\"option.value\" type=\"number\"\r\n                            v-else-if=\"option.type === 'number'\"></b-input>\r\n                        <b-input size=\"is-small\" v-model=\"option.value\" type=\"text\"\r\n                            v-else-if=\"option.type === 'text'\"></b-input>\r\n                    </b-field>\r\n                </section>\r\n                <b-field>\r\n                    <b-button @click=\"train\" size=\"is-small\" icon-pack=\"fas\" icon-left=\"play\" :loading=\"training\"\r\n                        :disabled=\"!dataframe\" type=\" is-light\">\r\n                        train</b-button>\r\n                </b-field>\r\n                <b-loading :is-full-page=\"false\" v-model=\"training\"></b-loading>\r\n\r\n            </div>\r\n        </section>\r\n        <section v-else>\r\n            <b-button @click=\"updateFeatures()\" size=\"is-small\" icon-pack=\"fas\" icon-left=\"arrow-left\"\r\n                type=\"is-primary is-light\">Select Features\r\n            </b-button>\r\n            <section>\r\n                Configure Features :\r\n                <table class=\"table is-narrow is-size-7 is-fullwidth\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>\r\n                                select\r\n                            </th>\r\n                            <th>\r\n                                name\r\n                            </th>\r\n                            <th>\r\n                                scale\r\n                            </th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr v-for=\"(feature, index) in featureSettings\" :key=\"index\">\r\n                            <td> <b-checkbox v-model=\"feature.selected\"></b-checkbox>\r\n                            </td>\r\n                            <td>{{ feature.name }}</td>\r\n                            <td>\r\n                                <b-select :expanded=\"true\" v-model=\"feature.type\" size=\"is-small\"\r\n                                    @input=\"checkmodelTask\">\r\n                                    <option v-for=\"option in featureTypeOptions\" :value=\"option.id\" :key=\"option.id\">\r\n                                        {{ option.name }}\r\n                                    </option>\r\n                                </b-select>\r\n                            </td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </section>\r\n        </section>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n/* eslint-disable no-unused-vars */\r\n\r\nimport UploadComponent from \"./upload-component.vue\";\r\nimport { Settings, FeatureCategories, CV_OPTIONS } from '../helpers/settings'\r\nimport { ModelFactory } from \"@/helpers/model_factory\";\r\nimport { settingStore } from '@/stores/settings'\r\nimport { applyDataTransformation, handle_missing_values, encode_dataset, evaluate_classification } from '@/helpers/utils';\r\nimport { LabelEncoder, tensorflow } from 'danfojs/dist/danfojs-base';\r\nimport { toJSON, DataFrame } from 'danfojs';\r\nimport axios from \"axios\";\r\n\r\nexport default {\r\n    name: 'SidebarComponent',\r\n    setup() {\r\n        const settings = settingStore()\r\n\r\n        return { settings }\r\n    },\r\n    components: {\r\n        UploadComponent\r\n    },\r\n    props: {\r\n        msg: String\r\n    },\r\n\r\n    data() {\r\n        return {\r\n            training: false,\r\n            tuneModel: false,\r\n            seed: 1,\r\n            dataframe: null,\r\n            configureFeatures: false,\r\n            modelOptions: Settings.classification,\r\n            imputationOption: 1,\r\n            modelOption: 1,\r\n            featureTypeOptions: FeatureCategories,\r\n            crossValidationOption: 1,\r\n            columns: [],\r\n            modelTarget: null,\r\n            modelConfigurations: null,\r\n            imputationOptions: [{\r\n                id: 1,\r\n                label: 'Delete rows'\r\n            },\r\n            {\r\n                id: 2,\r\n                label: 'Mean and Mode'\r\n            }, {\r\n                id: 3,\r\n                label: 'Linear regression'\r\n            }, {\r\n                id: 4,\r\n                label: 'random forest'\r\n            }],\r\n            crossValidationOptions: [{\r\n                id: CV_OPTIONS.SPLIT,\r\n                label: '70 % training - 30 % test'\r\n            },\r\n            {\r\n                id: CV_OPTIONS.NO,\r\n                label: 'No'\r\n            }, {\r\n                id: CV_OPTIONS.KFOLD,\r\n                label: 'k-fold'\r\n            }],\r\n            featureSettings: [],\r\n            modelSettings: [],\r\n            modelName: ''\r\n        }\r\n    },\r\n    methods: {\r\n        updateFeatures() {\r\n            this.configureFeatures = false;\r\n            this.$emit('updateFeatures', true)\r\n        },\r\n        toggleTraining() {\r\n            this.training = !this.training;\r\n            this.$buefy.toast.open(\r\n                {\r\n                    duration: 3000,\r\n                    message: this.training ? 'started training ' + this.modelName : 'Successully fited ' + this.modelName,\r\n                    type: this.training ? 'is-info' : 'is-success',\r\n                })\r\n        },\r\n        getDefaultModelConfiguration() {\r\n            for (const key in this.modelOptions) {\r\n                const model = this.modelOptions[key];\r\n                if (model.id === this.modelOption) {\r\n                    for (const key in model.options) {\r\n                        model.options[key].value = model.options[key]?.default;\r\n                    }\r\n                    this.modelConfigurations = model.options;\r\n                    this.modelName = model.label\r\n                }\r\n            }\r\n        },\r\n        configureModel() {\r\n            this.tuneModel = !this.tuneModel;\r\n            this.getDefaultModelConfiguration()\r\n        },\r\n        generateTargetDropdown() {\r\n            this.dataframe = this.settings.getDataset;\r\n            this.columns = this.dataframe.columns;\r\n            this.featureSettings = this.columns.map((column, index) => {\r\n                return {\r\n                    name: column,\r\n                    selected: true,\r\n                    type: this.dataframe.dtypes[index] === 'string' ? FeatureCategories.Nominal.id : FeatureCategories.Numerical.id\r\n                }\r\n            })\r\n            this.modelTarget = this.dataframe.columns[this.dataframe.columns.length - 1];\r\n            let selectedFeatures = this.featureSettings.filter(feature => feature.selected);\r\n            for (let i = 0; i < selectedFeatures.length; i++) {\r\n                this.settings.addFeature(selectedFeatures[i])\r\n            }\r\n            this.$emit('updateFeatures', true)\r\n\r\n        },\r\n        checkmodelTask() {\r\n            let targetFeature = this.featureSettings.find(feature => feature.name == this.modelTarget);\r\n            this.settings.setmodelTask(targetFeature.type === FeatureCategories.Numerical.id ? false : true);\r\n            this.modelOptions = targetFeature.type === FeatureCategories.Numerical.id ? Settings.regression : Settings.classification;\r\n            let selectedFeatures = this.featureSettings.filter(feature => feature.selected);\r\n            for (let i = 0; i < selectedFeatures.length; i++) {\r\n                this.settings.addFeature(selectedFeatures[i])\r\n            }\r\n        },\r\n        async train() {\r\n            try {\r\n                if (!this.modelConfigurations) {\r\n                    this.getDefaultModelConfiguration()\r\n                }\r\n                let len = this.dataframe.$data.length;\r\n                let seed = this.seed;\r\n                let categoricalFeatures = []\r\n                let dataset = await this.dataframe.sample(this.dataframe.$data.length, { seed: seed });\r\n                let numericColumns = this.settings.items.filter(m => m.selected && m.type === FeatureCategories.Numerical.id).map(m => m.name);\r\n                const target = this.settings.modelTarget;\r\n                dataset = handle_missing_values(dataset)\r\n                dataset = applyDataTransformation(dataset, numericColumns, this.settings.transformationsList);\r\n                let selected_columns = this.settings.items.filter(m => m.selected).map(m => m.name)\r\n                const index = selected_columns.findIndex(m => m === target)\r\n                if (index === -1) {\r\n                    selected_columns.push(target)\r\n                }\r\n                let filterd_dataset = dataset.loc({ columns: selected_columns })\r\n                const targets = filterd_dataset.column(target)\r\n                filterd_dataset.drop({ columns: target, inplace: true })\r\n                const cross_validation_setting = this.crossValidationOption;\r\n                [filterd_dataset, categoricalFeatures] = encode_dataset(filterd_dataset, this.settings.items.filter(m => m.selected).filter(m => m.name !== this.settings.modelTarget).map(m => {\r\n                    return {\r\n                        name: m.name,\r\n                        type: m.type\r\n                    }\r\n                }), this.modelName)\r\n\r\n                let [x_train, y_train, x_test, y_test] = this.splitData(cross_validation_setting, filterd_dataset, targets, len);\r\n                let uniqueLabels = [...new Set(y_train.values)];\r\n                let labelEncoder, encoded_y, encoded_y_test;\r\n                if (this.settings.classificationTask) {\r\n                    [labelEncoder, encoded_y, encoded_y_test] = this.encodeTarget(y_train.values, y_test.values)\r\n                } else {\r\n                    encoded_y = y_train.values;\r\n                    encoded_y_test = y_test.values;\r\n                }\r\n                let model_factory = new ModelFactory();\r\n                let model = model_factory.createModel(this.modelOption, this.modelConfigurations)\r\n                model.id = this.settings.getCounter\r\n                this.toggleTraining()\r\n                let predictions = await model.train(x_train.values, encoded_y, x_test.values, encoded_y_test, x_train.columns, categoricalFeatures);\r\n                let metrics = await model.evaluateModel(encoded_y_test, predictions, uniqueLabels)\r\n                console.log(this.modelConfigurations);\r\n\r\n                this.settings.addResult({\r\n                    id: model.id,\r\n                    name: this.modelName,\r\n                    datasetName: this.settings.getDatasetName,\r\n                    modelTask: this.settings.classificationTask,\r\n                    metrics: metrics,\r\n                    options: this.modelConfigurations,\r\n                    target: target,\r\n                    categoricalFeatures: this.settings.items.filter(m => m.selected && m.type !== FeatureCategories.Numerical.id).map(m => m.name),\r\n                    numericColumns: numericColumns,\r\n                    transformations: [...this.settings.transformationsList],\r\n                    tables: model.tables,\r\n                    plots: model.plots,\r\n\r\n                });\r\n                this.settings.setActiveTab(2);\r\n                setTimeout(async () => {\r\n                    this.settings.setResultActiveTab(model.id);\r\n                    window.dispatchEvent(new Event('resize'));\r\n                }, 500);\r\n                await model.visualize(x_test, encoded_y_test, uniqueLabels, predictions, labelEncoder, selected_columns)\r\n                this.settings.increaseCounter();\r\n                this.toggleTraining();\r\n            } catch (error) {\r\n                this.training = false;\r\n                this.$buefy.toast.open(\r\n                    {\r\n                        duration: 3000,\r\n                        message: 'Failed to fit the model',\r\n                        type: 'is-warning',\r\n                    })\r\n                throw error;\r\n            }\r\n        },\r\n        impute() {\r\n            this.training = true;\r\n            axios.post('http://127.0.0.1:5000/missforest', {\r\n                data: toJSON(this.dataframe),\r\n                categoricalFeatures: this.settings.items.filter(m => m.selected && m.type !== FeatureCategories.Numerical.id).map(m => m.name)\r\n            }).then(res => {\r\n                let df = new DataFrame(res.data);\r\n                this.dataframe = df\r\n                this.settings.setDataframe(df);\r\n                this.training = false;\r\n            })\r\n        }\r\n    },\r\n    created: function () {\r\n        let x_train, y_train, x_test, y_test;\r\n        this.splitData = function (cross_validation_setting, filterd_dataset, targets, len) {\r\n            if (cross_validation_setting === CV_OPTIONS.SPLIT) {\r\n                const limit = Math.ceil(len * 70 / 100)\r\n                const train_bound = `0:${limit}`\r\n                const test_bound = `${limit}:${len}`\r\n                x_train = filterd_dataset.iloc({ rows: [`0: ${limit}`] })\r\n                y_train = targets.iloc([train_bound])\r\n                x_test = filterd_dataset.iloc({ rows: [`${limit}: ${len}`] });\r\n                y_test = targets.iloc([test_bound]);\r\n            } else if (cross_validation_setting === CV_OPTIONS.NO) {\r\n                x_train = filterd_dataset\r\n                y_train = targets\r\n                x_test = filterd_dataset\r\n                y_test = targets\r\n            }\r\n            return [x_train, y_train, x_test, y_test]\r\n        }\r\n        this.encodeTarget = function (y_train, y_test) {\r\n            let labelEncoder = new LabelEncoder()\r\n            labelEncoder.fit(y_train)\r\n            labelEncoder.transform(y_train)\r\n            let encoded_y = labelEncoder.transform(y_train)\r\n            let encoded_y_test = labelEncoder.transform(y_test)\r\n            return [labelEncoder, encoded_y, encoded_y_test]\r\n        }\r\n    },\r\n    watch: {\r\n        modelTarget: function name(target, oldVal) {\r\n            if (target !== oldVal && target) {\r\n                this.settings.setTarget(target)\r\n                let targetFeature = this.featureSettings.find(feature => feature.name == target);\r\n                this.settings.setmodelTask(targetFeature.type === FeatureCategories.Numerical.id ? false : true);\r\n                this.modelOptions = targetFeature.type === FeatureCategories.Numerical.id ? Settings.regression : Settings.classification;\r\n            }\r\n        },\r\n        modelOption: function () {\r\n            this.modelConfigurations = null\r\n        },\r\n\r\n\r\n    }\r\n}\r\n</script>\r\n\r\n<style>\r\n.is-danger {\r\n    color: red !important;\r\n}\r\n</style>","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./sidebar-component.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./sidebar-component.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./sidebar-component.vue?vue&type=template&id=878db6be\"\nimport script from \"./sidebar-component.vue?vue&type=script&lang=js\"\nexport * from \"./sidebar-component.vue?vue&type=script&lang=js\"\nimport style0 from \"./sidebar-component.vue?vue&type=style&index=0&id=878db6be&prod&lang=css\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"column is-10\"},[_c('section',[_c('b-tabs',{attrs:{\"type\":\"is-toggle\",\"position\":'is-centered',\"animated\":false},model:{value:(_vm.settings.activeTab),callback:function ($$v) {_vm.$set(_vm.settings, \"activeTab\", $$v)},expression:\"settings.activeTab\"}},[_c('b-tab-item',{attrs:{\"label\":\"Data Anaysis\"}},[(this.settings.datasetShape?.count > 0)?_c('section',[_c('b-message',{attrs:{\"title\":\"Data summary\",\"type\":\"is-info\",\"closable\":false},model:{value:(_vm.isActive),callback:function ($$v) {_vm.isActive=$$v},expression:\"isActive\"}},[_c('div',{staticClass:\"columns is-multiline\"},[_c('div',{staticClass:\"column is-12 has-text-left\"},[_c('p',{staticClass:\"title is-6\"},[_vm._v(\" Data Shape : (\"+_vm._s(this.settings.datasetShape.count)+\",\"+_vm._s(this.settings.datasetShape.columns)+\")\")])]),_c('div',{staticClass:\"column is-6\"},[_c('h5',{staticClass:\"title is-6 has-text-left\"},[_vm._v(\"Continuous Features :\")]),_c('b-table',{staticClass:\"is-size-7\",attrs:{\"data\":_vm.continuousFeaturesStats,\"columns\":_vm.continuousFeaturesColumns,\"narrowed\":true}})],1),_c('div',{staticClass:\"column is-6\"},[_c('h5',{staticClass:\"title is-6 has-text-left\"},[_vm._v(\"Categorical Features :\")]),_c('b-table',{staticClass:\"is-size-7\",attrs:{\"data\":_vm.categoricalFeaturesStats,\"columns\":_vm.categoricalFeaturesColumns,\"narrowed\":true}})],1),_c('div',{staticClass:\"column is-6\"},[_c('h5',{staticClass:\"title is-6 has-text-left\"},[_vm._v(\"Sample Data :\")]),_c('b-table',{staticClass:\"is-size-7\",attrs:{\"data\":_vm.sampleData,\"columns\":_vm.datasetColumns,\"narrowed\":true}})],1)])]),_c('section',[(this.settings.df)?_c('scatterplot-matrix-component',{attrs:{\"dataframe\":this.settings.df?.copy()}}):_vm._e()],1),_c('section',[_c('div',{staticClass:\"column is-12\"},[_c('button',{staticClass:\"button is-success\",attrs:{\"disabled\":_vm.loading},on:{\"click\":_vm.correlationMatrix}},[_vm._v(\"Correlation Matrix\")])]),_c('b-message',[_c('div',{staticClass:\"columns is-multiline is-centered mb-2\"},[_c('div',{staticClass:\"column is-5\",staticStyle:{\"height\":\"400px\"},attrs:{\"id\":\"correlation_matrix\"}}),_c('div',{staticClass:\"column is-5\"},[_c('div',{staticClass:\"colmun is-12\",attrs:{\"id\":\"test\"}},[_c('img',{attrs:{\"src\":_vm.img}})])])])])],1)],1):_c('section',[_c('b-message',{attrs:{\"type\":\"is-danger\",\"has-icon\":\"\",\"icon-pack\":\"fas\"}},[_vm._v(\" Upload a dataset or select a sample from sidebar. \")])],1)]),_c('b-tab-item',{attrs:{\"label\":\"Dimensionality Reduction\"}},[_c('dmensionality-reduction-component',{attrs:{\"dataframe\":this.settings.df,\"columns\":_vm.selectedFeatures}})],1),_c('b-tab-item',{attrs:{\"label\":\"Results Analysis\"}},[_c('results-component')],1),_c('b-tab-item',{attrs:{\"label\":\"Details\",\"disabled\":\"\"}},[_vm._v(\" Nunc nec velit nec libero vestibulum eleifend. Curabitur pulvinar congue luctus. Nullam hendrerit iaculis augue vitae ornare. Maecenas vehicula pulvinar tellus, id sodales felis lobortis eget. \")])],1)],1)])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function render(){var _vm=this,_c=_vm._self._c;return (this.settings?.items.length > 2)?_c('section',[_c('b-message',{attrs:{\"title\":\"Principle Component Analysis\",\"type\":\"is-info\",\"closable\":false}},[_c('b-field',[_c('b-input',{attrs:{\"size\":\"is-small\",\"type\":\"number\",\"placeholder\":\"X axis component\"},model:{value:(_vm.pcaX),callback:function ($$v) {_vm.pcaX=$$v},expression:\"pcaX\"}}),_c('b-input',{attrs:{\"size\":\"is-small\",\"type\":\"number\",\"placeholder\":\"Y axis component\"},model:{value:(_vm.pcaY),callback:function ($$v) {_vm.pcaY=$$v},expression:\"pcaY\"}}),_c('p',{staticClass:\"control\"},[_c('b-button',{attrs:{\"disabled\":!_vm.pcaX || !_vm.pcaY,\"size\":\"is-small\",\"type\":\"is-info\",\"loading\":_vm.findingPCA,\"label\":\"Find PCA\"},on:{\"click\":_vm.findPCA}})],1)],1),(_vm.hasPCA)?_c('div',{staticClass:\"columns\"},[_c('div',{staticClass:\"column is-6\"},[_c('div',{staticStyle:{\"height\":\"300px\"},attrs:{\"id\":\"pca-1\"}})]),_c('div',{staticClass:\"column is-6\"},[_c('div',{staticStyle:{\"height\":\"300px\"},attrs:{\"id\":\"scree_plot\"}})])]):_vm._e()],1),_c('b-message',{attrs:{\"title\":\"t-distributed stochastic neighbor embedding\",\"type\":\"is-info\",\"closable\":false}},[_c('b-button',{attrs:{\"size\":\"is-small\",\"type\":\"is-info\",\"loading\":_vm.findingTSNE,\"label\":\"find t-SNE\"},on:{\"click\":_vm.findTSNE}}),_c('div',{staticClass:\"column is-6\",attrs:{\"id\":\"dimensionality_reduction_panel_tsne\"}},[_c('div',{attrs:{\"id\":\"tsne\"}})])],1),_c('b-message',{attrs:{\"title\":\"Auto Encoder\",\"type\":\"is-info\",\"closable\":false}},[_c('b-field',[_c('b-input',{attrs:{\"size\":\"is-small\",\"type\":\"number\",\"placeholder\":\"Hidden layer size\"},model:{value:(_vm.pcaX),callback:function ($$v) {_vm.pcaX=$$v},expression:\"pcaX\"}}),_c('p',{staticClass:\"control\"},[_c('b-button',{attrs:{\"size\":\"is-small\",\"type\":\"is-info\",\"loading\":_vm.findingPCA,\"label\":\"Find Auto Encoder\"},on:{\"click\":_vm.autoEncoder}})],1)],1),_c('div',{staticClass:\"column is-6\",attrs:{\"id\":\"dimensionality_reduction_panel_tsne\"}},[_c('div',{attrs:{\"id\":\"autoencoder\"}})])],1)],1):_c('section',[_c('b-message',{attrs:{\"type\":\"is-danger\",\"has-icon\":\"\",\"icon-pack\":\"fas\"}},[_vm._v(\" There is no data to show. \")])],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n    <section v-if=\"this.settings?.items.length > 2\">\r\n        <b-message title=\"Principle Component Analysis\" type=\"is-info\" :closable=\"false\">\r\n            <b-field>\r\n                <b-input v-model=\"pcaX\" size=\"is-small\" type=\"number\" placeholder=\"X axis component\"></b-input>\r\n                <b-input v-model=\"pcaY\" size=\"is-small\" type=\"number\" placeholder=\"Y axis component\"></b-input>\r\n                <p class=\"control\">\r\n                    <b-button :disabled=\"!pcaX || !pcaY\" size=\"is-small\" @click=\"findPCA\" type=\"is-info\"\r\n                        :loading=\"findingPCA\" label=\"Find PCA\" />\r\n                </p>\r\n            </b-field>\r\n            <div class=\"columns\" v-if=\"hasPCA\">\r\n                <div class=\"column is-6\">\r\n                    <div id=\"pca-1\" style=\"height: 300px;\"></div>\r\n                </div>\r\n                <div class=\"column is-6\">\r\n                    <div id=\"scree_plot\" style=\"height: 300px;\"></div>\r\n                </div>\r\n            </div>\r\n        </b-message>\r\n        <b-message title=\"t-distributed stochastic neighbor embedding\" type=\"is-info\" :closable=\"false\">\r\n            <b-button @click=\"findTSNE\" size=\"is-small\" type=\"is-info\" :loading=\"findingTSNE\" label=\"find t-SNE\" />\r\n            <div class=\"column is-6\" id=\"dimensionality_reduction_panel_tsne\">\r\n                <div id=\"tsne\">\r\n                </div>\r\n            </div>\r\n        </b-message>\r\n        <b-message title=\"Auto Encoder\" type=\"is-info\" :closable=\"false\">\r\n            <b-field>\r\n                <b-input v-model=\"pcaX\" size=\"is-small\" type=\"number\" placeholder=\"Hidden layer size\"></b-input>\r\n                <p class=\"control\">\r\n                    <b-button size=\"is-small\" @click=\"autoEncoder\" type=\"is-info\" :loading=\"findingPCA\"\r\n                        label=\"Find Auto Encoder\" />\r\n                </p>\r\n            </b-field>\r\n            <div class=\"column is-6\" id=\"dimensionality_reduction_panel_tsne\">\r\n                <div id=\"autoencoder\">\r\n                </div>\r\n            </div>\r\n        </b-message>\r\n    </section>\r\n    <section v-else>\r\n        <b-message type=\"is-danger\" has-icon icon-pack=\"fas\">\r\n            There is no data to show.\r\n        </b-message>\r\n    </section>\r\n</template>\r\n\r\n<script>\r\nimport ChartController from '@/helpers/charts';\r\nimport { settingStore } from '@/stores/settings'\r\nimport { tensorflow } from 'danfojs/dist/danfojs-base';\r\nimport { FeatureCategories } from '@/helpers/settings'\r\n\r\n// eslint-disable-next-line no-unused-vars\r\nlet chartController = new ChartController();\r\nexport default {\r\n    name: 'dmensionality-reduction-component',\r\n    setup() {\r\n        const settings = settingStore()\r\n\r\n        return { settings }\r\n    },\r\n    props: {\r\n        msg: String,\r\n        dataframe: Object,\r\n        columns: []\r\n    },\r\n    data() {\r\n        return {\r\n            pcaX: null,\r\n            pcaY: null,\r\n            findingPCA: false,\r\n            hasPCA: false,\r\n            findingTSNE: false\r\n\r\n        }\r\n    },\r\n    methods: {\r\n        async findPCA() {\r\n            this.findingPCA = true;\r\n            this.hasPCA = true;\r\n            let numericColumns = this.settings.items.filter(column => column.selected && column.type === 1).map(column => column.name);\r\n            console.log(numericColumns);\r\n            await chartController.draw_pca(this.dataframe.loc({ columns: numericColumns }).values,\r\n                this.settings.isClassification ? this.dataframe.loc({ columns: [this.settings.modelTarget] }).values : [],\r\n                this.dataframe.loc({ columns: [this.settings.modelTarget] }).values\r\n                , this.pcaX, this.pcaY)\r\n            this.findingPCA = false;\r\n\r\n\r\n        },\r\n        async findTSNE() {\r\n            this.findingTSNE = true;\r\n            let numericColumns = this.settings.items.filter(column => column.selected && column.type === 1).map(column => column.name);\r\n            await chartController.plot_tsne(this.dataframe.loc({ columns: numericColumns }).values,\r\n                this.settings.isClassification ? this.dataframe.loc({ columns: [this.settings.modelTarget] }).values : [], this.dataframe.loc({ columns: [this.settings.modelTarget] }).values);\r\n            this.findingTSNE = false;\r\n        },\r\n        async autoEncoder() {\r\n            const model = tensorflow.sequential();\r\n            let numericColumns = this.settings.items.filter(m => m.type === FeatureCategories.Numerical.id).map(m => m.name);\r\n            let values = this.settings.df.loc({ columns: numericColumns }).values\r\n            const encoder = tensorflow.layers.dense({\r\n                units: 3,\r\n                batchInputShape: [null, numericColumns.length],\r\n                activation: 'relu',\r\n                kernelInitializer: \"randomNormal\",\r\n                biasInitializer: \"ones\"\r\n            });\r\n            const decoder = tensorflow.layers.dense({ units: numericColumns.length, activation: 'relu' });\r\n            model.add(encoder);\r\n            model.add(decoder);\r\n            await model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\r\n            console.log('compliled');\r\n\r\n            const xs = tensorflow.tensor2d(values);\r\n            // eslint-disable-next-line no-unused-vars\r\n            let h = await model.fit(xs, xs, { epochs: 5, batchSize: 15, shuffle: true, validationSpit: 0.1 });\r\n            xs.dispose();\r\n            const tidyWrapper = tensorflow.tidy(() => {\r\n                const predictor = tensorflow.sequential();\r\n                predictor.add(encoder);\r\n                let xs = tensorflow.tensor2d(values);\r\n                let ret = predictor.predict(xs);\r\n                xs.dispose();\r\n                return ret.arraySync();\r\n            });\r\n            // eslint-disable-next-line no-unused-vars\r\n            let data = tidyWrapper;\r\n            console.log(await data);\r\n\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\r\n<style scoped></style>","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./dmensionality-reduction-componenet.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./dmensionality-reduction-componenet.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./dmensionality-reduction-componenet.vue?vue&type=template&id=4d098d3a&scoped=true\"\nimport script from \"./dmensionality-reduction-componenet.vue?vue&type=script&lang=js\"\nexport * from \"./dmensionality-reduction-componenet.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"4d098d3a\",\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c;return (this.settings.results?.length > 0)?_c('div',[_c('b-tabs',{model:{value:(_vm.settings.resultActiveTab),callback:function ($$v) {_vm.$set(_vm.settings, \"resultActiveTab\", $$v)},expression:\"settings.resultActiveTab\"}},_vm._l((this.settings.results),function(result){return _c('b-tab-item',{key:result.id,ref:\"resultContents\",refInFor:true,attrs:{\"label\":result.id + '.' + result.name.toString()}},[(result.modelTask)?_c('classification-view-component',{attrs:{\"result\":result},on:{\"delete-result\":_vm.deleteResult}}):_c('regression-view-component',{attrs:{\"result\":result},on:{\"delete-result\":_vm.deleteResult}}),_c('div',{staticClass:\"column is-12\"},[_c('div',{staticClass:\"table-container\"},[_c('table',{staticClass:\"table is-bordered is-hoverable is-narrow display is-size-7\",attrs:{\"id\":'predictions_table_' + result.id,\"width\":\"100%\"}})])])],1)}),1)],1):_c('div',[_c('b-message',{attrs:{\"type\":\"is-danger\",\"has-icon\":\"\",\"icon-pack\":\"fas\"}},[_vm._v(\" No result to show. \")])],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"columns is-multiline\"},[_c('div',{staticClass:\"column is-12\"},[_c('b-message',{staticClass:\"has-text-left\",attrs:{\"type\":\"is-info \",\"has-icon\":\"\",\"icon-pack\":\"fas\"}},[_c('p',{staticClass:\"my-1 is-size-7\"},[_c('span',[_vm._v(\"Dataset Name : \"+_vm._s(_vm.result.datasetName)+\" , \")]),_c('span',[_vm._v(\" Target variable : \"+_vm._s(_vm.result.target))])]),_c('p',{staticClass:\"subtitle is-6 my-1 is-size-7\"},[_vm._v(\"Features :\")]),_c('p',{staticClass:\"ml-2 my-1 subtitle is-6 is-size-7\"},[_vm._v(\"Categorical Features : \"),_vm._l((_vm.result.categoricalFeatures),function(feature){return _c('span',{key:feature},[_vm._v(\" \"+_vm._s(feature + ', ')+\" \")])})],2),_c('p',{staticClass:\"ml-2 my-1 subtitle is-6 is-size-7\"},[_vm._v(\"Numerical Features : \"),_vm._l((_vm.result.numericColumns),function(feature){return _c('span',{key:feature},[_vm._v(\" \"+_vm._s(feature + ', ')+\" \")])})],2),_c('p',{staticClass:\"ml-2 my-1 subtitle is-6 is-size-7\"},[_vm._v(\"Transformations : \"),_vm._l((_vm.result.transformations),function(transformation){return _c('span',{key:transformation.name},[_vm._v(\" \"+_vm._s(transformation.name + ': ' + transformation.scaler + ',')+\" \")])})],2),_vm._l((_vm.result.options),function(value,key){return _c('p',{key:key,staticClass:\"is-size-7\"},[_vm._v(\" \"+_vm._s(key)+\": \"+_vm._s(value['value'])+\" \")])}),_c('p',{staticClass:\"subtitle my-1 is-size-7\"},[_vm._v(\"Goodness of Fit :\")]),_c('p',{staticClass:\"ml-2 my-1 subtitle is-size-7\"},[_vm._v(\"Accuracy : \"+_vm._s(_vm.result.metrics[3].toFixed(2)))]),_c('p',{staticClass:\"ml-2 my-1 subtitle is-size-7\"},[_vm._v(\"f1 micro : \"+_vm._s(_vm.result.metrics[4].toFixed(2)))]),_c('p',{staticClass:\"ml-2 my-1 subtitle is-size-7\"},[_vm._v(\" f1 macro :\"+_vm._s(_vm.result.metrics[2].toFixed(2)))]),_c('button',{staticClass:\"button is-link is-outlined is-small\",on:{\"click\":function($event){return _vm.deleteTab()}}},[_vm._v(\"Delete \")])],2)],1),_c('div',{staticClass:\"column is-6\",staticStyle:{\"height\":\"400px\"},attrs:{\"id\":'confusion_matrix_' + _vm.result.id}}),_c('div',{staticClass:\"column is-6\",staticStyle:{\"height\":\"400px\"},attrs:{\"id\":'pca_results_' + _vm.result.id}}),_c('div',{staticClass:\"column is-6\",staticStyle:{\"height\":\"400px\"},attrs:{\"id\":'pfi_boxplot_' + _vm.result.id}}),_c('div',{staticClass:\"column is-6\",staticStyle:{\"height\":\"400px\"},attrs:{\"id\":'pdp_plot_' + _vm.result.id}}),(_vm.result.name.toString().includes('neighbour'))?_c('div',{staticClass:\"column is-6\",staticStyle:{\"height\":\"350px\"},attrs:{\"id\":'knn_table_' + _vm.result.id}}):_vm._e(),(_vm.result.name.toString().toLowerCase().includes('nai'))?_c('div',{staticClass:\"column is-6\",staticStyle:{\"height\":\"350px\"},attrs:{\"id\":'roc_plot_' + _vm.result.id}}):_vm._e()])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n    <div class=\"columns is-multiline\">\r\n        <div class=\"column is-12\">\r\n            <b-message type=\"is-info \" has-icon icon-pack=\"fas\" class=\"has-text-left\">\r\n                <p class=\"my-1 is-size-7\">\r\n                    <span>Dataset Name : {{ result.datasetName }} , </span>\r\n                    <span> Target variable : {{ result.target }}</span>\r\n                </p>\r\n\r\n                <p class=\"subtitle is-6 my-1 is-size-7\">Features :</p>\r\n                <p class=\"ml-2 my-1 subtitle is-6 is-size-7\">Categorical Features : <span\r\n                        v-for=\"feature in result.categoricalFeatures \" :key=\"feature\">\r\n                        {{ feature + ', ' }}\r\n                    </span>\r\n                </p>\r\n                <p class=\"ml-2 my-1 subtitle is-6 is-size-7\">Numerical Features : <span\r\n                        v-for=\"feature in result.numericColumns \" :key=\"feature\">\r\n                        {{ feature + ', ' }}\r\n                    </span></p>\r\n                <p class=\"ml-2 my-1 subtitle is-6 is-size-7\">Transformations :\r\n                    <span v-for=\"transformation in result.transformations\" :key=\"transformation.name\">\r\n                        {{ transformation.name + ': ' + transformation.scaler + ',' }}\r\n                    </span>\r\n                </p>\r\n                <p class=\"is-size-7\" v-for=\"(value, key) in result.options\" :key=\"key\">\r\n                    {{ key }}: {{ value['value'] }}\r\n                </p>\r\n                <p class=\"subtitle my-1 is-size-7\">Goodness of Fit :</p>\r\n                <p class=\"ml-2 my-1 subtitle is-size-7\">Accuracy : {{ result.metrics[3].toFixed(2) }}</p>\r\n                <p class=\"ml-2 my-1 subtitle is-size-7\">f1 micro : {{ result.metrics[4].toFixed(2) }}</p>\r\n                <p class=\"ml-2 my-1 subtitle is-size-7\"> f1 macro :{{ result.metrics[2].toFixed(2) }}</p>\r\n                <button class=\"button is-link is-outlined is-small\" @click=\"deleteTab()\">Delete </button>\r\n\r\n            </b-message>\r\n        </div>\r\n        <div class=\"column is-6\" style=\"height: 400px;\" :id=\"'confusion_matrix_' + result.id\"></div>\r\n        <div class=\"column is-6\" style=\"height: 400px;\" :id=\"'pca_results_' + result.id\"></div>\r\n        <div class=\"column is-6\" style=\"height: 400px;\" :id=\"'pfi_boxplot_' + result.id\">\r\n        </div>\r\n        <div class=\"column is-6\" style=\"height: 400px;\" :id=\"'pdp_plot_' + result.id\">\r\n        </div>\r\n        <div class=\"column is-6\" style=\"height: 350px;\" :id=\"'knn_table_' + result.id\"\r\n            v-if=\"result.name.toString().includes('neighbour')\">\r\n        </div>\r\n        <div class=\"column is-6\" style=\"height: 350px;\" :id=\"'roc_plot_' + result.id\"\r\n            v-if=\"result.name.toString().toLowerCase().includes('nai')\">\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { settingStore } from '@/stores/settings'\r\n\r\nexport default {\r\n\r\n    setup() {\r\n        const settings = settingStore()\r\n        return { settings }\r\n    },\r\n    name: 'ClassificationViewComponent',\r\n    methods: {\r\n        deleteTab() {\r\n            this.$emit(\"delete-result\", this.result.id)\r\n        }\r\n    },\r\n    props: {\r\n        result: {}\r\n    },\r\n}\r\n</script>\r\n\r\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\r\n<style scoped></style>","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./classification-view-component.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./classification-view-component.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./classification-view-component.vue?vue&type=template&id=3b23b839&scoped=true\"\nimport script from \"./classification-view-component.vue?vue&type=script&lang=js\"\nexport * from \"./classification-view-component.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"3b23b839\",\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"columns is-multiline\"},[_c('div',{staticClass:\"column is-12\"},[_c('b-message',{staticClass:\"has-text-left\",attrs:{\"type\":\"is-info is-size-7\\t\",\"has-icon\":\"\",\"icon-pack\":\"fas\"}},[_c('p',{staticClass:\"my-1\"},[_c('span',[_vm._v(\"Dataset Name : \"+_vm._s(_vm.result.datasetName)+\" , \")]),_c('span',[_vm._v(\" Target variable : \"+_vm._s(_vm.result.target))])]),_c('p',{staticClass:\"subtitle is-size-7 my-1\"},[_vm._v(\"Features :\")]),_c('p',{staticClass:\"ml-2 my-1 subtitle is-size-7\"},[_vm._v(\"Categorical Features : \"),_vm._l((_vm.result.categoricalFeatures),function(feature){return _c('span',{key:feature},[_vm._v(\" \"+_vm._s(feature + ', ')+\" \")])})],2),_c('p',{staticClass:\"ml-2 my-1 subtitle is-size-7\"},[_vm._v(\"Numerical Features : \"),_vm._l((_vm.result.numericColumns),function(feature){return _c('span',{key:feature},[_vm._v(\" \"+_vm._s(feature + ', ')+\" \")])})],2),_c('p',{staticClass:\"ml-2 my-1 subtitle is-size-7\"},[_vm._v(\"Transformations : \"),_vm._l((_vm.result.transformations),function(transformation){return _c('span',{key:transformation.name},[_vm._v(\" \"+_vm._s(transformation.name + ': ' + transformation.scaler + ',')+\" \")])})],2),_vm._l((_vm.result.options),function(value,key){return _c('p',{key:key},[_vm._v(\" \"+_vm._s(key)+\": \"+_vm._s(value['value'])+\" \")])}),_c('p',{staticClass:\"subtitle is-size-7 my-1\"},[_vm._v(\"Goodness of Fit :\")]),_c('p',{staticClass:\"ml-2 my-1 subtitle is-size-7\"},[_vm._v(\"MSE : \"+_vm._s(_vm.result.metrics[0].toFixed(2)))]),_c('p',{staticClass:\"ml-2 my-1 subtitle is-size-7\"},[_vm._v(\"R2 : \"+_vm._s(_vm.result.metrics[1].toFixed(2)))]),_c('button',{staticClass:\"button is-link is-outlined is-small\",on:{\"click\":function($event){return _vm.deleteTab()}}},[_vm._v(\"Delete \")])],2)],1),(_vm.result.name === 'Linear Regression' || _vm.result.name === 'Polynomial Regression')?_c('div',{staticClass:\"columns is-multiline is-gapless\"},[_c('div',{staticClass:\"column is-7\"},[_c('div',{staticClass:\"table-container\"},[_c('table',{staticClass:\"table has-text-centered nowrap is-striped is-bordered is-narrow is-hoverable is-size-7\",attrs:{\"id\":'metrics_table_' + _vm.result.id}},[_vm._m(0),_vm._m(1)])])]),_c('div',{staticClass:\"column is-5 mt-4\",attrs:{\"id\":'parameters_plot_' + _vm.result.id}}),_c('div',{staticClass:\"column is-12\",attrs:{\"id\":'metrics_' + _vm.result.id}}),_c('div',{staticClass:\"column is-6\",staticStyle:{\"height\":\"250px\"},attrs:{\"id\":'errors_' + _vm.result.id,\"width\":\"100%\"}}),_c('div',{staticClass:\"column is-6\",staticStyle:{\"height\":\"250px\"},attrs:{\"id\":'regularization_' + _vm.result.id,\"width\":\"100%\"}}),_c('div',{staticClass:\"column is-4\"},[_c('div',{staticStyle:{\"height\":\"200px\"},attrs:{\"id\":'regression_y_yhat_' + _vm.result.id,\"width\":\"100%\"}})]),_c('div',{staticClass:\"column is-4\"},[_c('div',{staticStyle:{\"height\":\"200px\"},attrs:{\"id\":'regression_y_yhat_min_' + _vm.result.id,\"width\":\"100%\"}})]),_c('div',{staticClass:\"column is-4\"},[_c('div',{staticStyle:{\"height\":\"200px\"},attrs:{\"id\":'regression_y_yhat_1se_' + _vm.result.id,\"width\":\"100%\"}})]),_c('div',{staticClass:\"column is-4\"},[_c('div',{staticStyle:{\"height\":\"200px\"},attrs:{\"id\":'regression_residual_' + _vm.result.id,\"width\":\"100%\"}})]),_c('div',{staticClass:\"column is-4\"},[_c('div',{staticStyle:{\"height\":\"200px\"},attrs:{\"id\":'regression_residual_min_' + _vm.result.id,\"width\":\"100%\"}})]),_c('div',{staticClass:\"column is-4\"},[_c('div',{staticStyle:{\"height\":\"200px\"},attrs:{\"id\":'regression_residual_1se_' + _vm.result.id,\"width\":\"100%\"}})]),_c('div',{staticClass:\"column is-4\"},[_c('div',{staticStyle:{\"height\":\"200px\"},attrs:{\"id\":'qqplot_ols_' + _vm.result.id,\"width\":\"100%\"}})]),_c('div',{staticClass:\"column is-4\"},[_c('div',{staticStyle:{\"height\":\"200px\"},attrs:{\"id\":'qqplot_min_' + _vm.result.id,\"width\":\"100%\"}})]),_c('div',{staticClass:\"column is-4\"},[_c('div',{staticStyle:{\"height\":\"200px\"},attrs:{\"id\":'qqplot_1se_' + _vm.result.id,\"width\":\"100%\"}})])]):_c('div',{staticClass:\"column is-12\"},[_c('div',{staticClass:\"columns is-multiline\"},[_c('div',{staticClass:\"column is-6\"},[_c('div',{staticStyle:{\"height\":\"300px\"},attrs:{\"id\":'regression_y_yhat_' + _vm.result.id,\"width\":\"100%\"}})]),_c('div',{staticClass:\"column is-6\"},[_c('div',{staticStyle:{\"height\":\"300px\"},attrs:{\"id\":'errors_' + _vm.result.id,\"width\":\"100%\"}})]),(_vm.result.name.toString().includes('neighbour'))?_c('div',{staticClass:\"column is-6\",staticStyle:{\"height\":\"350px\"},attrs:{\"id\":'knn_table_' + _vm.result.id}}):_vm._e(),_c('div',{staticClass:\"column is-6\",staticStyle:{\"height\":\"400px\"},attrs:{\"id\":'pfi_boxplot_' + _vm.result.id}}),_c('div',{staticClass:\"column is-6\",staticStyle:{\"height\":\"400px\"},attrs:{\"id\":'pdp_plot_' + _vm.result.id}})])])])\n}\nvar staticRenderFns = [function (){var _vm=this,_c=_vm._self._c;return _c('thead',[_c('tr',[_c('th',{attrs:{\"colspan\":\"1\"}}),_c('th',{attrs:{\"colspan\":\"3\"}},[_vm._v(\"OLS\")]),_c('th',{attrs:{\"colspan\":\"3\"}},[_vm._v(\"lambda min\")]),_c('th',{attrs:{\"colspan\":\"3\"}},[_vm._v(\"lambda 1se\")])]),_c('tr',[_c('th',[_vm._v(\"name\")]),_c('th',[_vm._v(\"coef\")]),_c('th',[_vm._v(\"st.d.\")]),_c('th',[_c('i',[_vm._v(\"p\")]),_vm._v(\"-value\")]),_c('th',[_vm._v(\"coef\")]),_c('th',[_vm._v(\"st.d.\")]),_c('th',[_c('i',[_vm._v(\"p\")]),_vm._v(\"-value\")]),_c('th',[_vm._v(\"coef\")]),_c('th',[_vm._v(\"st.d.\")]),_c('th',[_c('i',[_vm._v(\"p\")]),_vm._v(\"-value\")])])])\n},function (){var _vm=this,_c=_vm._self._c;return _c('tfoot',{staticClass:\"has-text-centered\",staticStyle:{\"font-weight\":\"normal\"}},[_c('tr',[_c('th'),_c('th',{attrs:{\"colspan\":\"3\"}}),_c('th',{attrs:{\"colspan\":\"3\"}}),_c('th',{attrs:{\"colspan\":\"3\"}})])])\n}]\n\nexport { render, staticRenderFns }","<template>\r\n    <div class=\"columns is-multiline\">\r\n        <div class=\"column is-12\">\r\n            <b-message type=\"is-info is-size-7\t\" has-icon icon-pack=\"fas\" class=\"has-text-left\">\r\n                <p class=\"my-1\">\r\n                    <span>Dataset Name : {{ result.datasetName }} , </span>\r\n                    <span> Target variable : {{ result.target }}</span>\r\n                </p>\r\n\r\n                <p class=\"subtitle is-size-7 my-1\">Features :</p>\r\n                <p class=\"ml-2 my-1 subtitle is-size-7 \">Categorical Features : <span\r\n                        v-for=\"feature in result.categoricalFeatures \" :key=\"feature\">\r\n                        {{ feature + ', ' }}\r\n                    </span>\r\n                </p>\r\n                <p class=\"ml-2 my-1 subtitle is-size-7 \">Numerical Features : <span\r\n                        v-for=\"feature in result.numericColumns \" :key=\"feature\">\r\n                        {{ feature + ', ' }}\r\n                    </span></p>\r\n                <p class=\"ml-2 my-1 subtitle is-size-7 \">Transformations :\r\n                    <span v-for=\"transformation in result.transformations\" :key=\"transformation.name\">\r\n                        {{ transformation.name + ': ' + transformation.scaler + ',' }}\r\n                    </span>\r\n                </p>\r\n                <p v-for=\"(value, key) in result.options\" :key=\"key\">\r\n                    {{ key }}: {{ value['value'] }}\r\n                </p>\r\n                <p class=\"subtitle is-size-7 my-1\">Goodness of Fit :</p>\r\n                <p class=\"ml-2 my-1 subtitle is-size-7 \">MSE : {{ result.metrics[0].toFixed(2) }}</p>\r\n                <p class=\"ml-2 my-1 subtitle is-size-7 \">R2 : {{ result.metrics[1].toFixed(2) }}</p>\r\n                <button class=\"button is-link is-outlined is-small\" @click=\"deleteTab()\">Delete </button>\r\n\r\n            </b-message>\r\n        </div>\r\n        <div class=\"columns is-multiline is-gapless\"\r\n            v-if=\"result.name === 'Linear Regression' || result.name === 'Polynomial Regression'\">\r\n            <div class=\"column is-7\">\r\n                <div class=\"table-container\">\r\n                    <table\r\n                        class=\"table has-text-centered nowrap is-striped is-bordered is-narrow is-hoverable is-size-7\"\r\n                        :id=\"'metrics_table_' + result.id\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th colspan=\"1\"></th>\r\n                                <th colspan=\"3\">OLS</th>\r\n                                <th colspan=\"3\">lambda min</th>\r\n                                <th colspan=\"3\">lambda 1se</th>\r\n                            </tr>\r\n                            <tr>\r\n                                <th>name</th>\r\n                                <th>coef</th>\r\n                                <th>st.d.</th>\r\n                                <th><i>p</i>-value</th>\r\n                                <th>coef</th>\r\n                                <th>st.d.</th>\r\n                                <th><i>p</i>-value</th>\r\n                                <th>coef</th>\r\n                                <th>st.d.</th>\r\n                                <th><i>p</i>-value</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tfoot class=\"has-text-centered\" style=\" font-weight: normal\">\r\n                            <tr>\r\n                                <th></th>\r\n                                <th colspan=\"3\"></th>\r\n                                <th colspan=\"3\"></th>\r\n                                <th colspan=\"3\"></th>\r\n\r\n                            </tr>\r\n                        </tfoot>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n            <div class=\"column is-5 mt-4\" :id=\"'parameters_plot_' + result.id\">\r\n            </div>\r\n            <div class=\"column is-12\" :id=\"'metrics_' + result.id\">\r\n            </div>\r\n\r\n            <div class=\"column is-6\" :id=\"'errors_' + result.id\" width=\"100%\" style=\"height:250px\">\r\n            </div>\r\n            <div class=\"column is-6\" :id=\"'regularization_' + result.id\" width=\"100%\" style=\"height:250px\">\r\n            </div>\r\n            <div class=\"column is-4\">\r\n                <div :id=\"'regression_y_yhat_' + result.id\" width=\"100%\" style=\"height:200px\">\r\n                </div>\r\n            </div>\r\n            <div class=\"column is-4\">\r\n                <div :id=\"'regression_y_yhat_min_' + result.id\" width=\"100%\" style=\"height:200px\">\r\n                </div>\r\n            </div>\r\n            <div class=\"column is-4\">\r\n                <div :id=\"'regression_y_yhat_1se_' + result.id\" width=\"100%\" style=\"height:200px\">\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"column is-4\">\r\n                <div :id=\"'regression_residual_' + result.id\" width=\"100%\" style=\"height:200px\">\r\n                </div>\r\n            </div>\r\n            <div class=\"column is-4\">\r\n                <div :id=\"'regression_residual_min_' + result.id\" width=\"100%\" style=\"height:200px\">\r\n                </div>\r\n            </div>\r\n            <div class=\"column is-4\">\r\n                <div :id=\"'regression_residual_1se_' + result.id\" width=\"100%\" style=\"height:200px\">\r\n                </div>\r\n            </div>\r\n            <div class=\"column is-4\">\r\n                <div :id=\"'qqplot_ols_' + result.id\" width=\"100%\" style=\"height:200px\">\r\n                </div>\r\n            </div>\r\n            <div class=\"column is-4\">\r\n                <div :id=\"'qqplot_min_' + result.id\" width=\"100%\" style=\"height:200px\">\r\n                </div>\r\n            </div>\r\n            <div class=\"column is-4\">\r\n                <div :id=\"'qqplot_1se_' + result.id\" width=\"100%\" style=\"height:200px\">\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"column is-12\" v-else>\r\n            <div class=\"columns is-multiline\">\r\n                <div class=\"column is-6\">\r\n                    <div :id=\"'regression_y_yhat_' + result.id\" width=\"100%\" style=\"height:300px\">\r\n                    </div>\r\n                </div>\r\n                <div class=\"column is-6\">\r\n                    <div :id=\"'errors_' + result.id\" width=\"100%\" style=\"height:300px\"></div>\r\n                </div>\r\n                <div class=\"column is-6\" style=\"height: 350px;\" :id=\"'knn_table_' + result.id\"\r\n                    v-if=\"result.name.toString().includes('neighbour')\">\r\n                </div>\r\n                <div class=\"column is-6\" style=\"height: 400px;\" :id=\"'pfi_boxplot_' + result.id\">\r\n                </div>\r\n                <div class=\"column is-6\" style=\"height: 400px;\" :id=\"'pdp_plot_' + result.id\">\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { settingStore } from '@/stores/settings'\r\n\r\nexport default {\r\n\r\n    setup() {\r\n        const settings = settingStore()\r\n        return { settings }\r\n    },\r\n    name: 'regression-view-component',\r\n    methods: {\r\n        deleteTab() {\r\n            this.$emit(\"delete-result\", this.result.id)\r\n        }\r\n    },\r\n    props: {\r\n        result: {}\r\n    },\r\n}\r\n</script>\r\n\r\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\r\n<style scoped></style>","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./regression-view-component.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./regression-view-component.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./regression-view-component.vue?vue&type=template&id=5eb6f832&scoped=true\"\nimport script from \"./regression-view-component.vue?vue&type=script&lang=js\"\nexport * from \"./regression-view-component.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"5eb6f832\",\n  null\n  \n)\n\nexport default component.exports","<template>\r\n    <div v-if=\"this.settings.results?.length > 0\">\r\n        <b-tabs v-model=\"settings.resultActiveTab\">\r\n            <b-tab-item v-for=\"result in this.settings.results\" :label=\"result.id + '.' + result.name.toString()\"\r\n                :key=\"result.id\" ref=\"resultContents\">\r\n                <classification-view-component @delete-result=\"deleteResult\" :result=\"result\"\r\n                    v-if=\"result.modelTask\"></classification-view-component>\r\n                <regression-view-component @delete-result=\"deleteResult\" :result=\"result\" v-else>\r\n                </regression-view-component>\r\n                <div class=\"column is-12\">\r\n                    <div class=\"table-container\">\r\n                        <table :id=\"'predictions_table_' + result.id\"\r\n                            class=\"table is-bordered is-hoverable is-narrow display is-size-7\" width=\"100%\">\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            </b-tab-item>\r\n        </b-tabs>\r\n    </div>\r\n    <div v-else>\r\n        <b-message type=\"is-danger\" has-icon icon-pack=\"fas\">\r\n            No result to show.\r\n        </b-message>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { settingStore } from '@/stores/settings'\r\nimport ClassificationViewComponent from './classification-view-component.vue'\r\nimport RegressionViewComponent from './regression-view-component.vue'\r\nimport { jsPDF } from \"jspdf\";\r\nimport Plotly from 'danfojs/node_modules/plotly.js-dist-min';\r\nimport UI from '@/helpers/ui';\r\nlet ui = new UI(null, null)\r\n\r\n\r\nexport default {\r\n    components: {\r\n        'classification-view-component': ClassificationViewComponent,\r\n        'regression-view-component': RegressionViewComponent,\r\n\r\n    },\r\n    setup() {\r\n        const settings = settingStore()\r\n        return { settings }\r\n    },\r\n    name: 'ResultsComponent',\r\n    props: {\r\n    },\r\n    data() {\r\n        return {\r\n            activeTab: null,\r\n            visitedTabs: []\r\n        }\r\n    },\r\n    methods: {\r\n\r\n        deleteResult(id) {\r\n            // eslint-disable-next-line no-unused-vars\r\n            let [tables, plots] = this.settings.getResultVisualizations(id);\r\n            tables.forEach(table => {\r\n                ui.removeTable(table)\r\n            });\r\n            plots.forEach(plot => {\r\n                Plotly.purge(plot);\r\n            });\r\n            this.settings.removeResult(id);\r\n\r\n        },\r\n        resize(id) {\r\n            let isVisited = this.visitedTabs.findIndex(item => item === id);\r\n            console.log('cccccc', isVisited);\r\n            if (isVisited === -1) {\r\n                this.visitedTabs.push(id);\r\n                window.dispatchEvent(new Event('resize'));\r\n            }\r\n        },\r\n        exportToPDF() {\r\n            var pdf = new jsPDF('p', 'pt', 'letter');\r\n            pdf.html(this.$el.innerHTML, {\r\n                callback: function (pdf) {\r\n                    var iframe = document.createElement('iframe');\r\n                    iframe.setAttribute('style', 'position:absolute;right:0; top:0; bottom:0; height:100%; width:500px');\r\n                    document.body.appendChild(iframe);\r\n                    iframe.src = pdf.output('datauristring');\r\n                }\r\n            });\r\n        }\r\n    },\r\n}\r\n</script>\r\n\r\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\r\n<style scoped></style>","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./results-component.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./results-component.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./results-component.vue?vue&type=template&id=6f950d6a&scoped=true\"\nimport script from \"./results-component.vue?vue&type=script&lang=js\"\nexport * from \"./results-component.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"6f950d6a\",\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('section',{staticStyle:{\"overflow-y\":\"auto\",\"overflow-x\":\"auto\"}},[_c('div',{attrs:{\"id\":\"scatterplot_mtx\"}}),_c('div',{staticClass:\"columns my-1 ml-5 mt-5 is-multiline\",style:({ width: _vm.features.length * 100 + 'px' })},[_vm._l((_vm.features),function(feature){return _c('div',{key:feature.id,style:({ width: _vm.column_width + '%' })},[_c('b-field',{attrs:{\"label\":feature.name,\"label-position\":'on-border'}},[_c('b-select',{attrs:{\"size\":\"is-small\"},model:{value:(feature.scaler),callback:function ($$v) {_vm.$set(feature, \"scaler\", $$v)},expression:\"feature.scaler\"}},_vm._l((_vm.ScaleOptions),function(option){return _c('option',{key:option.id,domProps:{\"value\":option.id}},[_vm._v(\" \"+_vm._s(option.name)+\" \")])}),0)],1)],1)}),_c('button',{staticClass:\"button mt-2 is-info is-small\",on:{\"click\":function($event){_vm.scaleData(_vm.dataframe?.copy())}}},[_vm._v(\"update\")])],2),_c('b-loading',{attrs:{\"is-full-page\":false},model:{value:(_vm.isLoading),callback:function ($$v) {_vm.isLoading=$$v},expression:\"isLoading\"}})],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n    <section style=\"overflow-y: auto;overflow-x: auto;\">\r\n        <div id=\"scatterplot_mtx\"></div>\r\n        <div class=\"columns my-1 ml-5 mt-5 is-multiline\" :style=\"{ width: features.length * 100 + 'px' }\">\r\n            <div :style=\"{ width: column_width + '%' }\" v-for=\"feature in features\" :key=\"feature.id\">\r\n                <b-field :label=\"feature.name\" :label-position=\"'on-border'\">\r\n                    <b-select size=\"is-small\" v-model=\"feature.scaler\">\r\n                        <option v-for=\"option in ScaleOptions\" :value=\"option.id\" :key=\"option.id\">\r\n                            {{ option.name }}\r\n                        </option>\r\n                    </b-select>\r\n                </b-field>\r\n            </div>\r\n            <button @click=\"scaleData(dataframe?.copy())\" class=\"button mt-2 is-info is-small\">update</button>\r\n        </div>\r\n        <b-loading :is-full-page=\"false\" v-model=\"isLoading\"></b-loading>\r\n    </section>\r\n</template>\r\n\r\n<script>\r\nimport ChartController from '@/helpers/charts';\r\nimport { settingStore } from '@/stores/settings'\r\nimport { ScaleOptions } from '@/helpers/settings'\r\nimport { applyDataTransformation } from '@/helpers/utils';\r\nimport  Plotly  from 'danfojs/node_modules/plotly.js-dist-min';\r\n\r\nlet chartController = new ChartController();\r\nexport default {\r\n    setup() {\r\n        const settings = settingStore()\r\n        return { settings }\r\n    },\r\n    name: 'ScatterplotMatrixComponent',\r\n    props: {\r\n        msg: String,\r\n        dataframe: Object\r\n    },\r\n    data() {\r\n        return {\r\n            isLoading: false,\r\n            ScaleOptions: ScaleOptions,\r\n            features: [],\r\n        }\r\n    },\r\n    methods: {\r\n        async dispalySPLOM(dataframe) {\r\n            this.isLoading = true;\r\n            let numericColumns = this.settings.items.filter(column => column.selected && column.type === 1).map(column => column.name);\r\n            let categorical_columns = this.settings.items.filter(column => column.selected && column.type !== 1).map(column => column.name);\r\n            let features = numericColumns.concat(categorical_columns);\r\n            dataframe.dropNa({ axis: 1, inplace: true })\r\n            await chartController.ScatterplotMatrix(dataframe.loc({ columns: features }).values, features, this.dataframe.column(this.settings.modelTarget).values, categorical_columns.length,\r\n                this.settings.isClassification, numericColumns, categorical_columns, dataframe)\r\n            this.isLoading = false;\r\n\r\n        },\r\n        async scaleData(dataframe) {\r\n            let validTransformations = this.features.filter(m => m.scaler !== 0);\r\n            if (validTransformations?.length > 0) {\r\n                this.isLoading = true;\r\n                Plotly.purge('scatterplot_mtx')\r\n                applyDataTransformation(dataframe, validTransformations.map(transformation => transformation.name), validTransformations);\r\n                await this.dispalySPLOM(dataframe)\r\n                this.isLoading = false;\r\n                validTransformations.forEach(transformation => {\r\n                    this.settings.addTransformation(transformation)\r\n                });\r\n                return;\r\n            }\r\n            this.$buefy.toast.open(\"No transformation available.\")\r\n        }\r\n    },\r\n    created: function () {\r\n        let numericColumns = this.settings.items.filter(column => column.selected && column.type === 1).map(column => column.name);\r\n        let categorical_columns = this.settings.items.filter(column => column.selected && column.type !== 1).map(column => column.name);\r\n        let features = numericColumns.concat(categorical_columns);\r\n        this.features = features.map((feature, i) => {\r\n            return {\r\n                id: i,\r\n                name: feature,\r\n                scaler: 0\r\n            }\r\n        })\r\n        this.dispalySPLOM(this.dataframe.copy())\r\n    },\r\n    watch: {\r\n        dataframe: function (target, oldVal) {\r\n            if (target !== oldVal && target) {\r\n                // let numericColumns = this.settings.items.filter(column => column.selected && column.type === 1).map(column => column.name);\r\n                // let categorical_columns = this.settings.items.filter(column => column.selected && column.type !== 1).map(column => column.name);\r\n                // let features = numericColumns.concat(categorical_columns);\r\n                // this.features = features.map((feature, i) => {\r\n                //     return {\r\n                //         id: i,\r\n                //         name: feature,\r\n                //         scaler: 0\r\n                //     }\r\n                // })\r\n                // this.dispalySPLOM(this.dataframe.copy())\r\n            }\r\n        },\r\n    },\r\n    computed: {\r\n        column_width: {\r\n            get() {\r\n                return this.features.length === 0 ? 0 : 100 / this.features.length\r\n            }\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\r\n<style scoped></style>","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./scatterplot-matrix-component.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./scatterplot-matrix-component.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./scatterplot-matrix-component.vue?vue&type=template&id=7b04c8a4&scoped=true\"\nimport script from \"./scatterplot-matrix-component.vue?vue&type=script&lang=js\"\nexport * from \"./scatterplot-matrix-component.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"7b04c8a4\",\n  null\n  \n)\n\nexport default component.exports","const pyodideWorker = new Worker(new URL('./sns-py.js', import.meta.url))\r\n\r\nconst callbacks = {};\r\n\r\npyodideWorker.onmessage = (event) => {\r\n    const { id, ...data } = event.data;\r\n    const onSuccess = callbacks[id];\r\n    delete callbacks[id];\r\n    onSuccess(data);\r\n};\r\n\r\nconst asyncRun = (() => {\r\n    let id = 0; // identify a Promise\r\n    return (script, context) => {\r\n        // the id could be generated more carefully\r\n        id = (id + 1) % Number.MAX_SAFE_INTEGER;\r\n        return new Promise((onSuccess) => {\r\n            callbacks[id] = onSuccess;\r\n            pyodideWorker.postMessage({\r\n                ...context,\r\n                python: script,\r\n                id,\r\n            });\r\n        });\r\n    };\r\n})();\r\n\r\nexport { asyncRun };","import { asyncRun } from \"@/helpers/sns-worker\";\r\n\r\n\r\nexport default class Clustermap {\r\n    constructor() {\r\n        this.model = null;\r\n\r\n    }\r\n    async train(x_train, columns) {\r\n        this.context = {\r\n            X_train: x_train,\r\n            columns: columns\r\n        };\r\n        const script = `\r\n        import matplotlib\r\n        matplotlib.use(\"AGG\")\r\n        import matplotlib.pyplot as plt\r\n        from js import X_train,columns\r\n        import seaborn as sns\r\n        import io, base64\r\n        import pandas as pd\r\n\r\n\r\n        buffer = io.BytesIO()\r\n        df = pd.DataFrame(X_train,columns = columns)\r\n        plot = sns.clustermap(df.corr(),cmap=\"YlGnBu\")\r\n        plot.savefig(buffer, format='png',dpi=300)\r\n        buffer.seek(0)\r\n        img_str = 'data:image/png;base64,' + base64.b64encode(buffer.read()).decode('UTF-8')\r\n        img_str\r\n        `;\r\n        try {\r\n            const { results, error } = await asyncRun(script, this.context);\r\n            if (results) {\r\n                return results;\r\n            } else if (error) {\r\n                console.log(\"pyodideWorker error: \", error);\r\n            }\r\n        } catch (e) {\r\n            console.log(\r\n                `Error in pyodideWorker at ${e.filename}, Line: ${e.lineno}, ${e.message}`,\r\n            );\r\n        }\r\n\r\n    }\r\n\r\n}","<template>\r\n    <div class=\"column is-10\">\r\n        <section>\r\n\r\n            <b-tabs type=\"is-toggle\" v-model=\"settings.activeTab\" :position=\"'is-centered'\" :animated=\"false\">\r\n                <b-tab-item label=\"Data Anaysis\">\r\n                    <section v-if=\"this.settings.datasetShape?.count > 0\">\r\n                        <b-message title=\"Data summary\" v-model=\"isActive\" type=\"is-info\" :closable=\"false\">\r\n                            <div class=\"columns is-multiline\">\r\n                                <div class=\"column is-12 has-text-left\">\r\n                                    <p class=\"title is-6\"> Data Shape : ({{ this.settings.datasetShape.count }},{{\r\n                                        this.settings.datasetShape.columns\r\n                                    }})</p>\r\n                                </div>\r\n                                <div class=\"column is-6\">\r\n                                    <h5 class=\"title is-6 has-text-left\">Continuous Features :</h5>\r\n                                    <b-table class=\"is-size-7\" :data=\"continuousFeaturesStats\"\r\n                                        :columns=\"continuousFeaturesColumns\" :narrowed=\"true\"></b-table>\r\n                                </div>\r\n                                <div class=\"column is-6\">\r\n                                    <h5 class=\"title is-6 has-text-left\">Categorical Features :</h5>\r\n                                    <b-table class=\"is-size-7\" :data=\"categoricalFeaturesStats\"\r\n                                        :columns=\"categoricalFeaturesColumns\" :narrowed=\"true\"></b-table>\r\n                                </div>\r\n                                <div class=\"column is-6\">\r\n                                    <h5 class=\"title is-6 has-text-left\">Sample Data :</h5>\r\n                                    <b-table class=\"is-size-7\" :data=\"sampleData\" :columns=\"datasetColumns\"\r\n                                        :narrowed=\"true\"></b-table>\r\n                                </div>\r\n                            </div>\r\n                        </b-message>\r\n                        <section>\r\n                            <scatterplot-matrix-component v-if=\"this.settings.df\"\r\n                                :dataframe=\"this.settings.df?.copy()\"></scatterplot-matrix-component>\r\n                        </section>\r\n                        <section>\r\n                            <div class=\"column is-12\"> <button class=\"button is-success\" :disabled=\"loading\"\r\n                                    @click=\"correlationMatrix\">Correlation Matrix</button>\r\n                            </div>\r\n                            <b-message>\r\n                                <div class=\"columns is-multiline is-centered mb-2\">\r\n                                    <div class=\"column is-5\" id=\"correlation_matrix\" style=\"height: 400px;\"></div>\r\n                                    <div class=\"column is-5\">\r\n                                        <div class=\" colmun is-12\" id=\"test\">\r\n                                            <img :src=\"img\">\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </b-message>\r\n                        </section>\r\n                    </section>\r\n                    <section v-else>\r\n                        <b-message type=\"is-danger\" has-icon icon-pack=\"fas\">\r\n                            Upload a dataset or select a sample from sidebar.\r\n                        </b-message>\r\n                    </section>\r\n\r\n                </b-tab-item>\r\n\r\n                <b-tab-item label=\"Dimensionality Reduction\">\r\n                    <dmensionality-reduction-component :dataframe=\"this.settings.df\"\r\n                        :columns=\"selectedFeatures\"></dmensionality-reduction-component>\r\n                </b-tab-item>\r\n                <b-tab-item label=\"Results Analysis\">\r\n                    <results-component></results-component>\r\n                </b-tab-item>\r\n                <b-tab-item label=\"Details\" disabled>\r\n                    Nunc nec velit nec libero vestibulum eleifend.\r\n                    Curabitur pulvinar congue luctus.\r\n                    Nullam hendrerit iaculis augue vitae ornare.\r\n                    Maecenas vehicula pulvinar tellus, id sodales felis lobortis eget.\r\n                </b-tab-item>\r\n            </b-tabs>\r\n\r\n        </section>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport UI from '@/helpers/ui';\r\nimport { toJSON } from 'danfojs';\r\nimport PCAComponent from './tabs/dmensionality-reduction-componenet.vue'\r\nimport ResultsComponent from './tabs/results-component.vue'\r\nimport SPLOMComponent from './visualization/scatterplot-matrix-component.vue'\r\nimport { FeatureCategories } from '../helpers/settings'\r\nimport ChartController from '@/helpers/charts';\r\nimport { settingStore } from '@/stores/settings'\r\nimport { Matrix, correlation } from 'ml-matrix';\r\nimport Clustermap from '@/helpers/correlation/correlation-matrix'\r\nlet ui = new UI(null, null);\r\nlet chartController = new ChartController(null, null)\r\n\r\nexport default {\r\n    name: 'MainComponent',\r\n    components: {\r\n        'dmensionality-reduction-component': PCAComponent,\r\n        'results-component': ResultsComponent,\r\n        'scatterplot-matrix-component': SPLOMComponent,\r\n\r\n    },\r\n    setup() {\r\n        const settings = settingStore()\r\n        return { settings }\r\n    },\r\n    props: {\r\n        msg: String,\r\n        selectedFeatures: []\r\n    },\r\n    data() {\r\n        return {\r\n            img: null,\r\n            continuousFeaturesStats: [\r\n            ],\r\n            continuousFeaturesColumns: [\r\n            ],\r\n            categoricalFeaturesStats: [\r\n            ],\r\n            categoricalFeaturesColumns: [\r\n            ],\r\n            sampleData: [\r\n            ],\r\n            datasetColumns: [\r\n            ],\r\n            isActive: true,\r\n            hasCorrelationMatrix: false,\r\n            loading: false\r\n        }\r\n    },\r\n    methods: {\r\n        renderStats() {\r\n            let numericColumns = this.settings.items.filter(m => m.type === FeatureCategories.Numerical.id).map(m => m.name);\r\n            let categoricalColumns = this.settings.items.filter(m => m.type !== FeatureCategories.Numerical.id).map(m => m.name);\r\n\r\n            let datasetStats = ui.renderDatasetStats(this.settings.df, numericColumns, categoricalColumns);\r\n            this.continuousFeaturesColumns = datasetStats[0];\r\n            this.continuousFeaturesStats = datasetStats[1];\r\n            this.categoricalFeaturesColumns = datasetStats[2];\r\n            this.categoricalFeaturesStats = datasetStats[3];\r\n            this.datasetColumns = this.settings.df.columns.map(column => {\r\n                return {\r\n                    field: column,\r\n                    label: column\r\n\r\n                }\r\n            });\r\n            this.sampleData = toJSON(this.settings.df.head(5));\r\n        },\r\n        async correlationMatrix() {\r\n            this.loading = true;\r\n            let numericColumns = this.settings.items.filter(m => m.type === FeatureCategories.Numerical.id).map(m => m.name);\r\n            let values = this.settings.df.loc({ columns: numericColumns }).values\r\n            let matrix = new Matrix(values)\r\n            let correlations = correlation(matrix)\r\n            this.hasCorrelationMatrix = true;\r\n            await chartController.correlationHeatmap('correlation_matrix', correlations.data, numericColumns, 'Correlation Matrix');\r\n            let mtx = new Clustermap();\r\n            this.img = await mtx.train(values, numericColumns);\r\n            this.loading = false;\r\n\r\n        }\r\n    },\r\n\r\n}\r\n</script>\r\n\r\n<style></style>","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./main-component.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./main-component.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./main-component.vue?vue&type=template&id=dae3084c\"\nimport script from \"./main-component.vue?vue&type=script&lang=js\"\nexport * from \"./main-component.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","<template>\n  <div class=\"container\">\n    <div class=\"columns is-multiline\" id=\"app\">\n      <SidebarComponent @updateFeatures=\"updateFeatureStats\" @selected-features=\"setSelectedFeatures\">\n      </SidebarComponent>\n      <MainComponent ref=\"main\" :dataframe=\"this.settings.df\" :selectedFeatures=\"selectedFeatures\"></MainComponent>\n    </div>\n  </div>\n</template>\n\n<script>\nimport SidebarComponent from \"./components/sidebar-component.vue\";\nimport MainComponent from \"./components/main-component.vue\";\nimport { settingStore } from '@/stores/settings'\n\n\nexport default {\n  name: 'App',\n  components: {\n    SidebarComponent,\n    MainComponent,\n  },\n  setup() {\n    const settings = settingStore()\n    return { settings }\n  },\n  data() {\n    return {\n      dataframe: null,\n      selectedFeatures: []\n    }\n  },\n  methods: {\n    reset() {\n      this.settings.resetDF();\n    },\n    updateFeatureStats() {\n      this.$refs.main.renderStats()\n    },\n    setSelectedFeatures(e) {\n      this.selectedFeatures = e\n    }\n  }\n}\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n</style>\n","import mod from \"-!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./App.vue?vue&type=template&id=234a38be\"\nimport script from \"./App.vue?vue&type=script&lang=js\"\nexport * from \"./App.vue?vue&type=script&lang=js\"\nimport style0 from \"./App.vue?vue&type=style&index=0&id=234a38be&prod&lang=css\"\n\n\n/* normalize component */\nimport normalizer from \"!../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","import Vue from 'vue'\nimport App from './App.vue'\nimport Buefy from 'buefy'\nimport 'buefy/dist/buefy.css'\nimport { tensorflow } from 'danfojs/dist/danfojs-base';\nimport  Plotly  from 'danfojs/node_modules/plotly.js-dist-min';\nimport * as sk from 'scikitjs'\nimport { createPinia, PiniaVuePlugin } from 'pinia'\n\nPlotly.setPlotConfig({\n  autosize: true,\n  staticPlot: true,\n  displaylogo: false,\n  modeBarButtonsToRemove: ['resetScale2d', 'zoom2d', 'pan', 'select2d', 'resetViews', 'sendDataToCloud', 'hoverCompareCartesian', 'lasso2d', 'drawopenpath '], // Remove certain buttons from the mode bar\n});\n\n\nsk.setBackend(tensorflow);\nVue.config.productionTip = false\nVue.prototype.window = window;\n\n\nVue.use(Buefy)\nVue.use(PiniaVuePlugin)\nconst pinia = createPinia()\nnew Vue({\n  render: h => h(App),\n  pinia\n}).$mount('#app')\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","__webpack_require__.amdD = function () {\n\tthrow new Error('define cannot be used indirect');\n};","__webpack_require__.amdO = {};","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","var getProto = Object.getPrototypeOf ? function(obj) { return Object.getPrototypeOf(obj); } : function(obj) { return obj.__proto__; };\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach(function(key) { def[key] = function() { return value[key]; }; });\n\t}\n\tdef['default'] = function() { return value; };\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = function(chunkId) {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce(function(promises, key) {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks\n__webpack_require__.u = function(chunkId) {\n\t// return url for filenames based on template\n\treturn \"js/\" + chunkId + \".\" + {\"125\":\"7b2579d0\",\"167\":\"dc06bcd0\",\"179\":\"e1b084c1\",\"221\":\"3f3e92b8\",\"234\":\"3adb23e4\"}[chunkId] + \".js\";\n};","// This function allow to reference async chunks\n__webpack_require__.miniCssF = function(chunkId) {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","var inProgress = {};\nvar dataWebpackPrefix = \"mlfit:\";\n// loadScript function to load a script via script tag\n__webpack_require__.l = function(url, done, key, chunkId) {\n\tif(inProgress[url]) { inProgress[url].push(done); return; }\n\tvar script, needAttach;\n\tif(key !== undefined) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tfor(var i = 0; i < scripts.length; i++) {\n\t\t\tvar s = scripts[i];\n\t\t\tif(s.getAttribute(\"src\") == url || s.getAttribute(\"data-webpack\") == dataWebpackPrefix + key) { script = s; break; }\n\t\t}\n\t}\n\tif(!script) {\n\t\tneedAttach = true;\n\t\tscript = document.createElement('script');\n\n\t\tscript.charset = 'utf-8';\n\t\tscript.timeout = 120;\n\t\tif (__webpack_require__.nc) {\n\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n\t\t}\n\t\tscript.setAttribute(\"data-webpack\", dataWebpackPrefix + key);\n\n\t\tscript.src = url;\n\t}\n\tinProgress[url] = [done];\n\tvar onScriptComplete = function(prev, event) {\n\t\t// avoid mem leaks in IE.\n\t\tscript.onerror = script.onload = null;\n\t\tclearTimeout(timeout);\n\t\tvar doneFns = inProgress[url];\n\t\tdelete inProgress[url];\n\t\tscript.parentNode && script.parentNode.removeChild(script);\n\t\tdoneFns && doneFns.forEach(function(fn) { return fn(event); });\n\t\tif(prev) return prev(event);\n\t}\n\tvar timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);\n\tscript.onerror = onScriptComplete.bind(null, script.onerror);\n\tscript.onload = onScriptComplete.bind(null, script.onload);\n\tneedAttach && document.head.appendChild(script);\n};","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = function(module) {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","__webpack_require__.p = \"/\";","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t524: 0\n};\n\n__webpack_require__.f.j = function(chunkId, promises) {\n\t\t// JSONP chunk loading for javascript\n\t\tvar installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;\n\t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n\t\t\t// a Promise means \"currently loading\".\n\t\t\tif(installedChunkData) {\n\t\t\t\tpromises.push(installedChunkData[2]);\n\t\t\t} else {\n\t\t\t\tif(true) { // all chunks have JS\n\t\t\t\t\t// setup Promise in chunk cache\n\t\t\t\t\tvar promise = new Promise(function(resolve, reject) { installedChunkData = installedChunks[chunkId] = [resolve, reject]; });\n\t\t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n\t\t\t\t\t// start chunk loading\n\t\t\t\t\tvar url = __webpack_require__.p + __webpack_require__.u(chunkId);\n\t\t\t\t\t// create error before stack unwound to get useful stacktrace later\n\t\t\t\t\tvar error = new Error();\n\t\t\t\t\tvar loadingEnded = function(event) {\n\t\t\t\t\t\tif(__webpack_require__.o(installedChunks, chunkId)) {\n\t\t\t\t\t\t\tinstalledChunkData = installedChunks[chunkId];\n\t\t\t\t\t\t\tif(installedChunkData !== 0) installedChunks[chunkId] = undefined;\n\t\t\t\t\t\t\tif(installedChunkData) {\n\t\t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n\t\t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n\t\t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n\t\t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n\t\t\t\t\t\t\t\terror.type = errorType;\n\t\t\t\t\t\t\t\terror.request = realSrc;\n\t\t\t\t\t\t\t\tinstalledChunkData[1](error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t__webpack_require__.l(url, loadingEnded, \"chunk-\" + chunkId, chunkId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n};\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = function(parentChunkLoadingFunction, data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkmlfit\"] = self[\"webpackChunkmlfit\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [504], function() { return __webpack_require__(52696); })\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["render","_vm","this","_c","_self","staticClass","attrs","on","updateFeatureStats","setSelectedFeatures","ref","settings","df","selectedFeatures","staticRenderFns","$event","impute","_v","configureFeatures","updateFeatures","_m","_l","featureSettings","feature","index","key","model","value","selected","callback","$$v","$set","expression","_s","name","checkmodelTask","type","featureTypeOptions","option","id","domProps","generateTargetDropdown","filter","length","seed","modelTarget","columns","imputationOption","imputationOptions","label","crossValidationOption","crossValidationOptions","tuneModel","modelOption","modelOptions","configureModel","modelConfigurations","i","values","item","_e","training","dataframe","train","class","file","datasetName","header","separator","separatorOptions","decimal","decimalOptions","handleFileSelect","samplDataOptions","DataParser","parse","_content","Error","CSVParser","constructor","options","super","separators","delimiter","has_header","content","Promise","resolve","Papa","worker","transform","val","NaN","skipEmptyLines","dynamicTyping","complete","async","result","data","XLXParser","reader","FileReader","onload","arrayBuffer","array","Uint8Array","binaryString","String","fromCharCode","apply","workbook","XLSX","read","first_sheet_name","SheetNames","worksheet","Sheets","utils","sheet_to_json","raw","readAsArrayBuffer","TXTParser","element","j","parseFloat","replace","ParserFactory","createParser","fileType","toLowerCase","parser","settingStore","defineStore","state","counter","features","transformations","results","activeTab","resultActiveTab","datasetShape","count","target","isClassification","getters","items","getCounter","getDatasetName","getDatasetShape","getDataset","currentTab","outputs","transformationsList","classificationTask","actions","setDatasetName","setDatasetShape","shape","resetFeatures","resetTransformations","resetDataset","increaseCounter","setDataframe","addFeature","findIndex","m","push","addTransformation","transformation","addResult","removeResult","splice","getResultVisualizations","tables","plots","resetDF","updateFeature","removeItem","lastIndexOf","setTarget","setmodelTask","setActiveTab","setResultActiveTab","DATASET_SIZE","setup","props","msg","sampleDataset","watch","dataset","process_file","split","initDataframe","error","$buefy","toast","open","methods","$data","$emit","processdDataset","slice","dataFrame","DataFrame","current","fetch","then","response","blob","File","catch","console","component","FeatureCategories","CV_OPTIONS","SPLIT","NO","KFOLD","ScaleOptions","Settings","default","placeholder","for","pyodideWorker","Worker","URL","callbacks","onmessage","event","onSuccess","asyncRun","script","context","Number","MAX_SAFE_INTEGER","postMessage","python","PCA","predict","x","x_train","log","e","filename","lineno","message","binarize","y","threshold","tf","util","assert","tidy","condition","greater","scalar","where","onesLike","zerosLike","encode_name","str_encoded","metrics","y_pred","labels","calculateRSquared","actual","predicted","meanActual","mean_array","totalSumOfSquares","reduce","acc","Math","pow","residualSumOfSquares","calculateMSE","actualValues","predictedValues","n","sumSquaredError","squaredError","meanSquaredError","evaluate_classification","predictions","y_test","encoder","missclassification_indexes","missclassification_preds","currect_classifications_sum","forEach","inverseTransform","accuracy","indexes","mispredictions","scale_data","column","normalization_type","scaler","MinMaxScaler","fit","addColumn","inplace","ln","isNaN","StandardScaler","applyDataTransformation","column_names","find","toString","handle_missing_values","data_frame","string_columns","numeric_columns","string_column_modes","numeric_column_means","dtype","mode","getCategoricalMode","mean","fillNa","dropNa","axis","arr","categoryCount","category","undefined","modeCategory","modeCount","encode_dataset","columns_types","copy","categorical_columns","Nominal","Ordinal","categoriclaFeaturesAfterEncoding","LabelEncoder","encoded_column","getDummies","classification","logistic_regression","regression","linear_regression","polynomial_regression","drop","includes","ChartController","_defineProperty","gaussian","u","exp","sqrt","PI","uniform","abs","triangular","biweight","triweight","Epanechnikov","color_scheme","schemeCategory10","classification_target_chart","container","title","uniqueLabels","Set","colorIndices","map","indexToColor","indexOf","color","Highcharts","chart","credits","enabled","text","xAxis","categories","yAxis","min","plotOptions","pointPadding","borderWidth","colors","series","regression_target_chart","kde_data","ys","items_range","breaks","ss","kde","legend","verticalAlign","height","animation","tooltip","valueDecimals","marker","dashStyle","area","lineWidth","draw_categorical_barplot","column_values","$","append","countOccurrences","countArray","Object","entries","sort","a","b","top5","Chart","renderTo","overflow","bar","dataLabels","showInLegend","roc_chart","true_positive_rates","false_positive_rates","trace","trace2","layout","xaxis","yaxis","Plotly","falsePositives","yTrue","yPred","one","zero","logicalAnd","equal","sum","cast","reshape","size","restShape","restSize","plot_tsne","regression_labels","document","getElementById","style","display","Array","isArray","tsneOpt","tsne","tensorflow","tensor2d","compute","coordinates","dataSync","Y","traces","flat","points_labled","items_for_label","points","colorscale","colorbar","titleside","showlegend","margin","l","r","t","pad","linecolor","linewidth","mirror","xanchor","responsive","modeBarButtonsToRemove","trueNegatives","falsePositiveRate","fp","tn","div","add","drawROC","targets","probs","thresholds","tprs","fprs","threshPredictions","as1D","fpr","tpr","recall","nrd","s","iqr","hexToRgb","hex","exec","parseInt","g","draw_kde","target_name","bandwidth","is_classification","redrawing","default_bandwidth","toFixed","raw_values","loc","subsets","subset","newColumn","createElement","className","setAttribute","addEventListener","Numerical","newBandwidth","current_class","container_id","allData","kernel_type","kernelFunctions","animationDuration","visible","autosize","align","duration","window","dispatchEvent","Event","classificationPCA","missclassifications","pca","center","scale","pca_data","nComponents","x_error","y_error","error_texts","real_labels","join","trace1","symbol","customdata","hovertemplate","hovermode","hoverlabel","bgcolor","staticPlot","draw_pca","x_axis","y_axis","pca_x","pc1","traces1","cumulatedExplainedVaraince","floating","max","plotLines","width","zIndex","formatter","drawStackedHorizontalChart","lable","orientation","barmode","regularization_plot","xs","colorway","argmax","maxIndex","currentValue","currentIndex","probabilities_boxplot","true_labels","num_columns","true_label","boxmode","probablities_violin_plot","classes","arrayColumn","box","boxpoints","line","fillcolor","opacity","meanline","zeroline","plotConfusionMatrix","predictedLabels","uniqueClasses","tab_index","confusionMatrix","metric","ClassificationMetric","arraySync","f1Micro","f1Macro","len","preceissions","recalls","dispose","metric_labels","items_labels","formatted_matrix","exporting","plotBorderWidth","fontSize","linkedTo","opposite","tickLength","each","p","reversed","endOnTick","colorAxis","minColor","maxColor","getOptions","symbolHeight","useHTML","totalCount","cur","point","skip","percentage","rules","maxWidth","chartOptions","format","plot_regularization","weights","alphas","names","serieses","alphas_formatted","connectorAllowed","yhat_plot","dash","font","family","xref","residual_plot","residuals","ScatterplotMatrix","number_of_categoricals","reject","setTimeout","unique_labels","k","set","_","z","unique_labels_feature","lablel_items","counts","ii","fill","column_items","unique_classes","class_frequencies","class_label","boxplot_labels","box_items","offsetgroup","arr1","arr2","jStat","corrcoeff","textfont","spacing","grid","rows","pattern","xAxisKey","yAxisKey","showgrid","showticklabels","tickfont","KNNPerformancePlot","optimalTrainSpec","optimalTestSpec","evaluation","evaluation_train","min_y","POSITIVE_INFINITY","max_y","NEGATIVE_INFINITY","shapes","x0","y0","x1","y1","KNNPerformancePlotRegression","correlationHeatmap","correlations","hoverongaps","showscale","annotations","ticks","side","ticksuffix","textColor","yref","showarrow","PFIBoxplot","importances","importance","from","plotPDP","averages","average","plotROC","UI","chart_controller","data_parser","get_model_settings","model_settings","model_name","option_value","createAlgorithmsSelect","hasOwnProperty","call","updateAlgorithmsSelect","find_selected_columns","get_all","selected_columns","checked","find_selected_columns_types","include_target","column_types","createTargetDropdown","createFeaturesDropdown","insertSpaces","string","renderDatasetStats","continuousFeatures","categoricalFeatures","continuousFeaturesStats","categoricalFeaturesStats","continuousHeaders","field","categoricalHeaders","median","std","missingVlauesCount","isNa","category_info","get_numeric_columns","selected_columns_types","col","numericColumns","get_categorical_columns","visualize","file_name","concat","filterd_dataset","limit","innerHTML","toggle_loading_progress","show","init_tooltips","tippy","interactive","popperOptions","positionFixed","allowHTML","predictions_table_regression","table_columns","DataTable","pageLength","paging","columnDefs","row","bPaginate","bDestroy","removeTable","tableId","destroy","predictions_table","keys","rowCallback","prediction","addClass","ClassificationModel","chartController","ui","task","x_test","evaluateModel","evaluation_result","$labels","tensor","LinearRegression","summary","model_stats_matrix","y_train","X_train","X_test","regularization_type","regularization","webR","webr","init","installPackages","quiet","objs","globalEnv","bind","plotlyData","evalR","toArray","params","bse","pvalues","predictions1se","predictionsmin","residuals_ols","residuals_1se","residuals_min","aic","toNumber","bic","r2","best_fit_min","coefs","best_fit_1se","cols","unshift","min_ols_columns","se_ols_columns","reverse","reg_plot","JSON","coefs_plot","traceorder","errors_plot","qqplot_ols_plot","qqplot_1se_plot","qqplot_min_plot","start","end","api","footer","html","info","search","ordering","searching","RegressionModel","td","cellData","rowData","css","BSplineRegression","knots","degree","pdp_averages","pdp_grid","SVM_TYPES","C_SVC","NU_SVC","ONE_CLASS","EPSILON_SVR","NU_SVR","KERNEL_TYPES","LINEAR","POLYNOMIAL","RBF","SIGMOID","PRECOMPUTED","SupportVectorMachine","opt","kernel","toUpperCase","bias","gamma","SupportVectorMachineRegression","KNNModel","KNeighborsClassifier","nNeighbors","encoded_y_train","encoded_y_test","predictions_test","predictions_train","pobas","predict_probas","evaluation_test","probas","predictProba","KNNRegressor","KNeighborsRegressor","ans","RandomForest","rf_type","criteria","max_features","num_estimators","estimators","max_depth","depth","RandomForestRegressor","NaiveBayes","nb_type","priors","smoothing","laplace","num_classes","DiscriminantAnalysis","lda_type","PolynomialRegression","columnNames","KernelRegression","types","Boosting","chartControler","booster","objective","eta","BoostingRegression","ModelFactory","createModel","modelName","LogisticRegression","k_nearest_neighbour","random_forest","support_vector_machine","boosting","discriminant_analysis","naive_bayes","kernel_regression","bspline_regression","components","UploadComponent","modelSettings","toggleTraining","getDefaultModelConfiguration","dtypes","targetFeature","sample","cross_validation_setting","labelEncoder","encoded_y","splitData","encodeTarget","model_factory","modelTask","axios","post","toJSON","res","created","ceil","train_bound","test_bound","iloc","oldVal","isActive","continuousFeaturesColumns","categoricalFeaturesColumns","sampleData","datasetColumns","loading","correlationMatrix","staticStyle","img","pcaX","pcaY","findingPCA","findPCA","hasPCA","findingTSNE","findTSNE","autoEncoder","sequential","layers","dense","units","batchInputShape","activation","kernelInitializer","biasInitializer","decoder","compile","optimizer","loss","epochs","batchSize","shuffle","validationSpit","tidyWrapper","predictor","ret","refInFor","deleteResult","deleteTab","ClassificationViewComponent","RegressionViewComponent","visitedTabs","table","plot","resize","isVisited","exportToPDF","pdf","jsPDF","$el","iframe","body","appendChild","src","output","column_width","scaleData","isLoading","dispalySPLOM","validTransformations","computed","get","Clustermap","PCAComponent","ResultsComponent","SPLOMComponent","hasCorrelationMatrix","renderStats","categoricalColumns","datasetStats","head","matrix","Matrix","correlation","mtx","SidebarComponent","MainComponent","reset","$refs","main","displaylogo","sk","Vue","config","productionTip","prototype","use","Buefy","PiniaVuePlugin","pinia","createPinia","h","App","$mount","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","loaded","__webpack_modules__","amdD","amdO","deferred","O","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","every","getter","__esModule","d","leafPrototypes","getProto","getPrototypeOf","obj","__proto__","ns","create","def","getOwnPropertyNames","definition","o","defineProperty","enumerable","f","chunkId","all","promises","miniCssF","globalThis","Function","prop","inProgress","dataWebpackPrefix","url","done","needAttach","scripts","getElementsByTagName","getAttribute","charset","timeout","nc","onScriptComplete","prev","onerror","clearTimeout","doneFns","parentNode","removeChild","Symbol","toStringTag","nmd","paths","children","baseURI","self","location","href","installedChunks","installedChunkData","promise","loadingEnded","errorType","realSrc","request","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","chunkLoadingGlobal","__webpack_exports__"],"sourceRoot":""}